
SSDSoftware.elf:     file format elf32-littlenios2
SSDSoftware.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00002ca4 memsz 0x00002ca4 flags r-x
    LOAD off    0x00003cc4 vaddr 0x00042cc4 paddr 0x00044394 align 2**12
         filesz 0x000016d0 memsz 0x000016d0 flags rw-
    LOAD off    0x00005a64 vaddr 0x00045a64 paddr 0x00045a64 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002a58  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  00042c88  00042c88  00003c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000016d0  00042cc4  00044394  00003cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00045a64  00045a64  00005a64  2**2
                  ALLOC, SMALL_DATA
  6 .ImagemA      00000000  00000000  00000000  00005394  2**0
                  CONTENTS
  7 .ImagemC      00000000  00020000  00020000  00005394  2**0
                  CONTENTS
  8 .ImagemB      00000000  00030000  00030000  00005394  2**0
                  CONTENTS
  9 .MemoriaPrograma 00000000  00045b88  00045b88  00005394  2**0
                  CONTENTS
 10 .comment      00000023  00000000  00000000  00005394  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000005f8  00000000  00000000  000053b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00008235  00000000  00000000  000059b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c25  00000000  00000000  0000dbe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002c9c  00000000  00000000  0001080a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000bcc  00000000  00000000  000134a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001c65  00000000  00000000  00014074  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00000803  00000000  00000000  00015cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_alt_sim_info 00000010  00000000  00000000  000164dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00000178  00000000  00000000  000164f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .thread_model 00000003  00000000  00000000  0001836d  2**0
                  CONTENTS, READONLY
 21 .cpu          0000000b  00000000  00000000  00018370  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  0001837b  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  0001837c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001837d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00018386  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001838f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000018  00000000  00000000  00018398  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  000183b0  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00059cc7  00000000  00000000  000183d3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
00042c88 l    d  .rodata	00000000 .rodata
00042cc4 l    d  .rwdata	00000000 .rwdata
00045a64 l    d  .bss	00000000 .bss
00000000 l    d  .ImagemA	00000000 .ImagemA
00020000 l    d  .ImagemC	00000000 .ImagemC
00030000 l    d  .ImagemB	00000000 .ImagemB
00045b88 l    d  .MemoriaPrograma	00000000 .MemoriaPrograma
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SSDSoftware_bsp//obj/HAL/src/crt0.o
00040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Principal.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
0004056c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000406d4 l     F .text	00000034 alt_dev_reg
00042cc4 l     O .rwdata	00001060 jtag_uart
00043d24 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000409b8 l     F .text	0000020c altera_avalon_jtag_uart_irq
00040bc4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
00044320 l     O .rwdata	00000009 hcinfo.2538
0004432c l     O .rwdata	0000000a hcinfo.2551
00044338 l     O .rwdata	00000009 hcinfo.2560
00044344 l     O .rwdata	0000000a hcinfo.2573
00044350 l     O .rwdata	0000000a hcinfo.2586
0004435c l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
000417ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000418e0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004190c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00041dec l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00041f4c l     F .text	0000003c alt_get_errno
00041f88 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00043ef4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00045a80 g     O .bss	00000004 alt_instruction_exception_handler
00040658 g     F .text	0000007c alt_main
00045a88 g     O .bss	00000100 alt_irq
00044394 g       *ABS*	00000000 __flash_rwdata_start
000411fc g     F .text	0000011c alt_hostfs_open
000423f8 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00045a84 g     O .bss	00000004 errno
00045a6c g     O .bss	00000004 alt_argv
0004c318 g       *ABS*	00000000 _gp
00045a64 g     O .bss	00000004 imgA
00043d74 g     O .rwdata	00000180 alt_fd_list
00041434 g     F .text	00000068 alt_hostfs_seek
0004241c g     F .text	00000090 alt_find_dev
000427dc g     F .text	00000148 memcpy
00041aac g     F .text	00000080 alt_fs_reg
00041ed0 g     F .text	0000007c alt_io_redirect
00042c88 g       *ABS*	00000000 __DTOR_END__
00042678 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00040dbc g     F .text	0000021c altera_avalon_jtag_uart_read
0004135c g     F .text	0000006c alt_hostfs_read
00020000 g       *ABS*	00000000 __alt_mem_ImagemC
00044378 g     O .rwdata	00000004 alt_max_fd
0004438c g     O .rwdata	00000004 _global_impure_ptr
00045b88 g       *ABS*	00000000 __bss_end
00041cfc g     F .text	000000f0 alt_iic_isr_register
000422f0 g     F .text	00000108 alt_tick
00041cb0 g     F .text	0000004c alt_ic_irq_enabled
00042254 g     F .text	0000009c alt_alarm_stop
00045a74 g     O .bss	00000004 alt_irq_active
00041318 g     F .text	00000044 alt_hostfs_close
000400fc g     F .exceptions	000000d4 alt_irq_handler
00043d4c g     O .rwdata	00000028 alt_dev_null
000418c0 g     F .text	00000020 alt_dcache_flush_all
00044394 g       *ABS*	00000000 __ram_rwdata_end
00044370 g     O .rwdata	00000008 alt_dev_list
00042cc4 g       *ABS*	00000000 __ram_rodata_end
00045b88 g       *ABS*	00000000 end
00040000 g       *ABS*	00000000 __alt_mem_MemoriaPrograma
000408f8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00042c88 g       *ABS*	00000000 __CTOR_LIST__
00050000 g       *ABS*	00000000 __alt_stack_pointer
00040fd8 g     F .text	00000224 altera_avalon_jtag_uart_write
00042ad4 g     F .text	00000180 __call_exitprocs
00040230 g     F .text	0000003c _start
00045a78 g     O .bss	00000004 _alt_tick_rate
00045a7c g     O .bss	00000004 _alt_nticks
00040740 g     F .text	00000054 alt_sys_init
000429bc g     F .text	00000118 __register_exitproc
00040c64 g     F .text	00000068 altera_avalon_jtag_uart_close
00040544 g     F .text	00000028 .hidden __mulsi3
00042cc4 g       *ABS*	00000000 __ram_rwdata_start
00042c88 g       *ABS*	00000000 __ram_rodata_start
00044318 g     O .rwdata	00000004 imgB
00040794 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000425b4 g     F .text	000000c4 alt_get_fd
00042760 g     F .text	0000007c memcmp
00040854 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00045b88 g       *ABS*	00000000 __alt_stack_base
000408a4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000424ac g     F .text	00000108 alt_find_file
00041948 g     F .text	000000a4 alt_dev_llist_insert
00000000 g       *ABS*	00000000 __alt_mem_ImagemA
00045a64 g       *ABS*	00000000 __bss_start
0004026c g     F .text	000002d8 main
00045a70 g     O .bss	00000004 alt_envp
000407f4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004437c g     O .rwdata	00000004 alt_errno
00042c88 g       *ABS*	00000000 __CTOR_END__
00042c88 g       *ABS*	00000000 __flash_rodata_start
00042c88 g       *ABS*	00000000 __DTOR_LIST__
00040708 g     F .text	00000038 alt_irq_init
000421d0 g     F .text	00000084 alt_release_fd
00042714 g     F .text	00000014 atexit
00044390 g     O .rwdata	00000004 _impure_ptr
00045a68 g     O .bss	00000004 alt_argc
00041a4c g     F .text	00000060 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00044368 g     O .rwdata	00000008 alt_fs_list
000413c8 g     F .text	0000006c alt_hostfs_write
00040020 g       *ABS*	00000000 __ram_exceptions_start
00041b4c g     F .text	00000050 alt_ic_isr_register
00044394 g       *ABS*	00000000 _edata
00045b88 g       *ABS*	00000000 _end
00040230 g       *ABS*	00000000 __ram_exceptions_end
00040ccc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00041c24 g     F .text	0000008c alt_ic_irq_disable
00042728 g     F .text	00000038 exit
00030000 g       *ABS*	00000000 __alt_mem_ImagemB
00050000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00042c54 g     F .text	00000034 _exit
00041680 g     F .text	0000012c alt_alarm_start
00042924 g     F .text	00000098 strlen
00042074 g     F .text	0000015c open
0004431c g     O .rwdata	00000004 imgC
00041b2c g     F .text	00000020 alt_icache_flush_all
00044380 g     O .rwdata	00000004 alt_priority_mask
00041b9c g     F .text	00000088 alt_ic_irq_enable
00044384 g     O .rwdata	00000008 alt_alarm_list
000419ec g     F .text	00000060 _do_ctors
000417e8 g     F .text	000000d8 close
000405d4 g     F .text	00000084 alt_load
0004149c g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800134 	movhi	r2,4
   40140:	1096a204 	addi	r2,r2,23176
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800134 	movhi	r2,4
   40158:	1096a204 	addi	r2,r2,23176
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xffff012c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xffff0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0a5da17 	ldw	r2,-26776(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0a5da17 	ldw	r2,-26776(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   40238:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   4023c:	d6b0c614 	ori	gp,gp,49944
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40240:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40244:	10969914 	ori	r2,r2,23140

    movhi r3, %hi(__bss_end)
   40248:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   4024c:	18d6e214 	ori	r3,r3,23432

    beq r2, r3, 1f
   40250:	10c00326 	beq	r2,r3,40260 <_start+0x30>

0:
    stw zero, (r2)
   40254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4025c:	10fffd36 	bltu	r2,r3,40254 <__alt_data_end+0xffff0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40260:	00405d40 	call	405d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40264:	00406580 	call	40658 <alt_main>

00040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40268:	003fff06 	br	40268 <__alt_data_end+0xffff0268>

0004026c <main>:
int * imgA = IMG_A;
int * imgB = IMG_B;
int * imgC = IMG_C;

int main()
{
   4026c:	defffe04 	addi	sp,sp,-8
   40270:	dfc00115 	stw	ra,4(sp)
   40274:	df000015 	stw	fp,0(sp)
   40278:	d839883a 	mov	fp,sp
   4027c:	023ffe74 	movhi	r8,65529
   40280:	423dfe04 	addi	r8,r8,-2056
   40284:	da37883a 	add	sp,sp,r8

	//Calculo SSD Software
	int diff[DATA_SIZE], square[DATA_SIZE];
	*MEDIDOR_ESCRITA = 0;
   40288:	00800174 	movhi	r2,5
   4028c:	10840b04 	addi	r2,r2,4140
   40290:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1;
   40294:	00800174 	movhi	r2,5
   40298:	10840b04 	addi	r2,r2,4140
   4029c:	00c00044 	movi	r3,1
   402a0:	10c00015 	stw	r3,0(r2)
	for (int i = 0; i < DATA_SIZE; i++)
   402a4:	00bffe74 	movhi	r2,65529
   402a8:	10bdfe04 	addi	r2,r2,-2056
   402ac:	1705883a 	add	r2,r2,fp
   402b0:	10000015 	stw	zero,0(r2)
   402b4:	00006906 	br	4045c <main+0x1f0>
	{
		diff[i] = imgB[i] - imgA[i];
   402b8:	d0e00017 	ldw	r3,-32768(gp)
   402bc:	013ffe74 	movhi	r4,65529
   402c0:	213dfe04 	addi	r4,r4,-2056
   402c4:	2709883a 	add	r4,r4,fp
   402c8:	20800017 	ldw	r2,0(r4)
   402cc:	1085883a 	add	r2,r2,r2
   402d0:	1085883a 	add	r2,r2,r2
   402d4:	1885883a 	add	r2,r3,r2
   402d8:	10c00017 	ldw	r3,0(r2)
   402dc:	d125d317 	ldw	r4,-26804(gp)
   402e0:	017ffe74 	movhi	r5,65529
   402e4:	297dfe04 	addi	r5,r5,-2056
   402e8:	2f0b883a 	add	r5,r5,fp
   402ec:	28800017 	ldw	r2,0(r5)
   402f0:	1085883a 	add	r2,r2,r2
   402f4:	1085883a 	add	r2,r2,r2
   402f8:	2085883a 	add	r2,r4,r2
   402fc:	10800017 	ldw	r2,0(r2)
   40300:	1887c83a 	sub	r3,r3,r2
   40304:	013ffe74 	movhi	r4,65529
   40308:	213dfe04 	addi	r4,r4,-2056
   4030c:	2709883a 	add	r4,r4,fp
   40310:	20800017 	ldw	r2,0(r4)
   40314:	1085883a 	add	r2,r2,r2
   40318:	1085883a 	add	r2,r2,r2
   4031c:	017ffe74 	movhi	r5,65529
   40320:	297dfe04 	addi	r5,r5,-2056
   40324:	2f0b883a 	add	r5,r5,fp
   40328:	2885883a 	add	r2,r5,r2
   4032c:	10800204 	addi	r2,r2,8
   40330:	10c00015 	stw	r3,0(r2)
		square[i] = diff[i]*diff[i];
   40334:	00fffe74 	movhi	r3,65529
   40338:	18fdfe04 	addi	r3,r3,-2056
   4033c:	1f07883a 	add	r3,r3,fp
   40340:	18800017 	ldw	r2,0(r3)
   40344:	1085883a 	add	r2,r2,r2
   40348:	1085883a 	add	r2,r2,r2
   4034c:	013ffe74 	movhi	r4,65529
   40350:	213dfe04 	addi	r4,r4,-2056
   40354:	2709883a 	add	r4,r4,fp
   40358:	2085883a 	add	r2,r4,r2
   4035c:	10800204 	addi	r2,r2,8
   40360:	10c00017 	ldw	r3,0(r2)
   40364:	017ffe74 	movhi	r5,65529
   40368:	297dfe04 	addi	r5,r5,-2056
   4036c:	2f0b883a 	add	r5,r5,fp
   40370:	28800017 	ldw	r2,0(r5)
   40374:	1085883a 	add	r2,r2,r2
   40378:	1085883a 	add	r2,r2,r2
   4037c:	013ffe74 	movhi	r4,65529
   40380:	213dfe04 	addi	r4,r4,-2056
   40384:	2709883a 	add	r4,r4,fp
   40388:	2085883a 	add	r2,r4,r2
   4038c:	10800204 	addi	r2,r2,8
   40390:	10800017 	ldw	r2,0(r2)
   40394:	100b883a 	mov	r5,r2
   40398:	1809883a 	mov	r4,r3
   4039c:	00405440 	call	40544 <__mulsi3>
   403a0:	1009883a 	mov	r4,r2
   403a4:	00800134 	movhi	r2,4
   403a8:	10a10204 	addi	r2,r2,-31736
   403ac:	017ffe74 	movhi	r5,65529
   403b0:	297dfe04 	addi	r5,r5,-2056
   403b4:	2f0b883a 	add	r5,r5,fp
   403b8:	2887883a 	add	r3,r5,r2
   403bc:	017ffe74 	movhi	r5,65529
   403c0:	297dfe04 	addi	r5,r5,-2056
   403c4:	2f0b883a 	add	r5,r5,fp
   403c8:	28800017 	ldw	r2,0(r5)
   403cc:	1085883a 	add	r2,r2,r2
   403d0:	1085883a 	add	r2,r2,r2
   403d4:	1885883a 	add	r2,r3,r2
   403d8:	11000015 	stw	r4,0(r2)
		imgC[i] = square[i];
   403dc:	d0e00117 	ldw	r3,-32764(gp)
   403e0:	013ffe74 	movhi	r4,65529
   403e4:	213dfe04 	addi	r4,r4,-2056
   403e8:	2709883a 	add	r4,r4,fp
   403ec:	20800017 	ldw	r2,0(r4)
   403f0:	1085883a 	add	r2,r2,r2
   403f4:	1085883a 	add	r2,r2,r2
   403f8:	1887883a 	add	r3,r3,r2
   403fc:	00800134 	movhi	r2,4
   40400:	10a10204 	addi	r2,r2,-31736
   40404:	017ffe74 	movhi	r5,65529
   40408:	297dfe04 	addi	r5,r5,-2056
   4040c:	2f0b883a 	add	r5,r5,fp
   40410:	2889883a 	add	r4,r5,r2
   40414:	017ffe74 	movhi	r5,65529
   40418:	297dfe04 	addi	r5,r5,-2056
   4041c:	2f0b883a 	add	r5,r5,fp
   40420:	28800017 	ldw	r2,0(r5)
   40424:	1085883a 	add	r2,r2,r2
   40428:	1085883a 	add	r2,r2,r2
   4042c:	2085883a 	add	r2,r4,r2
   40430:	10800017 	ldw	r2,0(r2)
   40434:	18800015 	stw	r2,0(r3)

	//Calculo SSD Software
	int diff[DATA_SIZE], square[DATA_SIZE];
	*MEDIDOR_ESCRITA = 0;
	*MEDIDOR_ESCRITA = 1;
	for (int i = 0; i < DATA_SIZE; i++)
   40438:	00fffe74 	movhi	r3,65529
   4043c:	18fdfe04 	addi	r3,r3,-2056
   40440:	1f07883a 	add	r3,r3,fp
   40444:	18800017 	ldw	r2,0(r3)
   40448:	10800044 	addi	r2,r2,1
   4044c:	013ffe74 	movhi	r4,65529
   40450:	213dfe04 	addi	r4,r4,-2056
   40454:	2709883a 	add	r4,r4,fp
   40458:	20800015 	stw	r2,0(r4)
   4045c:	017ffe74 	movhi	r5,65529
   40460:	297dfe04 	addi	r5,r5,-2056
   40464:	2f0b883a 	add	r5,r5,fp
   40468:	28800017 	ldw	r2,0(r5)
   4046c:	00f83fd4 	movui	r3,57599
   40470:	18bf910e 	bge	r3,r2,402b8 <__alt_data_end+0xffff02b8>
	{
		diff[i] = imgB[i] - imgA[i];
		square[i] = diff[i]*diff[i];
		imgC[i] = square[i];
	}
	*MEDIDOR_ESCRITA = 2;
   40474:	00800174 	movhi	r2,5
   40478:	10840b04 	addi	r2,r2,4140
   4047c:	00c00084 	movi	r3,2
   40480:	10c00015 	stw	r3,0(r2)

	//Exportando Imagem
	*PIXEL_FLAG = 0;
   40484:	00800174 	movhi	r2,5
   40488:	10840004 	addi	r2,r2,4096
   4048c:	10000015 	stw	zero,0(r2)
	for (int i = 0; i < DATA_SIZE; i++)
   40490:	00bffe74 	movhi	r2,65529
   40494:	10bdff04 	addi	r2,r2,-2052
   40498:	1705883a 	add	r2,r2,fp
   4049c:	10000015 	stw	zero,0(r2)
   404a0:	00001c06 	br	40514 <main+0x2a8>
	{
		*SAIDA_IMAGEM = imgC[i];
   404a4:	00800174 	movhi	r2,5
   404a8:	10840404 	addi	r2,r2,4112
   404ac:	d1200117 	ldw	r4,-32764(gp)
   404b0:	017ffe74 	movhi	r5,65529
   404b4:	297dff04 	addi	r5,r5,-2052
   404b8:	2f0b883a 	add	r5,r5,fp
   404bc:	28c00017 	ldw	r3,0(r5)
   404c0:	18c7883a 	add	r3,r3,r3
   404c4:	18c7883a 	add	r3,r3,r3
   404c8:	20c7883a 	add	r3,r4,r3
   404cc:	18c00017 	ldw	r3,0(r3)
   404d0:	10c00015 	stw	r3,0(r2)
		*PIXEL_FLAG = 1;
   404d4:	00800174 	movhi	r2,5
   404d8:	10840004 	addi	r2,r2,4096
   404dc:	00c00044 	movi	r3,1
   404e0:	10c00015 	stw	r3,0(r2)
		*PIXEL_FLAG = 0;
   404e4:	00800174 	movhi	r2,5
   404e8:	10840004 	addi	r2,r2,4096
   404ec:	10000015 	stw	zero,0(r2)
	}
	*MEDIDOR_ESCRITA = 2;

	//Exportando Imagem
	*PIXEL_FLAG = 0;
	for (int i = 0; i < DATA_SIZE; i++)
   404f0:	00fffe74 	movhi	r3,65529
   404f4:	18fdff04 	addi	r3,r3,-2052
   404f8:	1f07883a 	add	r3,r3,fp
   404fc:	18800017 	ldw	r2,0(r3)
   40500:	10800044 	addi	r2,r2,1
   40504:	013ffe74 	movhi	r4,65529
   40508:	213dff04 	addi	r4,r4,-2052
   4050c:	2709883a 	add	r4,r4,fp
   40510:	20800015 	stw	r2,0(r4)
   40514:	017ffe74 	movhi	r5,65529
   40518:	297dff04 	addi	r5,r5,-2052
   4051c:	2f0b883a 	add	r5,r5,fp
   40520:	28800017 	ldw	r2,0(r5)
   40524:	00f83fd4 	movui	r3,57599
   40528:	18bfde0e 	bge	r3,r2,404a4 <__alt_data_end+0xffff04a4>
	}

	//Parte hardware
	//...

	return 0;
   4052c:	0005883a 	mov	r2,zero
}
   40530:	e037883a 	mov	sp,fp
   40534:	dfc00117 	ldw	ra,4(sp)
   40538:	df000017 	ldw	fp,0(sp)
   4053c:	dec00204 	addi	sp,sp,8
   40540:	f800283a 	ret

00040544 <__mulsi3>:
   40544:	0005883a 	mov	r2,zero
   40548:	20000726 	beq	r4,zero,40568 <__mulsi3+0x24>
   4054c:	20c0004c 	andi	r3,r4,1
   40550:	2008d07a 	srli	r4,r4,1
   40554:	18000126 	beq	r3,zero,4055c <__mulsi3+0x18>
   40558:	1145883a 	add	r2,r2,r5
   4055c:	294b883a 	add	r5,r5,r5
   40560:	203ffa1e 	bne	r4,zero,4054c <__alt_data_end+0xffff054c>
   40564:	f800283a 	ret
   40568:	f800283a 	ret

0004056c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4056c:	defffc04 	addi	sp,sp,-16
   40570:	df000315 	stw	fp,12(sp)
   40574:	df000304 	addi	fp,sp,12
   40578:	e13ffd15 	stw	r4,-12(fp)
   4057c:	e17ffe15 	stw	r5,-8(fp)
   40580:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   40584:	e0fffe17 	ldw	r3,-8(fp)
   40588:	e0bffd17 	ldw	r2,-12(fp)
   4058c:	18800c26 	beq	r3,r2,405c0 <alt_load_section+0x54>
  {
    while( to != end )
   40590:	00000806 	br	405b4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   40594:	e0bffe17 	ldw	r2,-8(fp)
   40598:	10c00104 	addi	r3,r2,4
   4059c:	e0fffe15 	stw	r3,-8(fp)
   405a0:	e0fffd17 	ldw	r3,-12(fp)
   405a4:	19000104 	addi	r4,r3,4
   405a8:	e13ffd15 	stw	r4,-12(fp)
   405ac:	18c00017 	ldw	r3,0(r3)
   405b0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   405b4:	e0fffe17 	ldw	r3,-8(fp)
   405b8:	e0bfff17 	ldw	r2,-4(fp)
   405bc:	18bff51e 	bne	r3,r2,40594 <__alt_data_end+0xffff0594>
    {
      *to++ = *from++;
    }
  }
}
   405c0:	0001883a 	nop
   405c4:	e037883a 	mov	sp,fp
   405c8:	df000017 	ldw	fp,0(sp)
   405cc:	dec00104 	addi	sp,sp,4
   405d0:	f800283a 	ret

000405d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   405d4:	defffe04 	addi	sp,sp,-8
   405d8:	dfc00115 	stw	ra,4(sp)
   405dc:	df000015 	stw	fp,0(sp)
   405e0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   405e4:	01800134 	movhi	r6,4
   405e8:	3190e504 	addi	r6,r6,17300
   405ec:	01400134 	movhi	r5,4
   405f0:	294b3104 	addi	r5,r5,11460
   405f4:	01000134 	movhi	r4,4
   405f8:	2110e504 	addi	r4,r4,17300
   405fc:	004056c0 	call	4056c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   40600:	01800134 	movhi	r6,4
   40604:	31808c04 	addi	r6,r6,560
   40608:	01400134 	movhi	r5,4
   4060c:	29400804 	addi	r5,r5,32
   40610:	01000134 	movhi	r4,4
   40614:	21000804 	addi	r4,r4,32
   40618:	004056c0 	call	4056c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4061c:	01800134 	movhi	r6,4
   40620:	318b3104 	addi	r6,r6,11460
   40624:	01400134 	movhi	r5,4
   40628:	294b2204 	addi	r5,r5,11400
   4062c:	01000134 	movhi	r4,4
   40630:	210b2204 	addi	r4,r4,11400
   40634:	004056c0 	call	4056c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   40638:	00418c00 	call	418c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4063c:	0041b2c0 	call	41b2c <alt_icache_flush_all>
}
   40640:	0001883a 	nop
   40644:	e037883a 	mov	sp,fp
   40648:	dfc00117 	ldw	ra,4(sp)
   4064c:	df000017 	ldw	fp,0(sp)
   40650:	dec00204 	addi	sp,sp,8
   40654:	f800283a 	ret

00040658 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   40658:	defffd04 	addi	sp,sp,-12
   4065c:	dfc00215 	stw	ra,8(sp)
   40660:	df000115 	stw	fp,4(sp)
   40664:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   40668:	0009883a 	mov	r4,zero
   4066c:	00407080 	call	40708 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   40670:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   40674:	00407400 	call	40740 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   40678:	01800134 	movhi	r6,4
   4067c:	318b2204 	addi	r6,r6,11400
   40680:	01400134 	movhi	r5,4
   40684:	294b2204 	addi	r5,r5,11400
   40688:	01000134 	movhi	r4,4
   4068c:	210b2204 	addi	r4,r4,11400
   40690:	0041ed00 	call	41ed0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   40694:	00419ec0 	call	419ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   40698:	01000134 	movhi	r4,4
   4069c:	21069304 	addi	r4,r4,6732
   406a0:	00427140 	call	42714 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   406a4:	d0a5d417 	ldw	r2,-26800(gp)
   406a8:	d0e5d517 	ldw	r3,-26796(gp)
   406ac:	d125d617 	ldw	r4,-26792(gp)
   406b0:	200d883a 	mov	r6,r4
   406b4:	180b883a 	mov	r5,r3
   406b8:	1009883a 	mov	r4,r2
   406bc:	004026c0 	call	4026c <main>
   406c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   406c4:	01000044 	movi	r4,1
   406c8:	00417e80 	call	417e8 <close>
  exit (result);
   406cc:	e13fff17 	ldw	r4,-4(fp)
   406d0:	00427280 	call	42728 <exit>

000406d4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   406d4:	defffd04 	addi	sp,sp,-12
   406d8:	dfc00215 	stw	ra,8(sp)
   406dc:	df000115 	stw	fp,4(sp)
   406e0:	df000104 	addi	fp,sp,4
   406e4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   406e8:	d1601604 	addi	r5,gp,-32680
   406ec:	e13fff17 	ldw	r4,-4(fp)
   406f0:	00419480 	call	41948 <alt_dev_llist_insert>
}
   406f4:	e037883a 	mov	sp,fp
   406f8:	dfc00117 	ldw	ra,4(sp)
   406fc:	df000017 	ldw	fp,0(sp)
   40700:	dec00204 	addi	sp,sp,8
   40704:	f800283a 	ret

00040708 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   40708:	defffd04 	addi	sp,sp,-12
   4070c:	dfc00215 	stw	ra,8(sp)
   40710:	df000115 	stw	fp,4(sp)
   40714:	df000104 	addi	fp,sp,4
   40718:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( PROCESSADOR, Processador);
   4071c:	00423f80 	call	423f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   40720:	00800044 	movi	r2,1
   40724:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   40728:	0001883a 	nop
   4072c:	e037883a 	mov	sp,fp
   40730:	dfc00117 	ldw	ra,4(sp)
   40734:	df000017 	ldw	fp,0(sp)
   40738:	dec00204 	addi	sp,sp,8
   4073c:	f800283a 	ret

00040740 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   40740:	defffe04 	addi	sp,sp,-8
   40744:	dfc00115 	stw	ra,4(sp)
   40748:	df000015 	stw	fp,0(sp)
   4074c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   40750:	01800204 	movi	r6,8
   40754:	000b883a 	mov	r5,zero
   40758:	01000134 	movhi	r4,4
   4075c:	210b3b04 	addi	r4,r4,11500
   40760:	00408f80 	call	408f8 <altera_avalon_jtag_uart_init>
   40764:	01000134 	movhi	r4,4
   40768:	210b3104 	addi	r4,r4,11460
   4076c:	00406d40 	call	406d4 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   40770:	01000134 	movhi	r4,4
   40774:	210f4904 	addi	r4,r4,15652
   40778:	0041aac0 	call	41aac <alt_fs_reg>
}
   4077c:	0001883a 	nop
   40780:	e037883a 	mov	sp,fp
   40784:	dfc00117 	ldw	ra,4(sp)
   40788:	df000017 	ldw	fp,0(sp)
   4078c:	dec00204 	addi	sp,sp,8
   40790:	f800283a 	ret

00040794 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   40794:	defffa04 	addi	sp,sp,-24
   40798:	dfc00515 	stw	ra,20(sp)
   4079c:	df000415 	stw	fp,16(sp)
   407a0:	df000404 	addi	fp,sp,16
   407a4:	e13ffd15 	stw	r4,-12(fp)
   407a8:	e17ffe15 	stw	r5,-8(fp)
   407ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   407b0:	e0bffd17 	ldw	r2,-12(fp)
   407b4:	10800017 	ldw	r2,0(r2)
   407b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   407bc:	e0bffc17 	ldw	r2,-16(fp)
   407c0:	10c00a04 	addi	r3,r2,40
   407c4:	e0bffd17 	ldw	r2,-12(fp)
   407c8:	10800217 	ldw	r2,8(r2)
   407cc:	100f883a 	mov	r7,r2
   407d0:	e1bfff17 	ldw	r6,-4(fp)
   407d4:	e17ffe17 	ldw	r5,-8(fp)
   407d8:	1809883a 	mov	r4,r3
   407dc:	0040dbc0 	call	40dbc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   407e0:	e037883a 	mov	sp,fp
   407e4:	dfc00117 	ldw	ra,4(sp)
   407e8:	df000017 	ldw	fp,0(sp)
   407ec:	dec00204 	addi	sp,sp,8
   407f0:	f800283a 	ret

000407f4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   407f4:	defffa04 	addi	sp,sp,-24
   407f8:	dfc00515 	stw	ra,20(sp)
   407fc:	df000415 	stw	fp,16(sp)
   40800:	df000404 	addi	fp,sp,16
   40804:	e13ffd15 	stw	r4,-12(fp)
   40808:	e17ffe15 	stw	r5,-8(fp)
   4080c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   40810:	e0bffd17 	ldw	r2,-12(fp)
   40814:	10800017 	ldw	r2,0(r2)
   40818:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4081c:	e0bffc17 	ldw	r2,-16(fp)
   40820:	10c00a04 	addi	r3,r2,40
   40824:	e0bffd17 	ldw	r2,-12(fp)
   40828:	10800217 	ldw	r2,8(r2)
   4082c:	100f883a 	mov	r7,r2
   40830:	e1bfff17 	ldw	r6,-4(fp)
   40834:	e17ffe17 	ldw	r5,-8(fp)
   40838:	1809883a 	mov	r4,r3
   4083c:	0040fd80 	call	40fd8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   40840:	e037883a 	mov	sp,fp
   40844:	dfc00117 	ldw	ra,4(sp)
   40848:	df000017 	ldw	fp,0(sp)
   4084c:	dec00204 	addi	sp,sp,8
   40850:	f800283a 	ret

00040854 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   40854:	defffc04 	addi	sp,sp,-16
   40858:	dfc00315 	stw	ra,12(sp)
   4085c:	df000215 	stw	fp,8(sp)
   40860:	df000204 	addi	fp,sp,8
   40864:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   40868:	e0bfff17 	ldw	r2,-4(fp)
   4086c:	10800017 	ldw	r2,0(r2)
   40870:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   40874:	e0bffe17 	ldw	r2,-8(fp)
   40878:	10c00a04 	addi	r3,r2,40
   4087c:	e0bfff17 	ldw	r2,-4(fp)
   40880:	10800217 	ldw	r2,8(r2)
   40884:	100b883a 	mov	r5,r2
   40888:	1809883a 	mov	r4,r3
   4088c:	0040c640 	call	40c64 <altera_avalon_jtag_uart_close>
}
   40890:	e037883a 	mov	sp,fp
   40894:	dfc00117 	ldw	ra,4(sp)
   40898:	df000017 	ldw	fp,0(sp)
   4089c:	dec00204 	addi	sp,sp,8
   408a0:	f800283a 	ret

000408a4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   408a4:	defffa04 	addi	sp,sp,-24
   408a8:	dfc00515 	stw	ra,20(sp)
   408ac:	df000415 	stw	fp,16(sp)
   408b0:	df000404 	addi	fp,sp,16
   408b4:	e13ffd15 	stw	r4,-12(fp)
   408b8:	e17ffe15 	stw	r5,-8(fp)
   408bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   408c0:	e0bffd17 	ldw	r2,-12(fp)
   408c4:	10800017 	ldw	r2,0(r2)
   408c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   408cc:	e0bffc17 	ldw	r2,-16(fp)
   408d0:	10800a04 	addi	r2,r2,40
   408d4:	e1bfff17 	ldw	r6,-4(fp)
   408d8:	e17ffe17 	ldw	r5,-8(fp)
   408dc:	1009883a 	mov	r4,r2
   408e0:	0040ccc0 	call	40ccc <altera_avalon_jtag_uart_ioctl>
}
   408e4:	e037883a 	mov	sp,fp
   408e8:	dfc00117 	ldw	ra,4(sp)
   408ec:	df000017 	ldw	fp,0(sp)
   408f0:	dec00204 	addi	sp,sp,8
   408f4:	f800283a 	ret

000408f8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   408f8:	defffa04 	addi	sp,sp,-24
   408fc:	dfc00515 	stw	ra,20(sp)
   40900:	df000415 	stw	fp,16(sp)
   40904:	df000404 	addi	fp,sp,16
   40908:	e13ffd15 	stw	r4,-12(fp)
   4090c:	e17ffe15 	stw	r5,-8(fp)
   40910:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   40914:	e0bffd17 	ldw	r2,-12(fp)
   40918:	00c00044 	movi	r3,1
   4091c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   40920:	e0bffd17 	ldw	r2,-12(fp)
   40924:	10800017 	ldw	r2,0(r2)
   40928:	10800104 	addi	r2,r2,4
   4092c:	1007883a 	mov	r3,r2
   40930:	e0bffd17 	ldw	r2,-12(fp)
   40934:	10800817 	ldw	r2,32(r2)
   40938:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4093c:	e0bffe17 	ldw	r2,-8(fp)
   40940:	e0ffff17 	ldw	r3,-4(fp)
   40944:	d8000015 	stw	zero,0(sp)
   40948:	e1fffd17 	ldw	r7,-12(fp)
   4094c:	01800134 	movhi	r6,4
   40950:	31826e04 	addi	r6,r6,2488
   40954:	180b883a 	mov	r5,r3
   40958:	1009883a 	mov	r4,r2
   4095c:	0041b4c0 	call	41b4c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   40960:	e0bffd17 	ldw	r2,-12(fp)
   40964:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   40968:	e0bffd17 	ldw	r2,-12(fp)
   4096c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   40970:	d0e5d817 	ldw	r3,-26784(gp)
   40974:	e1fffd17 	ldw	r7,-12(fp)
   40978:	01800134 	movhi	r6,4
   4097c:	3182f104 	addi	r6,r6,3012
   40980:	180b883a 	mov	r5,r3
   40984:	1009883a 	mov	r4,r2
   40988:	00416800 	call	41680 <alt_alarm_start>
   4098c:	1000040e 	bge	r2,zero,409a0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   40990:	e0fffd17 	ldw	r3,-12(fp)
   40994:	00a00034 	movhi	r2,32768
   40998:	10bfffc4 	addi	r2,r2,-1
   4099c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   409a0:	0001883a 	nop
   409a4:	e037883a 	mov	sp,fp
   409a8:	dfc00117 	ldw	ra,4(sp)
   409ac:	df000017 	ldw	fp,0(sp)
   409b0:	dec00204 	addi	sp,sp,8
   409b4:	f800283a 	ret

000409b8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   409b8:	defff804 	addi	sp,sp,-32
   409bc:	df000715 	stw	fp,28(sp)
   409c0:	df000704 	addi	fp,sp,28
   409c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   409c8:	e0bfff17 	ldw	r2,-4(fp)
   409cc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   409d0:	e0bffb17 	ldw	r2,-20(fp)
   409d4:	10800017 	ldw	r2,0(r2)
   409d8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   409dc:	e0bffc17 	ldw	r2,-16(fp)
   409e0:	10800104 	addi	r2,r2,4
   409e4:	10800037 	ldwio	r2,0(r2)
   409e8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   409ec:	e0bffd17 	ldw	r2,-12(fp)
   409f0:	1080c00c 	andi	r2,r2,768
   409f4:	10006d26 	beq	r2,zero,40bac <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   409f8:	e0bffd17 	ldw	r2,-12(fp)
   409fc:	1080400c 	andi	r2,r2,256
   40a00:	10003526 	beq	r2,zero,40ad8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   40a04:	00800074 	movhi	r2,1
   40a08:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40a0c:	e0bffb17 	ldw	r2,-20(fp)
   40a10:	10800a17 	ldw	r2,40(r2)
   40a14:	10800044 	addi	r2,r2,1
   40a18:	1081ffcc 	andi	r2,r2,2047
   40a1c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   40a20:	e0bffb17 	ldw	r2,-20(fp)
   40a24:	10c00b17 	ldw	r3,44(r2)
   40a28:	e0bffe17 	ldw	r2,-8(fp)
   40a2c:	18801526 	beq	r3,r2,40a84 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   40a30:	e0bffc17 	ldw	r2,-16(fp)
   40a34:	10800037 	ldwio	r2,0(r2)
   40a38:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   40a3c:	e0bff917 	ldw	r2,-28(fp)
   40a40:	10a0000c 	andi	r2,r2,32768
   40a44:	10001126 	beq	r2,zero,40a8c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   40a48:	e0bffb17 	ldw	r2,-20(fp)
   40a4c:	10800a17 	ldw	r2,40(r2)
   40a50:	e0fff917 	ldw	r3,-28(fp)
   40a54:	1809883a 	mov	r4,r3
   40a58:	e0fffb17 	ldw	r3,-20(fp)
   40a5c:	1885883a 	add	r2,r3,r2
   40a60:	10800e04 	addi	r2,r2,56
   40a64:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40a68:	e0bffb17 	ldw	r2,-20(fp)
   40a6c:	10800a17 	ldw	r2,40(r2)
   40a70:	10800044 	addi	r2,r2,1
   40a74:	10c1ffcc 	andi	r3,r2,2047
   40a78:	e0bffb17 	ldw	r2,-20(fp)
   40a7c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   40a80:	003fe206 	br	40a0c <__alt_data_end+0xffff0a0c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   40a84:	0001883a 	nop
   40a88:	00000106 	br	40a90 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   40a8c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   40a90:	e0bff917 	ldw	r2,-28(fp)
   40a94:	10bfffec 	andhi	r2,r2,65535
   40a98:	10000f26 	beq	r2,zero,40ad8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   40a9c:	e0bffb17 	ldw	r2,-20(fp)
   40aa0:	10c00817 	ldw	r3,32(r2)
   40aa4:	00bfff84 	movi	r2,-2
   40aa8:	1886703a 	and	r3,r3,r2
   40aac:	e0bffb17 	ldw	r2,-20(fp)
   40ab0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   40ab4:	e0bffc17 	ldw	r2,-16(fp)
   40ab8:	10800104 	addi	r2,r2,4
   40abc:	1007883a 	mov	r3,r2
   40ac0:	e0bffb17 	ldw	r2,-20(fp)
   40ac4:	10800817 	ldw	r2,32(r2)
   40ac8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   40acc:	e0bffc17 	ldw	r2,-16(fp)
   40ad0:	10800104 	addi	r2,r2,4
   40ad4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   40ad8:	e0bffd17 	ldw	r2,-12(fp)
   40adc:	1080800c 	andi	r2,r2,512
   40ae0:	103fbe26 	beq	r2,zero,409dc <__alt_data_end+0xffff09dc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   40ae4:	e0bffd17 	ldw	r2,-12(fp)
   40ae8:	1004d43a 	srli	r2,r2,16
   40aec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   40af0:	00001406 	br	40b44 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   40af4:	e0bffc17 	ldw	r2,-16(fp)
   40af8:	e0fffb17 	ldw	r3,-20(fp)
   40afc:	18c00d17 	ldw	r3,52(r3)
   40b00:	e13ffb17 	ldw	r4,-20(fp)
   40b04:	20c7883a 	add	r3,r4,r3
   40b08:	18c20e04 	addi	r3,r3,2104
   40b0c:	18c00003 	ldbu	r3,0(r3)
   40b10:	18c03fcc 	andi	r3,r3,255
   40b14:	18c0201c 	xori	r3,r3,128
   40b18:	18ffe004 	addi	r3,r3,-128
   40b1c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40b20:	e0bffb17 	ldw	r2,-20(fp)
   40b24:	10800d17 	ldw	r2,52(r2)
   40b28:	10800044 	addi	r2,r2,1
   40b2c:	10c1ffcc 	andi	r3,r2,2047
   40b30:	e0bffb17 	ldw	r2,-20(fp)
   40b34:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   40b38:	e0bffa17 	ldw	r2,-24(fp)
   40b3c:	10bfffc4 	addi	r2,r2,-1
   40b40:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   40b44:	e0bffa17 	ldw	r2,-24(fp)
   40b48:	10000526 	beq	r2,zero,40b60 <altera_avalon_jtag_uart_irq+0x1a8>
   40b4c:	e0bffb17 	ldw	r2,-20(fp)
   40b50:	10c00d17 	ldw	r3,52(r2)
   40b54:	e0bffb17 	ldw	r2,-20(fp)
   40b58:	10800c17 	ldw	r2,48(r2)
   40b5c:	18bfe51e 	bne	r3,r2,40af4 <__alt_data_end+0xffff0af4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   40b60:	e0bffa17 	ldw	r2,-24(fp)
   40b64:	103f9d26 	beq	r2,zero,409dc <__alt_data_end+0xffff09dc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   40b68:	e0bffb17 	ldw	r2,-20(fp)
   40b6c:	10c00817 	ldw	r3,32(r2)
   40b70:	00bfff44 	movi	r2,-3
   40b74:	1886703a 	and	r3,r3,r2
   40b78:	e0bffb17 	ldw	r2,-20(fp)
   40b7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   40b80:	e0bffb17 	ldw	r2,-20(fp)
   40b84:	10800017 	ldw	r2,0(r2)
   40b88:	10800104 	addi	r2,r2,4
   40b8c:	1007883a 	mov	r3,r2
   40b90:	e0bffb17 	ldw	r2,-20(fp)
   40b94:	10800817 	ldw	r2,32(r2)
   40b98:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   40b9c:	e0bffc17 	ldw	r2,-16(fp)
   40ba0:	10800104 	addi	r2,r2,4
   40ba4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   40ba8:	003f8c06 	br	409dc <__alt_data_end+0xffff09dc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   40bac:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   40bb0:	0001883a 	nop
   40bb4:	e037883a 	mov	sp,fp
   40bb8:	df000017 	ldw	fp,0(sp)
   40bbc:	dec00104 	addi	sp,sp,4
   40bc0:	f800283a 	ret

00040bc4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   40bc4:	defff804 	addi	sp,sp,-32
   40bc8:	df000715 	stw	fp,28(sp)
   40bcc:	df000704 	addi	fp,sp,28
   40bd0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   40bd4:	e0bffb17 	ldw	r2,-20(fp)
   40bd8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   40bdc:	e0bff917 	ldw	r2,-28(fp)
   40be0:	10800017 	ldw	r2,0(r2)
   40be4:	10800104 	addi	r2,r2,4
   40be8:	10800037 	ldwio	r2,0(r2)
   40bec:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   40bf0:	e0bffa17 	ldw	r2,-24(fp)
   40bf4:	1081000c 	andi	r2,r2,1024
   40bf8:	10000b26 	beq	r2,zero,40c28 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   40bfc:	e0bff917 	ldw	r2,-28(fp)
   40c00:	10800017 	ldw	r2,0(r2)
   40c04:	10800104 	addi	r2,r2,4
   40c08:	1007883a 	mov	r3,r2
   40c0c:	e0bff917 	ldw	r2,-28(fp)
   40c10:	10800817 	ldw	r2,32(r2)
   40c14:	10810014 	ori	r2,r2,1024
   40c18:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   40c1c:	e0bff917 	ldw	r2,-28(fp)
   40c20:	10000915 	stw	zero,36(r2)
   40c24:	00000a06 	br	40c50 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   40c28:	e0bff917 	ldw	r2,-28(fp)
   40c2c:	10c00917 	ldw	r3,36(r2)
   40c30:	00a00034 	movhi	r2,32768
   40c34:	10bfff04 	addi	r2,r2,-4
   40c38:	10c00536 	bltu	r2,r3,40c50 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   40c3c:	e0bff917 	ldw	r2,-28(fp)
   40c40:	10800917 	ldw	r2,36(r2)
   40c44:	10c00044 	addi	r3,r2,1
   40c48:	e0bff917 	ldw	r2,-28(fp)
   40c4c:	10c00915 	stw	r3,36(r2)
   40c50:	d0a5d817 	ldw	r2,-26784(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   40c54:	e037883a 	mov	sp,fp
   40c58:	df000017 	ldw	fp,0(sp)
   40c5c:	dec00104 	addi	sp,sp,4
   40c60:	f800283a 	ret

00040c64 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   40c64:	defffd04 	addi	sp,sp,-12
   40c68:	df000215 	stw	fp,8(sp)
   40c6c:	df000204 	addi	fp,sp,8
   40c70:	e13ffe15 	stw	r4,-8(fp)
   40c74:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   40c78:	00000506 	br	40c90 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   40c7c:	e0bfff17 	ldw	r2,-4(fp)
   40c80:	1090000c 	andi	r2,r2,16384
   40c84:	10000226 	beq	r2,zero,40c90 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   40c88:	00bffd44 	movi	r2,-11
   40c8c:	00000b06 	br	40cbc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   40c90:	e0bffe17 	ldw	r2,-8(fp)
   40c94:	10c00d17 	ldw	r3,52(r2)
   40c98:	e0bffe17 	ldw	r2,-8(fp)
   40c9c:	10800c17 	ldw	r2,48(r2)
   40ca0:	18800526 	beq	r3,r2,40cb8 <altera_avalon_jtag_uart_close+0x54>
   40ca4:	e0bffe17 	ldw	r2,-8(fp)
   40ca8:	10c00917 	ldw	r3,36(r2)
   40cac:	e0bffe17 	ldw	r2,-8(fp)
   40cb0:	10800117 	ldw	r2,4(r2)
   40cb4:	18bff136 	bltu	r3,r2,40c7c <__alt_data_end+0xffff0c7c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   40cb8:	0005883a 	mov	r2,zero
}
   40cbc:	e037883a 	mov	sp,fp
   40cc0:	df000017 	ldw	fp,0(sp)
   40cc4:	dec00104 	addi	sp,sp,4
   40cc8:	f800283a 	ret

00040ccc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   40ccc:	defffa04 	addi	sp,sp,-24
   40cd0:	df000515 	stw	fp,20(sp)
   40cd4:	df000504 	addi	fp,sp,20
   40cd8:	e13ffd15 	stw	r4,-12(fp)
   40cdc:	e17ffe15 	stw	r5,-8(fp)
   40ce0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   40ce4:	00bff9c4 	movi	r2,-25
   40ce8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   40cec:	e0bffe17 	ldw	r2,-8(fp)
   40cf0:	10da8060 	cmpeqi	r3,r2,27137
   40cf4:	1800031e 	bne	r3,zero,40d04 <altera_avalon_jtag_uart_ioctl+0x38>
   40cf8:	109a80a0 	cmpeqi	r2,r2,27138
   40cfc:	1000181e 	bne	r2,zero,40d60 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   40d00:	00002906 	br	40da8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   40d04:	e0bffd17 	ldw	r2,-12(fp)
   40d08:	10c00117 	ldw	r3,4(r2)
   40d0c:	00a00034 	movhi	r2,32768
   40d10:	10bfffc4 	addi	r2,r2,-1
   40d14:	18802126 	beq	r3,r2,40d9c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   40d18:	e0bfff17 	ldw	r2,-4(fp)
   40d1c:	10800017 	ldw	r2,0(r2)
   40d20:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   40d24:	e0bffc17 	ldw	r2,-16(fp)
   40d28:	10800090 	cmplti	r2,r2,2
   40d2c:	1000061e 	bne	r2,zero,40d48 <altera_avalon_jtag_uart_ioctl+0x7c>
   40d30:	e0fffc17 	ldw	r3,-16(fp)
   40d34:	00a00034 	movhi	r2,32768
   40d38:	10bfffc4 	addi	r2,r2,-1
   40d3c:	18800226 	beq	r3,r2,40d48 <altera_avalon_jtag_uart_ioctl+0x7c>
   40d40:	e0bffc17 	ldw	r2,-16(fp)
   40d44:	00000206 	br	40d50 <altera_avalon_jtag_uart_ioctl+0x84>
   40d48:	00a00034 	movhi	r2,32768
   40d4c:	10bfff84 	addi	r2,r2,-2
   40d50:	e0fffd17 	ldw	r3,-12(fp)
   40d54:	18800115 	stw	r2,4(r3)
      rc = 0;
   40d58:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   40d5c:	00000f06 	br	40d9c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   40d60:	e0bffd17 	ldw	r2,-12(fp)
   40d64:	10c00117 	ldw	r3,4(r2)
   40d68:	00a00034 	movhi	r2,32768
   40d6c:	10bfffc4 	addi	r2,r2,-1
   40d70:	18800c26 	beq	r3,r2,40da4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   40d74:	e0bffd17 	ldw	r2,-12(fp)
   40d78:	10c00917 	ldw	r3,36(r2)
   40d7c:	e0bffd17 	ldw	r2,-12(fp)
   40d80:	10800117 	ldw	r2,4(r2)
   40d84:	1885803a 	cmpltu	r2,r3,r2
   40d88:	10c03fcc 	andi	r3,r2,255
   40d8c:	e0bfff17 	ldw	r2,-4(fp)
   40d90:	10c00015 	stw	r3,0(r2)
      rc = 0;
   40d94:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   40d98:	00000206 	br	40da4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   40d9c:	0001883a 	nop
   40da0:	00000106 	br	40da8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   40da4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   40da8:	e0bffb17 	ldw	r2,-20(fp)
}
   40dac:	e037883a 	mov	sp,fp
   40db0:	df000017 	ldw	fp,0(sp)
   40db4:	dec00104 	addi	sp,sp,4
   40db8:	f800283a 	ret

00040dbc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   40dbc:	defff304 	addi	sp,sp,-52
   40dc0:	dfc00c15 	stw	ra,48(sp)
   40dc4:	df000b15 	stw	fp,44(sp)
   40dc8:	df000b04 	addi	fp,sp,44
   40dcc:	e13ffc15 	stw	r4,-16(fp)
   40dd0:	e17ffd15 	stw	r5,-12(fp)
   40dd4:	e1bffe15 	stw	r6,-8(fp)
   40dd8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   40ddc:	e0bffd17 	ldw	r2,-12(fp)
   40de0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   40de4:	00004706 	br	40f04 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   40de8:	e0bffc17 	ldw	r2,-16(fp)
   40dec:	10800a17 	ldw	r2,40(r2)
   40df0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   40df4:	e0bffc17 	ldw	r2,-16(fp)
   40df8:	10800b17 	ldw	r2,44(r2)
   40dfc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   40e00:	e0fff717 	ldw	r3,-36(fp)
   40e04:	e0bff817 	ldw	r2,-32(fp)
   40e08:	18800536 	bltu	r3,r2,40e20 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   40e0c:	e0fff717 	ldw	r3,-36(fp)
   40e10:	e0bff817 	ldw	r2,-32(fp)
   40e14:	1885c83a 	sub	r2,r3,r2
   40e18:	e0bff615 	stw	r2,-40(fp)
   40e1c:	00000406 	br	40e30 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   40e20:	00c20004 	movi	r3,2048
   40e24:	e0bff817 	ldw	r2,-32(fp)
   40e28:	1885c83a 	sub	r2,r3,r2
   40e2c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   40e30:	e0bff617 	ldw	r2,-40(fp)
   40e34:	10001e26 	beq	r2,zero,40eb0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   40e38:	e0fffe17 	ldw	r3,-8(fp)
   40e3c:	e0bff617 	ldw	r2,-40(fp)
   40e40:	1880022e 	bgeu	r3,r2,40e4c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   40e44:	e0bffe17 	ldw	r2,-8(fp)
   40e48:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   40e4c:	e0bffc17 	ldw	r2,-16(fp)
   40e50:	10c00e04 	addi	r3,r2,56
   40e54:	e0bff817 	ldw	r2,-32(fp)
   40e58:	1885883a 	add	r2,r3,r2
   40e5c:	e1bff617 	ldw	r6,-40(fp)
   40e60:	100b883a 	mov	r5,r2
   40e64:	e13ff517 	ldw	r4,-44(fp)
   40e68:	00427dc0 	call	427dc <memcpy>
      ptr   += n;
   40e6c:	e0fff517 	ldw	r3,-44(fp)
   40e70:	e0bff617 	ldw	r2,-40(fp)
   40e74:	1885883a 	add	r2,r3,r2
   40e78:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   40e7c:	e0fffe17 	ldw	r3,-8(fp)
   40e80:	e0bff617 	ldw	r2,-40(fp)
   40e84:	1885c83a 	sub	r2,r3,r2
   40e88:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40e8c:	e0fff817 	ldw	r3,-32(fp)
   40e90:	e0bff617 	ldw	r2,-40(fp)
   40e94:	1885883a 	add	r2,r3,r2
   40e98:	10c1ffcc 	andi	r3,r2,2047
   40e9c:	e0bffc17 	ldw	r2,-16(fp)
   40ea0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   40ea4:	e0bffe17 	ldw	r2,-8(fp)
   40ea8:	00bfcf16 	blt	zero,r2,40de8 <__alt_data_end+0xffff0de8>
   40eac:	00000106 	br	40eb4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   40eb0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   40eb4:	e0fff517 	ldw	r3,-44(fp)
   40eb8:	e0bffd17 	ldw	r2,-12(fp)
   40ebc:	1880141e 	bne	r3,r2,40f10 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   40ec0:	e0bfff17 	ldw	r2,-4(fp)
   40ec4:	1090000c 	andi	r2,r2,16384
   40ec8:	1000131e 	bne	r2,zero,40f18 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   40ecc:	0001883a 	nop
   40ed0:	e0bffc17 	ldw	r2,-16(fp)
   40ed4:	10c00a17 	ldw	r3,40(r2)
   40ed8:	e0bff717 	ldw	r2,-36(fp)
   40edc:	1880051e 	bne	r3,r2,40ef4 <altera_avalon_jtag_uart_read+0x138>
   40ee0:	e0bffc17 	ldw	r2,-16(fp)
   40ee4:	10c00917 	ldw	r3,36(r2)
   40ee8:	e0bffc17 	ldw	r2,-16(fp)
   40eec:	10800117 	ldw	r2,4(r2)
   40ef0:	18bff736 	bltu	r3,r2,40ed0 <__alt_data_end+0xffff0ed0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   40ef4:	e0bffc17 	ldw	r2,-16(fp)
   40ef8:	10c00a17 	ldw	r3,40(r2)
   40efc:	e0bff717 	ldw	r2,-36(fp)
   40f00:	18800726 	beq	r3,r2,40f20 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   40f04:	e0bffe17 	ldw	r2,-8(fp)
   40f08:	00bfb716 	blt	zero,r2,40de8 <__alt_data_end+0xffff0de8>
   40f0c:	00000506 	br	40f24 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   40f10:	0001883a 	nop
   40f14:	00000306 	br	40f24 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   40f18:	0001883a 	nop
   40f1c:	00000106 	br	40f24 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   40f20:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   40f24:	e0fff517 	ldw	r3,-44(fp)
   40f28:	e0bffd17 	ldw	r2,-12(fp)
   40f2c:	18801826 	beq	r3,r2,40f90 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   40f30:	0005303a 	rdctl	r2,status
   40f34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   40f38:	e0fffb17 	ldw	r3,-20(fp)
   40f3c:	00bfff84 	movi	r2,-2
   40f40:	1884703a 	and	r2,r3,r2
   40f44:	1001703a 	wrctl	status,r2
  
  return context;
   40f48:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   40f4c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   40f50:	e0bffc17 	ldw	r2,-16(fp)
   40f54:	10800817 	ldw	r2,32(r2)
   40f58:	10c00054 	ori	r3,r2,1
   40f5c:	e0bffc17 	ldw	r2,-16(fp)
   40f60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   40f64:	e0bffc17 	ldw	r2,-16(fp)
   40f68:	10800017 	ldw	r2,0(r2)
   40f6c:	10800104 	addi	r2,r2,4
   40f70:	1007883a 	mov	r3,r2
   40f74:	e0bffc17 	ldw	r2,-16(fp)
   40f78:	10800817 	ldw	r2,32(r2)
   40f7c:	18800035 	stwio	r2,0(r3)
   40f80:	e0bffa17 	ldw	r2,-24(fp)
   40f84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   40f88:	e0bff917 	ldw	r2,-28(fp)
   40f8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   40f90:	e0fff517 	ldw	r3,-44(fp)
   40f94:	e0bffd17 	ldw	r2,-12(fp)
   40f98:	18800426 	beq	r3,r2,40fac <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   40f9c:	e0fff517 	ldw	r3,-44(fp)
   40fa0:	e0bffd17 	ldw	r2,-12(fp)
   40fa4:	1885c83a 	sub	r2,r3,r2
   40fa8:	00000606 	br	40fc4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   40fac:	e0bfff17 	ldw	r2,-4(fp)
   40fb0:	1090000c 	andi	r2,r2,16384
   40fb4:	10000226 	beq	r2,zero,40fc0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   40fb8:	00bffd44 	movi	r2,-11
   40fbc:	00000106 	br	40fc4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   40fc0:	00bffec4 	movi	r2,-5
}
   40fc4:	e037883a 	mov	sp,fp
   40fc8:	dfc00117 	ldw	ra,4(sp)
   40fcc:	df000017 	ldw	fp,0(sp)
   40fd0:	dec00204 	addi	sp,sp,8
   40fd4:	f800283a 	ret

00040fd8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   40fd8:	defff304 	addi	sp,sp,-52
   40fdc:	dfc00c15 	stw	ra,48(sp)
   40fe0:	df000b15 	stw	fp,44(sp)
   40fe4:	df000b04 	addi	fp,sp,44
   40fe8:	e13ffc15 	stw	r4,-16(fp)
   40fec:	e17ffd15 	stw	r5,-12(fp)
   40ff0:	e1bffe15 	stw	r6,-8(fp)
   40ff4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   40ff8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   40ffc:	e0bffd17 	ldw	r2,-12(fp)
   41000:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   41004:	00003706 	br	410e4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   41008:	e0bffc17 	ldw	r2,-16(fp)
   4100c:	10800c17 	ldw	r2,48(r2)
   41010:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   41014:	e0bffc17 	ldw	r2,-16(fp)
   41018:	10800d17 	ldw	r2,52(r2)
   4101c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   41020:	e0fff917 	ldw	r3,-28(fp)
   41024:	e0bff517 	ldw	r2,-44(fp)
   41028:	1880062e 	bgeu	r3,r2,41044 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4102c:	e0fff517 	ldw	r3,-44(fp)
   41030:	e0bff917 	ldw	r2,-28(fp)
   41034:	1885c83a 	sub	r2,r3,r2
   41038:	10bfffc4 	addi	r2,r2,-1
   4103c:	e0bff615 	stw	r2,-40(fp)
   41040:	00000b06 	br	41070 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   41044:	e0bff517 	ldw	r2,-44(fp)
   41048:	10000526 	beq	r2,zero,41060 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4104c:	00c20004 	movi	r3,2048
   41050:	e0bff917 	ldw	r2,-28(fp)
   41054:	1885c83a 	sub	r2,r3,r2
   41058:	e0bff615 	stw	r2,-40(fp)
   4105c:	00000406 	br	41070 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   41060:	00c1ffc4 	movi	r3,2047
   41064:	e0bff917 	ldw	r2,-28(fp)
   41068:	1885c83a 	sub	r2,r3,r2
   4106c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   41070:	e0bff617 	ldw	r2,-40(fp)
   41074:	10001e26 	beq	r2,zero,410f0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   41078:	e0fffe17 	ldw	r3,-8(fp)
   4107c:	e0bff617 	ldw	r2,-40(fp)
   41080:	1880022e 	bgeu	r3,r2,4108c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   41084:	e0bffe17 	ldw	r2,-8(fp)
   41088:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4108c:	e0bffc17 	ldw	r2,-16(fp)
   41090:	10c20e04 	addi	r3,r2,2104
   41094:	e0bff917 	ldw	r2,-28(fp)
   41098:	1885883a 	add	r2,r3,r2
   4109c:	e1bff617 	ldw	r6,-40(fp)
   410a0:	e17ffd17 	ldw	r5,-12(fp)
   410a4:	1009883a 	mov	r4,r2
   410a8:	00427dc0 	call	427dc <memcpy>
      ptr   += n;
   410ac:	e0fffd17 	ldw	r3,-12(fp)
   410b0:	e0bff617 	ldw	r2,-40(fp)
   410b4:	1885883a 	add	r2,r3,r2
   410b8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   410bc:	e0fffe17 	ldw	r3,-8(fp)
   410c0:	e0bff617 	ldw	r2,-40(fp)
   410c4:	1885c83a 	sub	r2,r3,r2
   410c8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   410cc:	e0fff917 	ldw	r3,-28(fp)
   410d0:	e0bff617 	ldw	r2,-40(fp)
   410d4:	1885883a 	add	r2,r3,r2
   410d8:	10c1ffcc 	andi	r3,r2,2047
   410dc:	e0bffc17 	ldw	r2,-16(fp)
   410e0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   410e4:	e0bffe17 	ldw	r2,-8(fp)
   410e8:	00bfc716 	blt	zero,r2,41008 <__alt_data_end+0xffff1008>
   410ec:	00000106 	br	410f4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   410f0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   410f4:	0005303a 	rdctl	r2,status
   410f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   410fc:	e0fffb17 	ldw	r3,-20(fp)
   41100:	00bfff84 	movi	r2,-2
   41104:	1884703a 	and	r2,r3,r2
   41108:	1001703a 	wrctl	status,r2
  
  return context;
   4110c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   41110:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   41114:	e0bffc17 	ldw	r2,-16(fp)
   41118:	10800817 	ldw	r2,32(r2)
   4111c:	10c00094 	ori	r3,r2,2
   41120:	e0bffc17 	ldw	r2,-16(fp)
   41124:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   41128:	e0bffc17 	ldw	r2,-16(fp)
   4112c:	10800017 	ldw	r2,0(r2)
   41130:	10800104 	addi	r2,r2,4
   41134:	1007883a 	mov	r3,r2
   41138:	e0bffc17 	ldw	r2,-16(fp)
   4113c:	10800817 	ldw	r2,32(r2)
   41140:	18800035 	stwio	r2,0(r3)
   41144:	e0bffa17 	ldw	r2,-24(fp)
   41148:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4114c:	e0bff817 	ldw	r2,-32(fp)
   41150:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   41154:	e0bffe17 	ldw	r2,-8(fp)
   41158:	0080100e 	bge	zero,r2,4119c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   4115c:	e0bfff17 	ldw	r2,-4(fp)
   41160:	1090000c 	andi	r2,r2,16384
   41164:	1000101e 	bne	r2,zero,411a8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   41168:	0001883a 	nop
   4116c:	e0bffc17 	ldw	r2,-16(fp)
   41170:	10c00d17 	ldw	r3,52(r2)
   41174:	e0bff517 	ldw	r2,-44(fp)
   41178:	1880051e 	bne	r3,r2,41190 <altera_avalon_jtag_uart_write+0x1b8>
   4117c:	e0bffc17 	ldw	r2,-16(fp)
   41180:	10c00917 	ldw	r3,36(r2)
   41184:	e0bffc17 	ldw	r2,-16(fp)
   41188:	10800117 	ldw	r2,4(r2)
   4118c:	18bff736 	bltu	r3,r2,4116c <__alt_data_end+0xffff116c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   41190:	e0bffc17 	ldw	r2,-16(fp)
   41194:	10800917 	ldw	r2,36(r2)
   41198:	1000051e 	bne	r2,zero,411b0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4119c:	e0bffe17 	ldw	r2,-8(fp)
   411a0:	00bfd016 	blt	zero,r2,410e4 <__alt_data_end+0xffff10e4>
   411a4:	00000306 	br	411b4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   411a8:	0001883a 	nop
   411ac:	00000106 	br	411b4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   411b0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   411b4:	e0fffd17 	ldw	r3,-12(fp)
   411b8:	e0bff717 	ldw	r2,-36(fp)
   411bc:	18800426 	beq	r3,r2,411d0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   411c0:	e0fffd17 	ldw	r3,-12(fp)
   411c4:	e0bff717 	ldw	r2,-36(fp)
   411c8:	1885c83a 	sub	r2,r3,r2
   411cc:	00000606 	br	411e8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   411d0:	e0bfff17 	ldw	r2,-4(fp)
   411d4:	1090000c 	andi	r2,r2,16384
   411d8:	10000226 	beq	r2,zero,411e4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   411dc:	00bffd44 	movi	r2,-11
   411e0:	00000106 	br	411e8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   411e4:	00bffec4 	movi	r2,-5
}
   411e8:	e037883a 	mov	sp,fp
   411ec:	dfc00117 	ldw	ra,4(sp)
   411f0:	df000017 	ldw	fp,0(sp)
   411f4:	dec00204 	addi	sp,sp,8
   411f8:	f800283a 	ret

000411fc <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   411fc:	defff404 	addi	sp,sp,-48
   41200:	df000b15 	stw	fp,44(sp)
   41204:	df000b04 	addi	fp,sp,44
   41208:	e13ffc15 	stw	r4,-16(fp)
   4120c:	e17ffd15 	stw	r5,-12(fp)
   41210:	e1bffe15 	stw	r6,-8(fp)
   41214:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   41218:	e0bffc17 	ldw	r2,-16(fp)
   4121c:	10800017 	ldw	r2,0(r2)
   41220:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   41224:	e0bff517 	ldw	r2,-44(fp)
   41228:	10800217 	ldw	r2,8(r2)
   4122c:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   41230:	e0bff617 	ldw	r2,-40(fp)
   41234:	10bfffc4 	addi	r2,r2,-1
   41238:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
   4123c:	e0bffb17 	ldw	r2,-20(fp)
   41240:	10800044 	addi	r2,r2,1
   41244:	e0bffb15 	stw	r2,-20(fp)
   41248:	e0bffb17 	ldw	r2,-20(fp)
   4124c:	10800003 	ldbu	r2,0(r2)
   41250:	10803fcc 	andi	r2,r2,255
   41254:	1080201c 	xori	r2,r2,128
   41258:	10bfe004 	addi	r2,r2,-128
   4125c:	103ff71e 	bne	r2,zero,4123c <__alt_data_end+0xffff123c>
    ;

  return ptr - string;
   41260:	e0fffb17 	ldw	r3,-20(fp)
   41264:	e0bff617 	ldw	r2,-40(fp)
   41268:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   4126c:	10800044 	addi	r2,r2,1
   41270:	1007883a 	mov	r3,r2
   41274:	e0bffd17 	ldw	r2,-12(fp)
   41278:	10c5883a 	add	r2,r2,r3
   4127c:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
   41280:	d0a00204 	addi	r2,gp,-32760
   41284:	1007883a 	mov	r3,r2
  r4 = (int)name;
   41288:	e0bffd17 	ldw	r2,-12(fp)
   4128c:	1009883a 	mov	r4,r2
  r5 = flags;
   41290:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
   41294:	e1bfff17 	ldw	r6,-4(fp)
   41298:	e0bffd17 	ldw	r2,-12(fp)
   4129c:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   412a0:	e0bff917 	ldw	r2,-28(fp)
   412a4:	10bfffc4 	addi	r2,r2,-1
   412a8:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   412ac:	e0bffa17 	ldw	r2,-24(fp)
   412b0:	10800044 	addi	r2,r2,1
   412b4:	e0bffa15 	stw	r2,-24(fp)
   412b8:	e0bffa17 	ldw	r2,-24(fp)
   412bc:	10800003 	ldbu	r2,0(r2)
   412c0:	10803fcc 	andi	r2,r2,255
   412c4:	1080201c 	xori	r2,r2,128
   412c8:	10bfe004 	addi	r2,r2,-128
   412cc:	103ff71e 	bne	r2,zero,412ac <__alt_data_end+0xffff12ac>
    ;

  return ptr - string;
   412d0:	e1fffa17 	ldw	r7,-24(fp)
   412d4:	e0bff917 	ldw	r2,-28(fp)
   412d8:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   412dc:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
   412e0:	003da07a 	break	1

  handle = (void *)r2;
   412e4:	e0bff715 	stw	r2,-36(fp)
  error = r3;
   412e8:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
   412ec:	e0bff817 	ldw	r2,-32(fp)
   412f0:	1000031e 	bne	r2,zero,41300 <alt_hostfs_open+0x104>
    fd->priv = handle;
   412f4:	e0bffc17 	ldw	r2,-16(fp)
   412f8:	e0fff717 	ldw	r3,-36(fp)
   412fc:	10c00115 	stw	r3,4(r2)

  return -error;
   41300:	e0bff817 	ldw	r2,-32(fp)
   41304:	0085c83a 	sub	r2,zero,r2
}
   41308:	e037883a 	mov	sp,fp
   4130c:	df000017 	ldw	fp,0(sp)
   41310:	dec00104 	addi	sp,sp,4
   41314:	f800283a 	ret

00041318 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   41318:	defffd04 	addi	sp,sp,-12
   4131c:	df000215 	stw	fp,8(sp)
   41320:	df000204 	addi	fp,sp,8
   41324:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
   41328:	d0a00504 	addi	r2,gp,-32748
   4132c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   41330:	e0bfff17 	ldw	r2,-4(fp)
   41334:	10800117 	ldw	r2,4(r2)
   41338:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
   4133c:	003da07a 	break	1

  error = r3;
   41340:	e0fffe15 	stw	r3,-8(fp)

  return -error;
   41344:	e0bffe17 	ldw	r2,-8(fp)
   41348:	0085c83a 	sub	r2,zero,r2
}
   4134c:	e037883a 	mov	sp,fp
   41350:	df000017 	ldw	fp,0(sp)
   41354:	dec00104 	addi	sp,sp,4
   41358:	f800283a 	ret

0004135c <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   4135c:	defffa04 	addi	sp,sp,-24
   41360:	df000515 	stw	fp,20(sp)
   41364:	df000504 	addi	fp,sp,20
   41368:	e13ffd15 	stw	r4,-12(fp)
   4136c:	e17ffe15 	stw	r5,-8(fp)
   41370:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
   41374:	d0a00804 	addi	r2,gp,-32736
   41378:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   4137c:	e0bffd17 	ldw	r2,-12(fp)
   41380:	10800117 	ldw	r2,4(r2)
   41384:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
   41388:	e0bffe17 	ldw	r2,-8(fp)
   4138c:	100b883a 	mov	r5,r2
  r6 = len;
   41390:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   41394:	003da07a 	break	1

  rc = r2;
   41398:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   4139c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   413a0:	e0bffc17 	ldw	r2,-16(fp)
   413a4:	10000326 	beq	r2,zero,413b4 <alt_hostfs_read+0x58>
   413a8:	e0bffc17 	ldw	r2,-16(fp)
   413ac:	0085c83a 	sub	r2,zero,r2
   413b0:	00000106 	br	413b8 <alt_hostfs_read+0x5c>
   413b4:	e0bffb17 	ldw	r2,-20(fp)
}
   413b8:	e037883a 	mov	sp,fp
   413bc:	df000017 	ldw	fp,0(sp)
   413c0:	dec00104 	addi	sp,sp,4
   413c4:	f800283a 	ret

000413c8 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   413c8:	defffa04 	addi	sp,sp,-24
   413cc:	df000515 	stw	fp,20(sp)
   413d0:	df000504 	addi	fp,sp,20
   413d4:	e13ffd15 	stw	r4,-12(fp)
   413d8:	e17ffe15 	stw	r5,-8(fp)
   413dc:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
   413e0:	d0a00b04 	addi	r2,gp,-32724
   413e4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   413e8:	e0bffd17 	ldw	r2,-12(fp)
   413ec:	10800117 	ldw	r2,4(r2)
   413f0:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
   413f4:	e0bffe17 	ldw	r2,-8(fp)
   413f8:	100b883a 	mov	r5,r2
  r6 = len;
   413fc:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   41400:	003da07a 	break	1

  rc = r2;
   41404:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   41408:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   4140c:	e0bffc17 	ldw	r2,-16(fp)
   41410:	10000326 	beq	r2,zero,41420 <alt_hostfs_write+0x58>
   41414:	e0bffc17 	ldw	r2,-16(fp)
   41418:	0085c83a 	sub	r2,zero,r2
   4141c:	00000106 	br	41424 <alt_hostfs_write+0x5c>
   41420:	e0bffb17 	ldw	r2,-20(fp)
}
   41424:	e037883a 	mov	sp,fp
   41428:	df000017 	ldw	fp,0(sp)
   4142c:	dec00104 	addi	sp,sp,4
   41430:	f800283a 	ret

00041434 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   41434:	defffa04 	addi	sp,sp,-24
   41438:	df000515 	stw	fp,20(sp)
   4143c:	df000504 	addi	fp,sp,20
   41440:	e13ffd15 	stw	r4,-12(fp)
   41444:	e17ffe15 	stw	r5,-8(fp)
   41448:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
   4144c:	d0a00e04 	addi	r2,gp,-32712
   41450:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   41454:	e0bffd17 	ldw	r2,-12(fp)
   41458:	10800117 	ldw	r2,4(r2)
   4145c:	1009883a 	mov	r4,r2
  r5 = ptr;
   41460:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
   41464:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   41468:	003da07a 	break	1

  rc = r2;
   4146c:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   41470:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   41474:	e0bffc17 	ldw	r2,-16(fp)
   41478:	10000326 	beq	r2,zero,41488 <alt_hostfs_seek+0x54>
   4147c:	e0bffc17 	ldw	r2,-16(fp)
   41480:	0085c83a 	sub	r2,zero,r2
   41484:	00000106 	br	4148c <alt_hostfs_seek+0x58>
   41488:	e0bffb17 	ldw	r2,-20(fp)
}
   4148c:	e037883a 	mov	sp,fp
   41490:	df000017 	ldw	fp,0(sp)
   41494:	dec00104 	addi	sp,sp,4
   41498:	f800283a 	ret

0004149c <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   4149c:	deffe904 	addi	sp,sp,-92
   414a0:	df001615 	stw	fp,88(sp)
   414a4:	df001604 	addi	fp,sp,88
   414a8:	e13ffe15 	stw	r4,-8(fp)
   414ac:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
   414b0:	d0a01104 	addi	r2,gp,-32700
   414b4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   414b8:	e0bffe17 	ldw	r2,-8(fp)
   414bc:	10800117 	ldw	r2,4(r2)
   414c0:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
   414c4:	e0bfee04 	addi	r2,fp,-72
   414c8:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
   414cc:	003da07a 	break	1

  rc = r2;
   414d0:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
   414d4:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
   414d8:	e0bfec17 	ldw	r2,-80(fp)
   414dc:	1000621e 	bne	r2,zero,41668 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   414e0:	e0bfee04 	addi	r2,fp,-72
   414e4:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   414e8:	e0bfea17 	ldw	r2,-88(fp)
   414ec:	10801004 	addi	r2,r2,64
   414f0:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
   414f4:	00001606 	br	41550 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   414f8:	e0bfea17 	ldw	r2,-88(fp)
   414fc:	10800017 	ldw	r2,0(r2)
   41500:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   41504:	e0bfea17 	ldw	r2,-88(fp)
   41508:	10800017 	ldw	r2,0(r2)
   4150c:	10803fec 	andhi	r2,r2,255
   41510:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   41514:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   41518:	e0bfea17 	ldw	r2,-88(fp)
   4151c:	10800017 	ldw	r2,0(r2)
   41520:	10bfc00c 	andi	r2,r2,65280
   41524:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   41528:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   4152c:	e0bfea17 	ldw	r2,-88(fp)
   41530:	10800017 	ldw	r2,0(r2)
   41534:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   41538:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   4153c:	e0bfea17 	ldw	r2,-88(fp)
   41540:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   41544:	e0bfea17 	ldw	r2,-88(fp)
   41548:	10800104 	addi	r2,r2,4
   4154c:	e0bfea15 	stw	r2,-88(fp)
   41550:	e0ffea17 	ldw	r3,-88(fp)
   41554:	e0bfed17 	ldw	r2,-76(fp)
   41558:	18bfe736 	bltu	r3,r2,414f8 <__alt_data_end+0xffff14f8>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   4155c:	e0bfff17 	ldw	r2,-4(fp)
   41560:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   41564:	e0bfea17 	ldw	r2,-88(fp)
   41568:	10800f04 	addi	r2,r2,60
   4156c:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
   41570:	00000506 	br	41588 <alt_hostfs_fstat+0xec>
      *ptr = 0;
   41574:	e0bfea17 	ldw	r2,-88(fp)
   41578:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   4157c:	e0bfea17 	ldw	r2,-88(fp)
   41580:	10800104 	addi	r2,r2,4
   41584:	e0bfea15 	stw	r2,-88(fp)
   41588:	e0ffea17 	ldw	r3,-88(fp)
   4158c:	e0bfed17 	ldw	r2,-76(fp)
   41590:	18bff836 	bltu	r3,r2,41574 <__alt_data_end+0xffff1574>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   41594:	e0bfee17 	ldw	r2,-72(fp)
   41598:	1007883a 	mov	r3,r2
   4159c:	e0bfff17 	ldw	r2,-4(fp)
   415a0:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   415a4:	e0bfef17 	ldw	r2,-68(fp)
   415a8:	1007883a 	mov	r3,r2
   415ac:	e0bfff17 	ldw	r2,-4(fp)
   415b0:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   415b4:	e0fff017 	ldw	r3,-64(fp)
   415b8:	e0bfff17 	ldw	r2,-4(fp)
   415bc:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   415c0:	e0bff117 	ldw	r2,-60(fp)
   415c4:	1007883a 	mov	r3,r2
   415c8:	e0bfff17 	ldw	r2,-4(fp)
   415cc:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   415d0:	e0bff217 	ldw	r2,-56(fp)
   415d4:	1007883a 	mov	r3,r2
   415d8:	e0bfff17 	ldw	r2,-4(fp)
   415dc:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   415e0:	e0bff317 	ldw	r2,-52(fp)
   415e4:	1007883a 	mov	r3,r2
   415e8:	e0bfff17 	ldw	r2,-4(fp)
   415ec:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   415f0:	e0bff417 	ldw	r2,-48(fp)
   415f4:	1007883a 	mov	r3,r2
   415f8:	e0bfff17 	ldw	r2,-4(fp)
   415fc:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   41600:	e0bff617 	ldw	r2,-40(fp)
   41604:	1007883a 	mov	r3,r2
   41608:	e0bfff17 	ldw	r2,-4(fp)
   4160c:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   41610:	e0bffb17 	ldw	r2,-20(fp)
   41614:	1007883a 	mov	r3,r2
   41618:	e0bfff17 	ldw	r2,-4(fp)
   4161c:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   41620:	e0bffc17 	ldw	r2,-16(fp)
   41624:	1007883a 	mov	r3,r2
   41628:	e0bfff17 	ldw	r2,-4(fp)
   4162c:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   41630:	e0bffd17 	ldw	r2,-12(fp)
   41634:	1007883a 	mov	r3,r2
   41638:	e0bfff17 	ldw	r2,-4(fp)
   4163c:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   41640:	e0bff817 	ldw	r2,-32(fp)
   41644:	1007883a 	mov	r3,r2
   41648:	e0bfff17 	ldw	r2,-4(fp)
   4164c:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   41650:	e0bffa17 	ldw	r2,-24(fp)
   41654:	1007883a 	mov	r3,r2
   41658:	e0bfff17 	ldw	r2,-4(fp)
   4165c:	10c00c15 	stw	r3,48(r2)

    return rc;
   41660:	e0bfeb17 	ldw	r2,-84(fp)
   41664:	00000206 	br	41670 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
   41668:	e0bfec17 	ldw	r2,-80(fp)
   4166c:	0085c83a 	sub	r2,zero,r2
}
   41670:	e037883a 	mov	sp,fp
   41674:	df000017 	ldw	fp,0(sp)
   41678:	dec00104 	addi	sp,sp,4
   4167c:	f800283a 	ret

00041680 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   41680:	defff504 	addi	sp,sp,-44
   41684:	df000a15 	stw	fp,40(sp)
   41688:	df000a04 	addi	fp,sp,40
   4168c:	e13ffc15 	stw	r4,-16(fp)
   41690:	e17ffd15 	stw	r5,-12(fp)
   41694:	e1bffe15 	stw	r6,-8(fp)
   41698:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4169c:	e03ff615 	stw	zero,-40(fp)
   416a0:	d0a5d817 	ldw	r2,-26784(gp)
  
  if (alt_ticks_per_second ())
   416a4:	10003c26 	beq	r2,zero,41798 <alt_alarm_start+0x118>
  {
    if (alarm)
   416a8:	e0bffc17 	ldw	r2,-16(fp)
   416ac:	10003826 	beq	r2,zero,41790 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   416b0:	e0bffc17 	ldw	r2,-16(fp)
   416b4:	e0fffe17 	ldw	r3,-8(fp)
   416b8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   416bc:	e0bffc17 	ldw	r2,-16(fp)
   416c0:	e0ffff17 	ldw	r3,-4(fp)
   416c4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   416c8:	0005303a 	rdctl	r2,status
   416cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   416d0:	e0fff917 	ldw	r3,-28(fp)
   416d4:	00bfff84 	movi	r2,-2
   416d8:	1884703a 	and	r2,r3,r2
   416dc:	1001703a 	wrctl	status,r2
  
  return context;
   416e0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   416e4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   416e8:	d0a5d917 	ldw	r2,-26780(gp)
      
      current_nticks = alt_nticks();
   416ec:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   416f0:	e0fffd17 	ldw	r3,-12(fp)
   416f4:	e0bff617 	ldw	r2,-40(fp)
   416f8:	1885883a 	add	r2,r3,r2
   416fc:	10c00044 	addi	r3,r2,1
   41700:	e0bffc17 	ldw	r2,-16(fp)
   41704:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   41708:	e0bffc17 	ldw	r2,-16(fp)
   4170c:	10c00217 	ldw	r3,8(r2)
   41710:	e0bff617 	ldw	r2,-40(fp)
   41714:	1880042e 	bgeu	r3,r2,41728 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   41718:	e0bffc17 	ldw	r2,-16(fp)
   4171c:	00c00044 	movi	r3,1
   41720:	10c00405 	stb	r3,16(r2)
   41724:	00000206 	br	41730 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   41728:	e0bffc17 	ldw	r2,-16(fp)
   4172c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   41730:	e0bffc17 	ldw	r2,-16(fp)
   41734:	d0e01b04 	addi	r3,gp,-32660
   41738:	e0fffa15 	stw	r3,-24(fp)
   4173c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   41740:	e0bffb17 	ldw	r2,-20(fp)
   41744:	e0fffa17 	ldw	r3,-24(fp)
   41748:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4174c:	e0bffa17 	ldw	r2,-24(fp)
   41750:	10c00017 	ldw	r3,0(r2)
   41754:	e0bffb17 	ldw	r2,-20(fp)
   41758:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4175c:	e0bffa17 	ldw	r2,-24(fp)
   41760:	10800017 	ldw	r2,0(r2)
   41764:	e0fffb17 	ldw	r3,-20(fp)
   41768:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4176c:	e0bffa17 	ldw	r2,-24(fp)
   41770:	e0fffb17 	ldw	r3,-20(fp)
   41774:	10c00015 	stw	r3,0(r2)
   41778:	e0bff817 	ldw	r2,-32(fp)
   4177c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41780:	e0bff717 	ldw	r2,-36(fp)
   41784:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   41788:	0005883a 	mov	r2,zero
   4178c:	00000306 	br	4179c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   41790:	00bffa84 	movi	r2,-22
   41794:	00000106 	br	4179c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   41798:	00bfde84 	movi	r2,-134
  }
}
   4179c:	e037883a 	mov	sp,fp
   417a0:	df000017 	ldw	fp,0(sp)
   417a4:	dec00104 	addi	sp,sp,4
   417a8:	f800283a 	ret

000417ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   417ac:	defffe04 	addi	sp,sp,-8
   417b0:	dfc00115 	stw	ra,4(sp)
   417b4:	df000015 	stw	fp,0(sp)
   417b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   417bc:	d0a01917 	ldw	r2,-32668(gp)
   417c0:	10000326 	beq	r2,zero,417d0 <alt_get_errno+0x24>
   417c4:	d0a01917 	ldw	r2,-32668(gp)
   417c8:	103ee83a 	callr	r2
   417cc:	00000106 	br	417d4 <alt_get_errno+0x28>
   417d0:	d0a5db04 	addi	r2,gp,-26772
}
   417d4:	e037883a 	mov	sp,fp
   417d8:	dfc00117 	ldw	ra,4(sp)
   417dc:	df000017 	ldw	fp,0(sp)
   417e0:	dec00204 	addi	sp,sp,8
   417e4:	f800283a 	ret

000417e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   417e8:	defffb04 	addi	sp,sp,-20
   417ec:	dfc00415 	stw	ra,16(sp)
   417f0:	df000315 	stw	fp,12(sp)
   417f4:	df000304 	addi	fp,sp,12
   417f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   417fc:	e0bfff17 	ldw	r2,-4(fp)
   41800:	10000816 	blt	r2,zero,41824 <close+0x3c>
   41804:	01400304 	movi	r5,12
   41808:	e13fff17 	ldw	r4,-4(fp)
   4180c:	00405440 	call	40544 <__mulsi3>
   41810:	1007883a 	mov	r3,r2
   41814:	00800134 	movhi	r2,4
   41818:	108f5d04 	addi	r2,r2,15732
   4181c:	1885883a 	add	r2,r3,r2
   41820:	00000106 	br	41828 <close+0x40>
   41824:	0005883a 	mov	r2,zero
   41828:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4182c:	e0bffd17 	ldw	r2,-12(fp)
   41830:	10001926 	beq	r2,zero,41898 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   41834:	e0bffd17 	ldw	r2,-12(fp)
   41838:	10800017 	ldw	r2,0(r2)
   4183c:	10800417 	ldw	r2,16(r2)
   41840:	10000626 	beq	r2,zero,4185c <close+0x74>
   41844:	e0bffd17 	ldw	r2,-12(fp)
   41848:	10800017 	ldw	r2,0(r2)
   4184c:	10800417 	ldw	r2,16(r2)
   41850:	e13ffd17 	ldw	r4,-12(fp)
   41854:	103ee83a 	callr	r2
   41858:	00000106 	br	41860 <close+0x78>
   4185c:	0005883a 	mov	r2,zero
   41860:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   41864:	e13fff17 	ldw	r4,-4(fp)
   41868:	00421d00 	call	421d0 <alt_release_fd>
    if (rval < 0)
   4186c:	e0bffe17 	ldw	r2,-8(fp)
   41870:	1000070e 	bge	r2,zero,41890 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   41874:	00417ac0 	call	417ac <alt_get_errno>
   41878:	1007883a 	mov	r3,r2
   4187c:	e0bffe17 	ldw	r2,-8(fp)
   41880:	0085c83a 	sub	r2,zero,r2
   41884:	18800015 	stw	r2,0(r3)
      return -1;
   41888:	00bfffc4 	movi	r2,-1
   4188c:	00000706 	br	418ac <close+0xc4>
    }
    return 0;
   41890:	0005883a 	mov	r2,zero
   41894:	00000506 	br	418ac <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   41898:	00417ac0 	call	417ac <alt_get_errno>
   4189c:	1007883a 	mov	r3,r2
   418a0:	00801444 	movi	r2,81
   418a4:	18800015 	stw	r2,0(r3)
    return -1;
   418a8:	00bfffc4 	movi	r2,-1
  }
}
   418ac:	e037883a 	mov	sp,fp
   418b0:	dfc00117 	ldw	ra,4(sp)
   418b4:	df000017 	ldw	fp,0(sp)
   418b8:	dec00204 	addi	sp,sp,8
   418bc:	f800283a 	ret

000418c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   418c0:	deffff04 	addi	sp,sp,-4
   418c4:	df000015 	stw	fp,0(sp)
   418c8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   418cc:	0001883a 	nop
   418d0:	e037883a 	mov	sp,fp
   418d4:	df000017 	ldw	fp,0(sp)
   418d8:	dec00104 	addi	sp,sp,4
   418dc:	f800283a 	ret

000418e0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   418e0:	defffc04 	addi	sp,sp,-16
   418e4:	df000315 	stw	fp,12(sp)
   418e8:	df000304 	addi	fp,sp,12
   418ec:	e13ffd15 	stw	r4,-12(fp)
   418f0:	e17ffe15 	stw	r5,-8(fp)
   418f4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   418f8:	e0bfff17 	ldw	r2,-4(fp)
}
   418fc:	e037883a 	mov	sp,fp
   41900:	df000017 	ldw	fp,0(sp)
   41904:	dec00104 	addi	sp,sp,4
   41908:	f800283a 	ret

0004190c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4190c:	defffe04 	addi	sp,sp,-8
   41910:	dfc00115 	stw	ra,4(sp)
   41914:	df000015 	stw	fp,0(sp)
   41918:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4191c:	d0a01917 	ldw	r2,-32668(gp)
   41920:	10000326 	beq	r2,zero,41930 <alt_get_errno+0x24>
   41924:	d0a01917 	ldw	r2,-32668(gp)
   41928:	103ee83a 	callr	r2
   4192c:	00000106 	br	41934 <alt_get_errno+0x28>
   41930:	d0a5db04 	addi	r2,gp,-26772
}
   41934:	e037883a 	mov	sp,fp
   41938:	dfc00117 	ldw	ra,4(sp)
   4193c:	df000017 	ldw	fp,0(sp)
   41940:	dec00204 	addi	sp,sp,8
   41944:	f800283a 	ret

00041948 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   41948:	defffa04 	addi	sp,sp,-24
   4194c:	dfc00515 	stw	ra,20(sp)
   41950:	df000415 	stw	fp,16(sp)
   41954:	df000404 	addi	fp,sp,16
   41958:	e13ffe15 	stw	r4,-8(fp)
   4195c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   41960:	e0bffe17 	ldw	r2,-8(fp)
   41964:	10000326 	beq	r2,zero,41974 <alt_dev_llist_insert+0x2c>
   41968:	e0bffe17 	ldw	r2,-8(fp)
   4196c:	10800217 	ldw	r2,8(r2)
   41970:	1000061e 	bne	r2,zero,4198c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   41974:	004190c0 	call	4190c <alt_get_errno>
   41978:	1007883a 	mov	r3,r2
   4197c:	00800584 	movi	r2,22
   41980:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   41984:	00bffa84 	movi	r2,-22
   41988:	00001306 	br	419d8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4198c:	e0bffe17 	ldw	r2,-8(fp)
   41990:	e0ffff17 	ldw	r3,-4(fp)
   41994:	e0fffc15 	stw	r3,-16(fp)
   41998:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4199c:	e0bffd17 	ldw	r2,-12(fp)
   419a0:	e0fffc17 	ldw	r3,-16(fp)
   419a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   419a8:	e0bffc17 	ldw	r2,-16(fp)
   419ac:	10c00017 	ldw	r3,0(r2)
   419b0:	e0bffd17 	ldw	r2,-12(fp)
   419b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   419b8:	e0bffc17 	ldw	r2,-16(fp)
   419bc:	10800017 	ldw	r2,0(r2)
   419c0:	e0fffd17 	ldw	r3,-12(fp)
   419c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   419c8:	e0bffc17 	ldw	r2,-16(fp)
   419cc:	e0fffd17 	ldw	r3,-12(fp)
   419d0:	10c00015 	stw	r3,0(r2)

  return 0;  
   419d4:	0005883a 	mov	r2,zero
}
   419d8:	e037883a 	mov	sp,fp
   419dc:	dfc00117 	ldw	ra,4(sp)
   419e0:	df000017 	ldw	fp,0(sp)
   419e4:	dec00204 	addi	sp,sp,8
   419e8:	f800283a 	ret

000419ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   419ec:	defffd04 	addi	sp,sp,-12
   419f0:	dfc00215 	stw	ra,8(sp)
   419f4:	df000115 	stw	fp,4(sp)
   419f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   419fc:	00800134 	movhi	r2,4
   41a00:	108b2104 	addi	r2,r2,11396
   41a04:	e0bfff15 	stw	r2,-4(fp)
   41a08:	00000606 	br	41a24 <_do_ctors+0x38>
        (*ctor) (); 
   41a0c:	e0bfff17 	ldw	r2,-4(fp)
   41a10:	10800017 	ldw	r2,0(r2)
   41a14:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   41a18:	e0bfff17 	ldw	r2,-4(fp)
   41a1c:	10bfff04 	addi	r2,r2,-4
   41a20:	e0bfff15 	stw	r2,-4(fp)
   41a24:	e0ffff17 	ldw	r3,-4(fp)
   41a28:	00800134 	movhi	r2,4
   41a2c:	108b2204 	addi	r2,r2,11400
   41a30:	18bff62e 	bgeu	r3,r2,41a0c <__alt_data_end+0xffff1a0c>
        (*ctor) (); 
}
   41a34:	0001883a 	nop
   41a38:	e037883a 	mov	sp,fp
   41a3c:	dfc00117 	ldw	ra,4(sp)
   41a40:	df000017 	ldw	fp,0(sp)
   41a44:	dec00204 	addi	sp,sp,8
   41a48:	f800283a 	ret

00041a4c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   41a4c:	defffd04 	addi	sp,sp,-12
   41a50:	dfc00215 	stw	ra,8(sp)
   41a54:	df000115 	stw	fp,4(sp)
   41a58:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   41a5c:	00800134 	movhi	r2,4
   41a60:	108b2104 	addi	r2,r2,11396
   41a64:	e0bfff15 	stw	r2,-4(fp)
   41a68:	00000606 	br	41a84 <_do_dtors+0x38>
        (*dtor) (); 
   41a6c:	e0bfff17 	ldw	r2,-4(fp)
   41a70:	10800017 	ldw	r2,0(r2)
   41a74:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   41a78:	e0bfff17 	ldw	r2,-4(fp)
   41a7c:	10bfff04 	addi	r2,r2,-4
   41a80:	e0bfff15 	stw	r2,-4(fp)
   41a84:	e0ffff17 	ldw	r3,-4(fp)
   41a88:	00800134 	movhi	r2,4
   41a8c:	108b2204 	addi	r2,r2,11400
   41a90:	18bff62e 	bgeu	r3,r2,41a6c <__alt_data_end+0xffff1a6c>
        (*dtor) (); 
}
   41a94:	0001883a 	nop
   41a98:	e037883a 	mov	sp,fp
   41a9c:	dfc00117 	ldw	ra,4(sp)
   41aa0:	df000017 	ldw	fp,0(sp)
   41aa4:	dec00204 	addi	sp,sp,8
   41aa8:	f800283a 	ret

00041aac <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   41aac:	defffc04 	addi	sp,sp,-16
   41ab0:	df000315 	stw	fp,12(sp)
   41ab4:	df000304 	addi	fp,sp,12
   41ab8:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   41abc:	e0bfff17 	ldw	r2,-4(fp)
   41ac0:	10800217 	ldw	r2,8(r2)
   41ac4:	1000021e 	bne	r2,zero,41ad0 <alt_fs_reg+0x24>
  {
    return -ENODEV;
   41ac8:	00bffb44 	movi	r2,-19
   41acc:	00001306 	br	41b1c <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   41ad0:	e0bfff17 	ldw	r2,-4(fp)
   41ad4:	d0e01404 	addi	r3,gp,-32688
   41ad8:	e0fffd15 	stw	r3,-12(fp)
   41adc:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   41ae0:	e0bffe17 	ldw	r2,-8(fp)
   41ae4:	e0fffd17 	ldw	r3,-12(fp)
   41ae8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   41aec:	e0bffd17 	ldw	r2,-12(fp)
   41af0:	10c00017 	ldw	r3,0(r2)
   41af4:	e0bffe17 	ldw	r2,-8(fp)
   41af8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   41afc:	e0bffd17 	ldw	r2,-12(fp)
   41b00:	10800017 	ldw	r2,0(r2)
   41b04:	e0fffe17 	ldw	r3,-8(fp)
   41b08:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   41b0c:	e0bffd17 	ldw	r2,-12(fp)
   41b10:	e0fffe17 	ldw	r3,-8(fp)
   41b14:	10c00015 	stw	r3,0(r2)

  return 0;
   41b18:	0005883a 	mov	r2,zero
} 
   41b1c:	e037883a 	mov	sp,fp
   41b20:	df000017 	ldw	fp,0(sp)
   41b24:	dec00104 	addi	sp,sp,4
   41b28:	f800283a 	ret

00041b2c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   41b2c:	deffff04 	addi	sp,sp,-4
   41b30:	df000015 	stw	fp,0(sp)
   41b34:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   41b38:	0001883a 	nop
   41b3c:	e037883a 	mov	sp,fp
   41b40:	df000017 	ldw	fp,0(sp)
   41b44:	dec00104 	addi	sp,sp,4
   41b48:	f800283a 	ret

00041b4c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   41b4c:	defff904 	addi	sp,sp,-28
   41b50:	dfc00615 	stw	ra,24(sp)
   41b54:	df000515 	stw	fp,20(sp)
   41b58:	df000504 	addi	fp,sp,20
   41b5c:	e13ffc15 	stw	r4,-16(fp)
   41b60:	e17ffd15 	stw	r5,-12(fp)
   41b64:	e1bffe15 	stw	r6,-8(fp)
   41b68:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   41b6c:	e0800217 	ldw	r2,8(fp)
   41b70:	d8800015 	stw	r2,0(sp)
   41b74:	e1ffff17 	ldw	r7,-4(fp)
   41b78:	e1bffe17 	ldw	r6,-8(fp)
   41b7c:	e17ffd17 	ldw	r5,-12(fp)
   41b80:	e13ffc17 	ldw	r4,-16(fp)
   41b84:	0041cfc0 	call	41cfc <alt_iic_isr_register>
}  
   41b88:	e037883a 	mov	sp,fp
   41b8c:	dfc00117 	ldw	ra,4(sp)
   41b90:	df000017 	ldw	fp,0(sp)
   41b94:	dec00204 	addi	sp,sp,8
   41b98:	f800283a 	ret

00041b9c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   41b9c:	defff904 	addi	sp,sp,-28
   41ba0:	df000615 	stw	fp,24(sp)
   41ba4:	df000604 	addi	fp,sp,24
   41ba8:	e13ffe15 	stw	r4,-8(fp)
   41bac:	e17fff15 	stw	r5,-4(fp)
   41bb0:	e0bfff17 	ldw	r2,-4(fp)
   41bb4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41bb8:	0005303a 	rdctl	r2,status
   41bbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41bc0:	e0fffb17 	ldw	r3,-20(fp)
   41bc4:	00bfff84 	movi	r2,-2
   41bc8:	1884703a 	and	r2,r3,r2
   41bcc:	1001703a 	wrctl	status,r2
  
  return context;
   41bd0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   41bd4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   41bd8:	00c00044 	movi	r3,1
   41bdc:	e0bffa17 	ldw	r2,-24(fp)
   41be0:	1884983a 	sll	r2,r3,r2
   41be4:	1007883a 	mov	r3,r2
   41be8:	d0a5d717 	ldw	r2,-26788(gp)
   41bec:	1884b03a 	or	r2,r3,r2
   41bf0:	d0a5d715 	stw	r2,-26788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   41bf4:	d0a5d717 	ldw	r2,-26788(gp)
   41bf8:	100170fa 	wrctl	ienable,r2
   41bfc:	e0bffc17 	ldw	r2,-16(fp)
   41c00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41c04:	e0bffd17 	ldw	r2,-12(fp)
   41c08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   41c0c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   41c10:	0001883a 	nop
}
   41c14:	e037883a 	mov	sp,fp
   41c18:	df000017 	ldw	fp,0(sp)
   41c1c:	dec00104 	addi	sp,sp,4
   41c20:	f800283a 	ret

00041c24 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   41c24:	defff904 	addi	sp,sp,-28
   41c28:	df000615 	stw	fp,24(sp)
   41c2c:	df000604 	addi	fp,sp,24
   41c30:	e13ffe15 	stw	r4,-8(fp)
   41c34:	e17fff15 	stw	r5,-4(fp)
   41c38:	e0bfff17 	ldw	r2,-4(fp)
   41c3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41c40:	0005303a 	rdctl	r2,status
   41c44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41c48:	e0fffb17 	ldw	r3,-20(fp)
   41c4c:	00bfff84 	movi	r2,-2
   41c50:	1884703a 	and	r2,r3,r2
   41c54:	1001703a 	wrctl	status,r2
  
  return context;
   41c58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   41c5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   41c60:	00c00044 	movi	r3,1
   41c64:	e0bffa17 	ldw	r2,-24(fp)
   41c68:	1884983a 	sll	r2,r3,r2
   41c6c:	0084303a 	nor	r2,zero,r2
   41c70:	1007883a 	mov	r3,r2
   41c74:	d0a5d717 	ldw	r2,-26788(gp)
   41c78:	1884703a 	and	r2,r3,r2
   41c7c:	d0a5d715 	stw	r2,-26788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   41c80:	d0a5d717 	ldw	r2,-26788(gp)
   41c84:	100170fa 	wrctl	ienable,r2
   41c88:	e0bffc17 	ldw	r2,-16(fp)
   41c8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41c90:	e0bffd17 	ldw	r2,-12(fp)
   41c94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   41c98:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   41c9c:	0001883a 	nop
}
   41ca0:	e037883a 	mov	sp,fp
   41ca4:	df000017 	ldw	fp,0(sp)
   41ca8:	dec00104 	addi	sp,sp,4
   41cac:	f800283a 	ret

00041cb0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   41cb0:	defffc04 	addi	sp,sp,-16
   41cb4:	df000315 	stw	fp,12(sp)
   41cb8:	df000304 	addi	fp,sp,12
   41cbc:	e13ffe15 	stw	r4,-8(fp)
   41cc0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   41cc4:	000530fa 	rdctl	r2,ienable
   41cc8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   41ccc:	00c00044 	movi	r3,1
   41cd0:	e0bfff17 	ldw	r2,-4(fp)
   41cd4:	1884983a 	sll	r2,r3,r2
   41cd8:	1007883a 	mov	r3,r2
   41cdc:	e0bffd17 	ldw	r2,-12(fp)
   41ce0:	1884703a 	and	r2,r3,r2
   41ce4:	1004c03a 	cmpne	r2,r2,zero
   41ce8:	10803fcc 	andi	r2,r2,255
}
   41cec:	e037883a 	mov	sp,fp
   41cf0:	df000017 	ldw	fp,0(sp)
   41cf4:	dec00104 	addi	sp,sp,4
   41cf8:	f800283a 	ret

00041cfc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   41cfc:	defff504 	addi	sp,sp,-44
   41d00:	dfc00a15 	stw	ra,40(sp)
   41d04:	df000915 	stw	fp,36(sp)
   41d08:	df000904 	addi	fp,sp,36
   41d0c:	e13ffc15 	stw	r4,-16(fp)
   41d10:	e17ffd15 	stw	r5,-12(fp)
   41d14:	e1bffe15 	stw	r6,-8(fp)
   41d18:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   41d1c:	00bffa84 	movi	r2,-22
   41d20:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   41d24:	e0bffd17 	ldw	r2,-12(fp)
   41d28:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   41d2c:	e0bff817 	ldw	r2,-32(fp)
   41d30:	10800808 	cmpgei	r2,r2,32
   41d34:	1000271e 	bne	r2,zero,41dd4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41d38:	0005303a 	rdctl	r2,status
   41d3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41d40:	e0fffb17 	ldw	r3,-20(fp)
   41d44:	00bfff84 	movi	r2,-2
   41d48:	1884703a 	and	r2,r3,r2
   41d4c:	1001703a 	wrctl	status,r2
  
  return context;
   41d50:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   41d54:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   41d58:	00800134 	movhi	r2,4
   41d5c:	1096a204 	addi	r2,r2,23176
   41d60:	e0fff817 	ldw	r3,-32(fp)
   41d64:	180690fa 	slli	r3,r3,3
   41d68:	10c5883a 	add	r2,r2,r3
   41d6c:	e0fffe17 	ldw	r3,-8(fp)
   41d70:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   41d74:	00800134 	movhi	r2,4
   41d78:	1096a204 	addi	r2,r2,23176
   41d7c:	e0fff817 	ldw	r3,-32(fp)
   41d80:	180690fa 	slli	r3,r3,3
   41d84:	10c5883a 	add	r2,r2,r3
   41d88:	10800104 	addi	r2,r2,4
   41d8c:	e0ffff17 	ldw	r3,-4(fp)
   41d90:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   41d94:	e0bffe17 	ldw	r2,-8(fp)
   41d98:	10000526 	beq	r2,zero,41db0 <alt_iic_isr_register+0xb4>
   41d9c:	e0bff817 	ldw	r2,-32(fp)
   41da0:	100b883a 	mov	r5,r2
   41da4:	e13ffc17 	ldw	r4,-16(fp)
   41da8:	0041b9c0 	call	41b9c <alt_ic_irq_enable>
   41dac:	00000406 	br	41dc0 <alt_iic_isr_register+0xc4>
   41db0:	e0bff817 	ldw	r2,-32(fp)
   41db4:	100b883a 	mov	r5,r2
   41db8:	e13ffc17 	ldw	r4,-16(fp)
   41dbc:	0041c240 	call	41c24 <alt_ic_irq_disable>
   41dc0:	e0bff715 	stw	r2,-36(fp)
   41dc4:	e0bffa17 	ldw	r2,-24(fp)
   41dc8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41dcc:	e0bff917 	ldw	r2,-28(fp)
   41dd0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   41dd4:	e0bff717 	ldw	r2,-36(fp)
}
   41dd8:	e037883a 	mov	sp,fp
   41ddc:	dfc00117 	ldw	ra,4(sp)
   41de0:	df000017 	ldw	fp,0(sp)
   41de4:	dec00204 	addi	sp,sp,8
   41de8:	f800283a 	ret

00041dec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   41dec:	defff804 	addi	sp,sp,-32
   41df0:	dfc00715 	stw	ra,28(sp)
   41df4:	df000615 	stw	fp,24(sp)
   41df8:	dc000515 	stw	r16,20(sp)
   41dfc:	df000604 	addi	fp,sp,24
   41e00:	e13ffb15 	stw	r4,-20(fp)
   41e04:	e17ffc15 	stw	r5,-16(fp)
   41e08:	e1bffd15 	stw	r6,-12(fp)
   41e0c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   41e10:	e1bffe17 	ldw	r6,-8(fp)
   41e14:	e17ffd17 	ldw	r5,-12(fp)
   41e18:	e13ffc17 	ldw	r4,-16(fp)
   41e1c:	00420740 	call	42074 <open>
   41e20:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   41e24:	e0bffa17 	ldw	r2,-24(fp)
   41e28:	10002216 	blt	r2,zero,41eb4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   41e2c:	04000134 	movhi	r16,4
   41e30:	840f5d04 	addi	r16,r16,15732
   41e34:	e0bffa17 	ldw	r2,-24(fp)
   41e38:	01400304 	movi	r5,12
   41e3c:	1009883a 	mov	r4,r2
   41e40:	00405440 	call	40544 <__mulsi3>
   41e44:	8085883a 	add	r2,r16,r2
   41e48:	10c00017 	ldw	r3,0(r2)
   41e4c:	e0bffb17 	ldw	r2,-20(fp)
   41e50:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   41e54:	04000134 	movhi	r16,4
   41e58:	840f5d04 	addi	r16,r16,15732
   41e5c:	e0bffa17 	ldw	r2,-24(fp)
   41e60:	01400304 	movi	r5,12
   41e64:	1009883a 	mov	r4,r2
   41e68:	00405440 	call	40544 <__mulsi3>
   41e6c:	8085883a 	add	r2,r16,r2
   41e70:	10800104 	addi	r2,r2,4
   41e74:	10c00017 	ldw	r3,0(r2)
   41e78:	e0bffb17 	ldw	r2,-20(fp)
   41e7c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   41e80:	04000134 	movhi	r16,4
   41e84:	840f5d04 	addi	r16,r16,15732
   41e88:	e0bffa17 	ldw	r2,-24(fp)
   41e8c:	01400304 	movi	r5,12
   41e90:	1009883a 	mov	r4,r2
   41e94:	00405440 	call	40544 <__mulsi3>
   41e98:	8085883a 	add	r2,r16,r2
   41e9c:	10800204 	addi	r2,r2,8
   41ea0:	10c00017 	ldw	r3,0(r2)
   41ea4:	e0bffb17 	ldw	r2,-20(fp)
   41ea8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   41eac:	e13ffa17 	ldw	r4,-24(fp)
   41eb0:	00421d00 	call	421d0 <alt_release_fd>
  }
} 
   41eb4:	0001883a 	nop
   41eb8:	e6ffff04 	addi	sp,fp,-4
   41ebc:	dfc00217 	ldw	ra,8(sp)
   41ec0:	df000117 	ldw	fp,4(sp)
   41ec4:	dc000017 	ldw	r16,0(sp)
   41ec8:	dec00304 	addi	sp,sp,12
   41ecc:	f800283a 	ret

00041ed0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   41ed0:	defffb04 	addi	sp,sp,-20
   41ed4:	dfc00415 	stw	ra,16(sp)
   41ed8:	df000315 	stw	fp,12(sp)
   41edc:	df000304 	addi	fp,sp,12
   41ee0:	e13ffd15 	stw	r4,-12(fp)
   41ee4:	e17ffe15 	stw	r5,-8(fp)
   41ee8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   41eec:	01c07fc4 	movi	r7,511
   41ef0:	01800044 	movi	r6,1
   41ef4:	e17ffd17 	ldw	r5,-12(fp)
   41ef8:	01000134 	movhi	r4,4
   41efc:	210f6004 	addi	r4,r4,15744
   41f00:	0041dec0 	call	41dec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   41f04:	01c07fc4 	movi	r7,511
   41f08:	000d883a 	mov	r6,zero
   41f0c:	e17ffe17 	ldw	r5,-8(fp)
   41f10:	01000134 	movhi	r4,4
   41f14:	210f5d04 	addi	r4,r4,15732
   41f18:	0041dec0 	call	41dec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   41f1c:	01c07fc4 	movi	r7,511
   41f20:	01800044 	movi	r6,1
   41f24:	e17fff17 	ldw	r5,-4(fp)
   41f28:	01000134 	movhi	r4,4
   41f2c:	210f6304 	addi	r4,r4,15756
   41f30:	0041dec0 	call	41dec <alt_open_fd>
}  
   41f34:	0001883a 	nop
   41f38:	e037883a 	mov	sp,fp
   41f3c:	dfc00117 	ldw	ra,4(sp)
   41f40:	df000017 	ldw	fp,0(sp)
   41f44:	dec00204 	addi	sp,sp,8
   41f48:	f800283a 	ret

00041f4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   41f4c:	defffe04 	addi	sp,sp,-8
   41f50:	dfc00115 	stw	ra,4(sp)
   41f54:	df000015 	stw	fp,0(sp)
   41f58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   41f5c:	d0a01917 	ldw	r2,-32668(gp)
   41f60:	10000326 	beq	r2,zero,41f70 <alt_get_errno+0x24>
   41f64:	d0a01917 	ldw	r2,-32668(gp)
   41f68:	103ee83a 	callr	r2
   41f6c:	00000106 	br	41f74 <alt_get_errno+0x28>
   41f70:	d0a5db04 	addi	r2,gp,-26772
}
   41f74:	e037883a 	mov	sp,fp
   41f78:	dfc00117 	ldw	ra,4(sp)
   41f7c:	df000017 	ldw	fp,0(sp)
   41f80:	dec00204 	addi	sp,sp,8
   41f84:	f800283a 	ret

00041f88 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   41f88:	defffb04 	addi	sp,sp,-20
   41f8c:	dfc00415 	stw	ra,16(sp)
   41f90:	df000315 	stw	fp,12(sp)
   41f94:	dc000215 	stw	r16,8(sp)
   41f98:	df000304 	addi	fp,sp,12
   41f9c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   41fa0:	e0bffe17 	ldw	r2,-8(fp)
   41fa4:	10800217 	ldw	r2,8(r2)
   41fa8:	10d00034 	orhi	r3,r2,16384
   41fac:	e0bffe17 	ldw	r2,-8(fp)
   41fb0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   41fb4:	e03ffd15 	stw	zero,-12(fp)
   41fb8:	00002306 	br	42048 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   41fbc:	04000134 	movhi	r16,4
   41fc0:	840f5d04 	addi	r16,r16,15732
   41fc4:	e0bffd17 	ldw	r2,-12(fp)
   41fc8:	01400304 	movi	r5,12
   41fcc:	1009883a 	mov	r4,r2
   41fd0:	00405440 	call	40544 <__mulsi3>
   41fd4:	8085883a 	add	r2,r16,r2
   41fd8:	10c00017 	ldw	r3,0(r2)
   41fdc:	e0bffe17 	ldw	r2,-8(fp)
   41fe0:	10800017 	ldw	r2,0(r2)
   41fe4:	1880151e 	bne	r3,r2,4203c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   41fe8:	04000134 	movhi	r16,4
   41fec:	840f5d04 	addi	r16,r16,15732
   41ff0:	e0bffd17 	ldw	r2,-12(fp)
   41ff4:	01400304 	movi	r5,12
   41ff8:	1009883a 	mov	r4,r2
   41ffc:	00405440 	call	40544 <__mulsi3>
   42000:	8085883a 	add	r2,r16,r2
   42004:	10800204 	addi	r2,r2,8
   42008:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4200c:	10000b0e 	bge	r2,zero,4203c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   42010:	01400304 	movi	r5,12
   42014:	e13ffd17 	ldw	r4,-12(fp)
   42018:	00405440 	call	40544 <__mulsi3>
   4201c:	1007883a 	mov	r3,r2
   42020:	00800134 	movhi	r2,4
   42024:	108f5d04 	addi	r2,r2,15732
   42028:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4202c:	e0bffe17 	ldw	r2,-8(fp)
   42030:	18800226 	beq	r3,r2,4203c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   42034:	00bffcc4 	movi	r2,-13
   42038:	00000806 	br	4205c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4203c:	e0bffd17 	ldw	r2,-12(fp)
   42040:	10800044 	addi	r2,r2,1
   42044:	e0bffd15 	stw	r2,-12(fp)
   42048:	d0a01817 	ldw	r2,-32672(gp)
   4204c:	1007883a 	mov	r3,r2
   42050:	e0bffd17 	ldw	r2,-12(fp)
   42054:	18bfd92e 	bgeu	r3,r2,41fbc <__alt_data_end+0xffff1fbc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   42058:	0005883a 	mov	r2,zero
}
   4205c:	e6ffff04 	addi	sp,fp,-4
   42060:	dfc00217 	ldw	ra,8(sp)
   42064:	df000117 	ldw	fp,4(sp)
   42068:	dc000017 	ldw	r16,0(sp)
   4206c:	dec00304 	addi	sp,sp,12
   42070:	f800283a 	ret

00042074 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   42074:	defff604 	addi	sp,sp,-40
   42078:	dfc00915 	stw	ra,36(sp)
   4207c:	df000815 	stw	fp,32(sp)
   42080:	df000804 	addi	fp,sp,32
   42084:	e13ffd15 	stw	r4,-12(fp)
   42088:	e17ffe15 	stw	r5,-8(fp)
   4208c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   42090:	00bfffc4 	movi	r2,-1
   42094:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   42098:	00bffb44 	movi	r2,-19
   4209c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   420a0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   420a4:	d1601604 	addi	r5,gp,-32680
   420a8:	e13ffd17 	ldw	r4,-12(fp)
   420ac:	004241c0 	call	4241c <alt_find_dev>
   420b0:	e0bff815 	stw	r2,-32(fp)
   420b4:	e0bff817 	ldw	r2,-32(fp)
   420b8:	1000051e 	bne	r2,zero,420d0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   420bc:	e13ffd17 	ldw	r4,-12(fp)
   420c0:	00424ac0 	call	424ac <alt_find_file>
   420c4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   420c8:	00800044 	movi	r2,1
   420cc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   420d0:	e0bff817 	ldw	r2,-32(fp)
   420d4:	10002b26 	beq	r2,zero,42184 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   420d8:	e13ff817 	ldw	r4,-32(fp)
   420dc:	00425b40 	call	425b4 <alt_get_fd>
   420e0:	e0bff915 	stw	r2,-28(fp)
   420e4:	e0bff917 	ldw	r2,-28(fp)
   420e8:	1000030e 	bge	r2,zero,420f8 <open+0x84>
    {
      status = index;
   420ec:	e0bff917 	ldw	r2,-28(fp)
   420f0:	e0bffa15 	stw	r2,-24(fp)
   420f4:	00002506 	br	4218c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   420f8:	01400304 	movi	r5,12
   420fc:	e13ff917 	ldw	r4,-28(fp)
   42100:	00405440 	call	40544 <__mulsi3>
   42104:	1007883a 	mov	r3,r2
   42108:	00800134 	movhi	r2,4
   4210c:	108f5d04 	addi	r2,r2,15732
   42110:	1885883a 	add	r2,r3,r2
   42114:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   42118:	e0fffe17 	ldw	r3,-8(fp)
   4211c:	00900034 	movhi	r2,16384
   42120:	10bfffc4 	addi	r2,r2,-1
   42124:	1886703a 	and	r3,r3,r2
   42128:	e0bffc17 	ldw	r2,-16(fp)
   4212c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   42130:	e0bffb17 	ldw	r2,-20(fp)
   42134:	1000051e 	bne	r2,zero,4214c <open+0xd8>
   42138:	e13ffc17 	ldw	r4,-16(fp)
   4213c:	0041f880 	call	41f88 <alt_file_locked>
   42140:	e0bffa15 	stw	r2,-24(fp)
   42144:	e0bffa17 	ldw	r2,-24(fp)
   42148:	10001016 	blt	r2,zero,4218c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4214c:	e0bff817 	ldw	r2,-32(fp)
   42150:	10800317 	ldw	r2,12(r2)
   42154:	10000826 	beq	r2,zero,42178 <open+0x104>
   42158:	e0bff817 	ldw	r2,-32(fp)
   4215c:	10800317 	ldw	r2,12(r2)
   42160:	e1ffff17 	ldw	r7,-4(fp)
   42164:	e1bffe17 	ldw	r6,-8(fp)
   42168:	e17ffd17 	ldw	r5,-12(fp)
   4216c:	e13ffc17 	ldw	r4,-16(fp)
   42170:	103ee83a 	callr	r2
   42174:	00000106 	br	4217c <open+0x108>
   42178:	0005883a 	mov	r2,zero
   4217c:	e0bffa15 	stw	r2,-24(fp)
   42180:	00000206 	br	4218c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   42184:	00bffb44 	movi	r2,-19
   42188:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4218c:	e0bffa17 	ldw	r2,-24(fp)
   42190:	1000090e 	bge	r2,zero,421b8 <open+0x144>
  {
    alt_release_fd (index);  
   42194:	e13ff917 	ldw	r4,-28(fp)
   42198:	00421d00 	call	421d0 <alt_release_fd>
    ALT_ERRNO = -status;
   4219c:	0041f4c0 	call	41f4c <alt_get_errno>
   421a0:	1007883a 	mov	r3,r2
   421a4:	e0bffa17 	ldw	r2,-24(fp)
   421a8:	0085c83a 	sub	r2,zero,r2
   421ac:	18800015 	stw	r2,0(r3)
    return -1;
   421b0:	00bfffc4 	movi	r2,-1
   421b4:	00000106 	br	421bc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   421b8:	e0bff917 	ldw	r2,-28(fp)
}
   421bc:	e037883a 	mov	sp,fp
   421c0:	dfc00117 	ldw	ra,4(sp)
   421c4:	df000017 	ldw	fp,0(sp)
   421c8:	dec00204 	addi	sp,sp,8
   421cc:	f800283a 	ret

000421d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   421d0:	defffc04 	addi	sp,sp,-16
   421d4:	dfc00315 	stw	ra,12(sp)
   421d8:	df000215 	stw	fp,8(sp)
   421dc:	dc000115 	stw	r16,4(sp)
   421e0:	df000204 	addi	fp,sp,8
   421e4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   421e8:	e0bffe17 	ldw	r2,-8(fp)
   421ec:	108000d0 	cmplti	r2,r2,3
   421f0:	1000111e 	bne	r2,zero,42238 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   421f4:	04000134 	movhi	r16,4
   421f8:	840f5d04 	addi	r16,r16,15732
   421fc:	e0bffe17 	ldw	r2,-8(fp)
   42200:	01400304 	movi	r5,12
   42204:	1009883a 	mov	r4,r2
   42208:	00405440 	call	40544 <__mulsi3>
   4220c:	8085883a 	add	r2,r16,r2
   42210:	10800204 	addi	r2,r2,8
   42214:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   42218:	04000134 	movhi	r16,4
   4221c:	840f5d04 	addi	r16,r16,15732
   42220:	e0bffe17 	ldw	r2,-8(fp)
   42224:	01400304 	movi	r5,12
   42228:	1009883a 	mov	r4,r2
   4222c:	00405440 	call	40544 <__mulsi3>
   42230:	8085883a 	add	r2,r16,r2
   42234:	10000015 	stw	zero,0(r2)
  }
}
   42238:	0001883a 	nop
   4223c:	e6ffff04 	addi	sp,fp,-4
   42240:	dfc00217 	ldw	ra,8(sp)
   42244:	df000117 	ldw	fp,4(sp)
   42248:	dc000017 	ldw	r16,0(sp)
   4224c:	dec00304 	addi	sp,sp,12
   42250:	f800283a 	ret

00042254 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   42254:	defffa04 	addi	sp,sp,-24
   42258:	df000515 	stw	fp,20(sp)
   4225c:	df000504 	addi	fp,sp,20
   42260:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42264:	0005303a 	rdctl	r2,status
   42268:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4226c:	e0fffc17 	ldw	r3,-16(fp)
   42270:	00bfff84 	movi	r2,-2
   42274:	1884703a 	and	r2,r3,r2
   42278:	1001703a 	wrctl	status,r2
  
  return context;
   4227c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   42280:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   42284:	e0bfff17 	ldw	r2,-4(fp)
   42288:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4228c:	e0bffd17 	ldw	r2,-12(fp)
   42290:	10800017 	ldw	r2,0(r2)
   42294:	e0fffd17 	ldw	r3,-12(fp)
   42298:	18c00117 	ldw	r3,4(r3)
   4229c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   422a0:	e0bffd17 	ldw	r2,-12(fp)
   422a4:	10800117 	ldw	r2,4(r2)
   422a8:	e0fffd17 	ldw	r3,-12(fp)
   422ac:	18c00017 	ldw	r3,0(r3)
   422b0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   422b4:	e0bffd17 	ldw	r2,-12(fp)
   422b8:	e0fffd17 	ldw	r3,-12(fp)
   422bc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   422c0:	e0bffd17 	ldw	r2,-12(fp)
   422c4:	e0fffd17 	ldw	r3,-12(fp)
   422c8:	10c00015 	stw	r3,0(r2)
   422cc:	e0bffb17 	ldw	r2,-20(fp)
   422d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   422d4:	e0bffe17 	ldw	r2,-8(fp)
   422d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   422dc:	0001883a 	nop
   422e0:	e037883a 	mov	sp,fp
   422e4:	df000017 	ldw	fp,0(sp)
   422e8:	dec00104 	addi	sp,sp,4
   422ec:	f800283a 	ret

000422f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   422f0:	defffb04 	addi	sp,sp,-20
   422f4:	dfc00415 	stw	ra,16(sp)
   422f8:	df000315 	stw	fp,12(sp)
   422fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   42300:	d0a01b17 	ldw	r2,-32660(gp)
   42304:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   42308:	d0a5d917 	ldw	r2,-26780(gp)
   4230c:	10800044 	addi	r2,r2,1
   42310:	d0a5d915 	stw	r2,-26780(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   42314:	00002e06 	br	423d0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   42318:	e0bffd17 	ldw	r2,-12(fp)
   4231c:	10800017 	ldw	r2,0(r2)
   42320:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   42324:	e0bffd17 	ldw	r2,-12(fp)
   42328:	10800403 	ldbu	r2,16(r2)
   4232c:	10803fcc 	andi	r2,r2,255
   42330:	10000426 	beq	r2,zero,42344 <alt_tick+0x54>
   42334:	d0a5d917 	ldw	r2,-26780(gp)
   42338:	1000021e 	bne	r2,zero,42344 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4233c:	e0bffd17 	ldw	r2,-12(fp)
   42340:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   42344:	e0bffd17 	ldw	r2,-12(fp)
   42348:	10800217 	ldw	r2,8(r2)
   4234c:	d0e5d917 	ldw	r3,-26780(gp)
   42350:	18801d36 	bltu	r3,r2,423c8 <alt_tick+0xd8>
   42354:	e0bffd17 	ldw	r2,-12(fp)
   42358:	10800403 	ldbu	r2,16(r2)
   4235c:	10803fcc 	andi	r2,r2,255
   42360:	1000191e 	bne	r2,zero,423c8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   42364:	e0bffd17 	ldw	r2,-12(fp)
   42368:	10800317 	ldw	r2,12(r2)
   4236c:	e0fffd17 	ldw	r3,-12(fp)
   42370:	18c00517 	ldw	r3,20(r3)
   42374:	1809883a 	mov	r4,r3
   42378:	103ee83a 	callr	r2
   4237c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   42380:	e0bfff17 	ldw	r2,-4(fp)
   42384:	1000031e 	bne	r2,zero,42394 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   42388:	e13ffd17 	ldw	r4,-12(fp)
   4238c:	00422540 	call	42254 <alt_alarm_stop>
   42390:	00000d06 	br	423c8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   42394:	e0bffd17 	ldw	r2,-12(fp)
   42398:	10c00217 	ldw	r3,8(r2)
   4239c:	e0bfff17 	ldw	r2,-4(fp)
   423a0:	1887883a 	add	r3,r3,r2
   423a4:	e0bffd17 	ldw	r2,-12(fp)
   423a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   423ac:	e0bffd17 	ldw	r2,-12(fp)
   423b0:	10c00217 	ldw	r3,8(r2)
   423b4:	d0a5d917 	ldw	r2,-26780(gp)
   423b8:	1880032e 	bgeu	r3,r2,423c8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   423bc:	e0bffd17 	ldw	r2,-12(fp)
   423c0:	00c00044 	movi	r3,1
   423c4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   423c8:	e0bffe17 	ldw	r2,-8(fp)
   423cc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   423d0:	e0fffd17 	ldw	r3,-12(fp)
   423d4:	d0a01b04 	addi	r2,gp,-32660
   423d8:	18bfcf1e 	bne	r3,r2,42318 <__alt_data_end+0xffff2318>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   423dc:	0001883a 	nop
}
   423e0:	0001883a 	nop
   423e4:	e037883a 	mov	sp,fp
   423e8:	dfc00117 	ldw	ra,4(sp)
   423ec:	df000017 	ldw	fp,0(sp)
   423f0:	dec00204 	addi	sp,sp,8
   423f4:	f800283a 	ret

000423f8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   423f8:	deffff04 	addi	sp,sp,-4
   423fc:	df000015 	stw	fp,0(sp)
   42400:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   42404:	000170fa 	wrctl	ienable,zero
}
   42408:	0001883a 	nop
   4240c:	e037883a 	mov	sp,fp
   42410:	df000017 	ldw	fp,0(sp)
   42414:	dec00104 	addi	sp,sp,4
   42418:	f800283a 	ret

0004241c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4241c:	defffa04 	addi	sp,sp,-24
   42420:	dfc00515 	stw	ra,20(sp)
   42424:	df000415 	stw	fp,16(sp)
   42428:	df000404 	addi	fp,sp,16
   4242c:	e13ffe15 	stw	r4,-8(fp)
   42430:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   42434:	e0bfff17 	ldw	r2,-4(fp)
   42438:	10800017 	ldw	r2,0(r2)
   4243c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   42440:	e13ffe17 	ldw	r4,-8(fp)
   42444:	00429240 	call	42924 <strlen>
   42448:	10800044 	addi	r2,r2,1
   4244c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   42450:	00000d06 	br	42488 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   42454:	e0bffc17 	ldw	r2,-16(fp)
   42458:	10800217 	ldw	r2,8(r2)
   4245c:	e0fffd17 	ldw	r3,-12(fp)
   42460:	180d883a 	mov	r6,r3
   42464:	e17ffe17 	ldw	r5,-8(fp)
   42468:	1009883a 	mov	r4,r2
   4246c:	00427600 	call	42760 <memcmp>
   42470:	1000021e 	bne	r2,zero,4247c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   42474:	e0bffc17 	ldw	r2,-16(fp)
   42478:	00000706 	br	42498 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4247c:	e0bffc17 	ldw	r2,-16(fp)
   42480:	10800017 	ldw	r2,0(r2)
   42484:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   42488:	e0fffc17 	ldw	r3,-16(fp)
   4248c:	e0bfff17 	ldw	r2,-4(fp)
   42490:	18bff01e 	bne	r3,r2,42454 <__alt_data_end+0xffff2454>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   42494:	0005883a 	mov	r2,zero
}
   42498:	e037883a 	mov	sp,fp
   4249c:	dfc00117 	ldw	ra,4(sp)
   424a0:	df000017 	ldw	fp,0(sp)
   424a4:	dec00204 	addi	sp,sp,8
   424a8:	f800283a 	ret

000424ac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   424ac:	defffb04 	addi	sp,sp,-20
   424b0:	dfc00415 	stw	ra,16(sp)
   424b4:	df000315 	stw	fp,12(sp)
   424b8:	df000304 	addi	fp,sp,12
   424bc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   424c0:	d0a01417 	ldw	r2,-32688(gp)
   424c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   424c8:	00003106 	br	42590 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   424cc:	e0bffd17 	ldw	r2,-12(fp)
   424d0:	10800217 	ldw	r2,8(r2)
   424d4:	1009883a 	mov	r4,r2
   424d8:	00429240 	call	42924 <strlen>
   424dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   424e0:	e0bffd17 	ldw	r2,-12(fp)
   424e4:	10c00217 	ldw	r3,8(r2)
   424e8:	e0bffe17 	ldw	r2,-8(fp)
   424ec:	10bfffc4 	addi	r2,r2,-1
   424f0:	1885883a 	add	r2,r3,r2
   424f4:	10800003 	ldbu	r2,0(r2)
   424f8:	10803fcc 	andi	r2,r2,255
   424fc:	1080201c 	xori	r2,r2,128
   42500:	10bfe004 	addi	r2,r2,-128
   42504:	10800bd8 	cmpnei	r2,r2,47
   42508:	1000031e 	bne	r2,zero,42518 <alt_find_file+0x6c>
    {
      len -= 1;
   4250c:	e0bffe17 	ldw	r2,-8(fp)
   42510:	10bfffc4 	addi	r2,r2,-1
   42514:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   42518:	e0bffe17 	ldw	r2,-8(fp)
   4251c:	e0ffff17 	ldw	r3,-4(fp)
   42520:	1885883a 	add	r2,r3,r2
   42524:	10800003 	ldbu	r2,0(r2)
   42528:	10803fcc 	andi	r2,r2,255
   4252c:	1080201c 	xori	r2,r2,128
   42530:	10bfe004 	addi	r2,r2,-128
   42534:	10800be0 	cmpeqi	r2,r2,47
   42538:	1000081e 	bne	r2,zero,4255c <alt_find_file+0xb0>
   4253c:	e0bffe17 	ldw	r2,-8(fp)
   42540:	e0ffff17 	ldw	r3,-4(fp)
   42544:	1885883a 	add	r2,r3,r2
   42548:	10800003 	ldbu	r2,0(r2)
   4254c:	10803fcc 	andi	r2,r2,255
   42550:	1080201c 	xori	r2,r2,128
   42554:	10bfe004 	addi	r2,r2,-128
   42558:	10000a1e 	bne	r2,zero,42584 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   4255c:	e0bffd17 	ldw	r2,-12(fp)
   42560:	10800217 	ldw	r2,8(r2)
   42564:	e0fffe17 	ldw	r3,-8(fp)
   42568:	180d883a 	mov	r6,r3
   4256c:	e17fff17 	ldw	r5,-4(fp)
   42570:	1009883a 	mov	r4,r2
   42574:	00427600 	call	42760 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   42578:	1000021e 	bne	r2,zero,42584 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4257c:	e0bffd17 	ldw	r2,-12(fp)
   42580:	00000706 	br	425a0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   42584:	e0bffd17 	ldw	r2,-12(fp)
   42588:	10800017 	ldw	r2,0(r2)
   4258c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   42590:	e0fffd17 	ldw	r3,-12(fp)
   42594:	d0a01404 	addi	r2,gp,-32688
   42598:	18bfcc1e 	bne	r3,r2,424cc <__alt_data_end+0xffff24cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4259c:	0005883a 	mov	r2,zero
}
   425a0:	e037883a 	mov	sp,fp
   425a4:	dfc00117 	ldw	ra,4(sp)
   425a8:	df000017 	ldw	fp,0(sp)
   425ac:	dec00204 	addi	sp,sp,8
   425b0:	f800283a 	ret

000425b4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   425b4:	defffa04 	addi	sp,sp,-24
   425b8:	dfc00515 	stw	ra,20(sp)
   425bc:	df000415 	stw	fp,16(sp)
   425c0:	dc000315 	stw	r16,12(sp)
   425c4:	df000404 	addi	fp,sp,16
   425c8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   425cc:	00bffa04 	movi	r2,-24
   425d0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   425d4:	e03ffc15 	stw	zero,-16(fp)
   425d8:	00001d06 	br	42650 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   425dc:	04000134 	movhi	r16,4
   425e0:	840f5d04 	addi	r16,r16,15732
   425e4:	e0bffc17 	ldw	r2,-16(fp)
   425e8:	01400304 	movi	r5,12
   425ec:	1009883a 	mov	r4,r2
   425f0:	00405440 	call	40544 <__mulsi3>
   425f4:	8085883a 	add	r2,r16,r2
   425f8:	10800017 	ldw	r2,0(r2)
   425fc:	1000111e 	bne	r2,zero,42644 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   42600:	04000134 	movhi	r16,4
   42604:	840f5d04 	addi	r16,r16,15732
   42608:	e0bffc17 	ldw	r2,-16(fp)
   4260c:	01400304 	movi	r5,12
   42610:	1009883a 	mov	r4,r2
   42614:	00405440 	call	40544 <__mulsi3>
   42618:	8085883a 	add	r2,r16,r2
   4261c:	e0fffe17 	ldw	r3,-8(fp)
   42620:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   42624:	d0e01817 	ldw	r3,-32672(gp)
   42628:	e0bffc17 	ldw	r2,-16(fp)
   4262c:	1880020e 	bge	r3,r2,42638 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   42630:	e0bffc17 	ldw	r2,-16(fp)
   42634:	d0a01815 	stw	r2,-32672(gp)
      }
      rc = i;
   42638:	e0bffc17 	ldw	r2,-16(fp)
   4263c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   42640:	00000606 	br	4265c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   42644:	e0bffc17 	ldw	r2,-16(fp)
   42648:	10800044 	addi	r2,r2,1
   4264c:	e0bffc15 	stw	r2,-16(fp)
   42650:	e0bffc17 	ldw	r2,-16(fp)
   42654:	10800810 	cmplti	r2,r2,32
   42658:	103fe01e 	bne	r2,zero,425dc <__alt_data_end+0xffff25dc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4265c:	e0bffd17 	ldw	r2,-12(fp)
}
   42660:	e6ffff04 	addi	sp,fp,-4
   42664:	dfc00217 	ldw	ra,8(sp)
   42668:	df000117 	ldw	fp,4(sp)
   4266c:	dc000017 	ldw	r16,0(sp)
   42670:	dec00304 	addi	sp,sp,12
   42674:	f800283a 	ret

00042678 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   42678:	defffe04 	addi	sp,sp,-8
   4267c:	df000115 	stw	fp,4(sp)
   42680:	df000104 	addi	fp,sp,4
   42684:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   42688:	e0bfff17 	ldw	r2,-4(fp)
   4268c:	10bffe84 	addi	r2,r2,-6
   42690:	10c00428 	cmpgeui	r3,r2,16
   42694:	18001a1e 	bne	r3,zero,42700 <alt_exception_cause_generated_bad_addr+0x88>
   42698:	100690ba 	slli	r3,r2,2
   4269c:	00800134 	movhi	r2,4
   426a0:	1089ac04 	addi	r2,r2,9904
   426a4:	1885883a 	add	r2,r3,r2
   426a8:	10800017 	ldw	r2,0(r2)
   426ac:	1000683a 	jmp	r2
   426b0:	000426f0 	cmpltui	zero,zero,4251
   426b4:	000426f0 	cmpltui	zero,zero,4251
   426b8:	00042700 	call	4270 <__alt_mem_ImagemA+0x4270>
   426bc:	00042700 	call	4270 <__alt_mem_ImagemA+0x4270>
   426c0:	00042700 	call	4270 <__alt_mem_ImagemA+0x4270>
   426c4:	000426f0 	cmpltui	zero,zero,4251
   426c8:	000426f8 	rdprs	zero,zero,4251
   426cc:	00042700 	call	4270 <__alt_mem_ImagemA+0x4270>
   426d0:	000426f0 	cmpltui	zero,zero,4251
   426d4:	000426f0 	cmpltui	zero,zero,4251
   426d8:	00042700 	call	4270 <__alt_mem_ImagemA+0x4270>
   426dc:	000426f0 	cmpltui	zero,zero,4251
   426e0:	000426f8 	rdprs	zero,zero,4251
   426e4:	00042700 	call	4270 <__alt_mem_ImagemA+0x4270>
   426e8:	00042700 	call	4270 <__alt_mem_ImagemA+0x4270>
   426ec:	000426f0 	cmpltui	zero,zero,4251
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   426f0:	00800044 	movi	r2,1
   426f4:	00000306 	br	42704 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   426f8:	0005883a 	mov	r2,zero
   426fc:	00000106 	br	42704 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   42700:	0005883a 	mov	r2,zero
  }
}
   42704:	e037883a 	mov	sp,fp
   42708:	df000017 	ldw	fp,0(sp)
   4270c:	dec00104 	addi	sp,sp,4
   42710:	f800283a 	ret

00042714 <atexit>:
   42714:	200b883a 	mov	r5,r4
   42718:	000f883a 	mov	r7,zero
   4271c:	000d883a 	mov	r6,zero
   42720:	0009883a 	mov	r4,zero
   42724:	00429bc1 	jmpi	429bc <__register_exitproc>

00042728 <exit>:
   42728:	defffe04 	addi	sp,sp,-8
   4272c:	000b883a 	mov	r5,zero
   42730:	dc000015 	stw	r16,0(sp)
   42734:	dfc00115 	stw	ra,4(sp)
   42738:	2021883a 	mov	r16,r4
   4273c:	0042ad40 	call	42ad4 <__call_exitprocs>
   42740:	00800134 	movhi	r2,4
   42744:	1090e304 	addi	r2,r2,17292
   42748:	11000017 	ldw	r4,0(r2)
   4274c:	20800f17 	ldw	r2,60(r4)
   42750:	10000126 	beq	r2,zero,42758 <exit+0x30>
   42754:	103ee83a 	callr	r2
   42758:	8009883a 	mov	r4,r16
   4275c:	0042c540 	call	42c54 <_exit>

00042760 <memcmp>:
   42760:	01c000c4 	movi	r7,3
   42764:	3980192e 	bgeu	r7,r6,427cc <memcmp+0x6c>
   42768:	2144b03a 	or	r2,r4,r5
   4276c:	11c4703a 	and	r2,r2,r7
   42770:	10000f26 	beq	r2,zero,427b0 <memcmp+0x50>
   42774:	20800003 	ldbu	r2,0(r4)
   42778:	28c00003 	ldbu	r3,0(r5)
   4277c:	10c0151e 	bne	r2,r3,427d4 <memcmp+0x74>
   42780:	31bfff84 	addi	r6,r6,-2
   42784:	01ffffc4 	movi	r7,-1
   42788:	00000406 	br	4279c <memcmp+0x3c>
   4278c:	20800003 	ldbu	r2,0(r4)
   42790:	28c00003 	ldbu	r3,0(r5)
   42794:	31bfffc4 	addi	r6,r6,-1
   42798:	10c00e1e 	bne	r2,r3,427d4 <memcmp+0x74>
   4279c:	21000044 	addi	r4,r4,1
   427a0:	29400044 	addi	r5,r5,1
   427a4:	31fff91e 	bne	r6,r7,4278c <__alt_data_end+0xffff278c>
   427a8:	0005883a 	mov	r2,zero
   427ac:	f800283a 	ret
   427b0:	20c00017 	ldw	r3,0(r4)
   427b4:	28800017 	ldw	r2,0(r5)
   427b8:	18bfee1e 	bne	r3,r2,42774 <__alt_data_end+0xffff2774>
   427bc:	31bfff04 	addi	r6,r6,-4
   427c0:	21000104 	addi	r4,r4,4
   427c4:	29400104 	addi	r5,r5,4
   427c8:	39bff936 	bltu	r7,r6,427b0 <__alt_data_end+0xffff27b0>
   427cc:	303fe91e 	bne	r6,zero,42774 <__alt_data_end+0xffff2774>
   427d0:	003ff506 	br	427a8 <__alt_data_end+0xffff27a8>
   427d4:	10c5c83a 	sub	r2,r2,r3
   427d8:	f800283a 	ret

000427dc <memcpy>:
   427dc:	defffd04 	addi	sp,sp,-12
   427e0:	dfc00215 	stw	ra,8(sp)
   427e4:	dc400115 	stw	r17,4(sp)
   427e8:	dc000015 	stw	r16,0(sp)
   427ec:	00c003c4 	movi	r3,15
   427f0:	2005883a 	mov	r2,r4
   427f4:	1980452e 	bgeu	r3,r6,4290c <memcpy+0x130>
   427f8:	2906b03a 	or	r3,r5,r4
   427fc:	18c000cc 	andi	r3,r3,3
   42800:	1800441e 	bne	r3,zero,42914 <memcpy+0x138>
   42804:	347ffc04 	addi	r17,r6,-16
   42808:	8822d13a 	srli	r17,r17,4
   4280c:	28c00104 	addi	r3,r5,4
   42810:	23400104 	addi	r13,r4,4
   42814:	8820913a 	slli	r16,r17,4
   42818:	2b000204 	addi	r12,r5,8
   4281c:	22c00204 	addi	r11,r4,8
   42820:	84000504 	addi	r16,r16,20
   42824:	2a800304 	addi	r10,r5,12
   42828:	22400304 	addi	r9,r4,12
   4282c:	2c21883a 	add	r16,r5,r16
   42830:	2811883a 	mov	r8,r5
   42834:	200f883a 	mov	r7,r4
   42838:	41000017 	ldw	r4,0(r8)
   4283c:	1fc00017 	ldw	ra,0(r3)
   42840:	63c00017 	ldw	r15,0(r12)
   42844:	39000015 	stw	r4,0(r7)
   42848:	53800017 	ldw	r14,0(r10)
   4284c:	6fc00015 	stw	ra,0(r13)
   42850:	5bc00015 	stw	r15,0(r11)
   42854:	4b800015 	stw	r14,0(r9)
   42858:	18c00404 	addi	r3,r3,16
   4285c:	39c00404 	addi	r7,r7,16
   42860:	42000404 	addi	r8,r8,16
   42864:	6b400404 	addi	r13,r13,16
   42868:	63000404 	addi	r12,r12,16
   4286c:	5ac00404 	addi	r11,r11,16
   42870:	52800404 	addi	r10,r10,16
   42874:	4a400404 	addi	r9,r9,16
   42878:	1c3fef1e 	bne	r3,r16,42838 <__alt_data_end+0xffff2838>
   4287c:	89c00044 	addi	r7,r17,1
   42880:	380e913a 	slli	r7,r7,4
   42884:	310003cc 	andi	r4,r6,15
   42888:	02c000c4 	movi	r11,3
   4288c:	11c7883a 	add	r3,r2,r7
   42890:	29cb883a 	add	r5,r5,r7
   42894:	5900212e 	bgeu	r11,r4,4291c <memcpy+0x140>
   42898:	1813883a 	mov	r9,r3
   4289c:	2811883a 	mov	r8,r5
   428a0:	200f883a 	mov	r7,r4
   428a4:	42800017 	ldw	r10,0(r8)
   428a8:	4a400104 	addi	r9,r9,4
   428ac:	39ffff04 	addi	r7,r7,-4
   428b0:	4abfff15 	stw	r10,-4(r9)
   428b4:	42000104 	addi	r8,r8,4
   428b8:	59fffa36 	bltu	r11,r7,428a4 <__alt_data_end+0xffff28a4>
   428bc:	213fff04 	addi	r4,r4,-4
   428c0:	2008d0ba 	srli	r4,r4,2
   428c4:	318000cc 	andi	r6,r6,3
   428c8:	21000044 	addi	r4,r4,1
   428cc:	2109883a 	add	r4,r4,r4
   428d0:	2109883a 	add	r4,r4,r4
   428d4:	1907883a 	add	r3,r3,r4
   428d8:	290b883a 	add	r5,r5,r4
   428dc:	30000626 	beq	r6,zero,428f8 <memcpy+0x11c>
   428e0:	198d883a 	add	r6,r3,r6
   428e4:	29c00003 	ldbu	r7,0(r5)
   428e8:	18c00044 	addi	r3,r3,1
   428ec:	29400044 	addi	r5,r5,1
   428f0:	19ffffc5 	stb	r7,-1(r3)
   428f4:	19bffb1e 	bne	r3,r6,428e4 <__alt_data_end+0xffff28e4>
   428f8:	dfc00217 	ldw	ra,8(sp)
   428fc:	dc400117 	ldw	r17,4(sp)
   42900:	dc000017 	ldw	r16,0(sp)
   42904:	dec00304 	addi	sp,sp,12
   42908:	f800283a 	ret
   4290c:	2007883a 	mov	r3,r4
   42910:	003ff206 	br	428dc <__alt_data_end+0xffff28dc>
   42914:	2007883a 	mov	r3,r4
   42918:	003ff106 	br	428e0 <__alt_data_end+0xffff28e0>
   4291c:	200d883a 	mov	r6,r4
   42920:	003fee06 	br	428dc <__alt_data_end+0xffff28dc>

00042924 <strlen>:
   42924:	208000cc 	andi	r2,r4,3
   42928:	10002026 	beq	r2,zero,429ac <strlen+0x88>
   4292c:	20800007 	ldb	r2,0(r4)
   42930:	10002026 	beq	r2,zero,429b4 <strlen+0x90>
   42934:	2005883a 	mov	r2,r4
   42938:	00000206 	br	42944 <strlen+0x20>
   4293c:	10c00007 	ldb	r3,0(r2)
   42940:	18001826 	beq	r3,zero,429a4 <strlen+0x80>
   42944:	10800044 	addi	r2,r2,1
   42948:	10c000cc 	andi	r3,r2,3
   4294c:	183ffb1e 	bne	r3,zero,4293c <__alt_data_end+0xffff293c>
   42950:	10c00017 	ldw	r3,0(r2)
   42954:	01ffbff4 	movhi	r7,65279
   42958:	39ffbfc4 	addi	r7,r7,-257
   4295c:	00ca303a 	nor	r5,zero,r3
   42960:	01a02074 	movhi	r6,32897
   42964:	19c7883a 	add	r3,r3,r7
   42968:	31a02004 	addi	r6,r6,-32640
   4296c:	1946703a 	and	r3,r3,r5
   42970:	1986703a 	and	r3,r3,r6
   42974:	1800091e 	bne	r3,zero,4299c <strlen+0x78>
   42978:	10800104 	addi	r2,r2,4
   4297c:	10c00017 	ldw	r3,0(r2)
   42980:	19cb883a 	add	r5,r3,r7
   42984:	00c6303a 	nor	r3,zero,r3
   42988:	28c6703a 	and	r3,r5,r3
   4298c:	1986703a 	and	r3,r3,r6
   42990:	183ff926 	beq	r3,zero,42978 <__alt_data_end+0xffff2978>
   42994:	00000106 	br	4299c <strlen+0x78>
   42998:	10800044 	addi	r2,r2,1
   4299c:	10c00007 	ldb	r3,0(r2)
   429a0:	183ffd1e 	bne	r3,zero,42998 <__alt_data_end+0xffff2998>
   429a4:	1105c83a 	sub	r2,r2,r4
   429a8:	f800283a 	ret
   429ac:	2005883a 	mov	r2,r4
   429b0:	003fe706 	br	42950 <__alt_data_end+0xffff2950>
   429b4:	0005883a 	mov	r2,zero
   429b8:	f800283a 	ret

000429bc <__register_exitproc>:
   429bc:	defffa04 	addi	sp,sp,-24
   429c0:	dc000315 	stw	r16,12(sp)
   429c4:	04000134 	movhi	r16,4
   429c8:	8410e304 	addi	r16,r16,17292
   429cc:	80c00017 	ldw	r3,0(r16)
   429d0:	dc400415 	stw	r17,16(sp)
   429d4:	dfc00515 	stw	ra,20(sp)
   429d8:	18805217 	ldw	r2,328(r3)
   429dc:	2023883a 	mov	r17,r4
   429e0:	10003726 	beq	r2,zero,42ac0 <__register_exitproc+0x104>
   429e4:	10c00117 	ldw	r3,4(r2)
   429e8:	010007c4 	movi	r4,31
   429ec:	20c00e16 	blt	r4,r3,42a28 <__register_exitproc+0x6c>
   429f0:	1a000044 	addi	r8,r3,1
   429f4:	8800221e 	bne	r17,zero,42a80 <__register_exitproc+0xc4>
   429f8:	18c00084 	addi	r3,r3,2
   429fc:	18c7883a 	add	r3,r3,r3
   42a00:	18c7883a 	add	r3,r3,r3
   42a04:	12000115 	stw	r8,4(r2)
   42a08:	10c7883a 	add	r3,r2,r3
   42a0c:	19400015 	stw	r5,0(r3)
   42a10:	0005883a 	mov	r2,zero
   42a14:	dfc00517 	ldw	ra,20(sp)
   42a18:	dc400417 	ldw	r17,16(sp)
   42a1c:	dc000317 	ldw	r16,12(sp)
   42a20:	dec00604 	addi	sp,sp,24
   42a24:	f800283a 	ret
   42a28:	00800034 	movhi	r2,0
   42a2c:	10800004 	addi	r2,r2,0
   42a30:	10002626 	beq	r2,zero,42acc <__register_exitproc+0x110>
   42a34:	01006404 	movi	r4,400
   42a38:	d9400015 	stw	r5,0(sp)
   42a3c:	d9800115 	stw	r6,4(sp)
   42a40:	d9c00215 	stw	r7,8(sp)
   42a44:	00000000 	call	0 <__alt_mem_ImagemA>
   42a48:	d9400017 	ldw	r5,0(sp)
   42a4c:	d9800117 	ldw	r6,4(sp)
   42a50:	d9c00217 	ldw	r7,8(sp)
   42a54:	10001d26 	beq	r2,zero,42acc <__register_exitproc+0x110>
   42a58:	81000017 	ldw	r4,0(r16)
   42a5c:	10000115 	stw	zero,4(r2)
   42a60:	02000044 	movi	r8,1
   42a64:	22405217 	ldw	r9,328(r4)
   42a68:	0007883a 	mov	r3,zero
   42a6c:	12400015 	stw	r9,0(r2)
   42a70:	20805215 	stw	r2,328(r4)
   42a74:	10006215 	stw	zero,392(r2)
   42a78:	10006315 	stw	zero,396(r2)
   42a7c:	883fde26 	beq	r17,zero,429f8 <__alt_data_end+0xffff29f8>
   42a80:	18c9883a 	add	r4,r3,r3
   42a84:	2109883a 	add	r4,r4,r4
   42a88:	1109883a 	add	r4,r2,r4
   42a8c:	21802215 	stw	r6,136(r4)
   42a90:	01800044 	movi	r6,1
   42a94:	12406217 	ldw	r9,392(r2)
   42a98:	30cc983a 	sll	r6,r6,r3
   42a9c:	4992b03a 	or	r9,r9,r6
   42aa0:	12406215 	stw	r9,392(r2)
   42aa4:	21c04215 	stw	r7,264(r4)
   42aa8:	01000084 	movi	r4,2
   42aac:	893fd21e 	bne	r17,r4,429f8 <__alt_data_end+0xffff29f8>
   42ab0:	11006317 	ldw	r4,396(r2)
   42ab4:	218cb03a 	or	r6,r4,r6
   42ab8:	11806315 	stw	r6,396(r2)
   42abc:	003fce06 	br	429f8 <__alt_data_end+0xffff29f8>
   42ac0:	18805304 	addi	r2,r3,332
   42ac4:	18805215 	stw	r2,328(r3)
   42ac8:	003fc606 	br	429e4 <__alt_data_end+0xffff29e4>
   42acc:	00bfffc4 	movi	r2,-1
   42ad0:	003fd006 	br	42a14 <__alt_data_end+0xffff2a14>

00042ad4 <__call_exitprocs>:
   42ad4:	defff504 	addi	sp,sp,-44
   42ad8:	df000915 	stw	fp,36(sp)
   42adc:	dd400615 	stw	r21,24(sp)
   42ae0:	dc800315 	stw	r18,12(sp)
   42ae4:	dfc00a15 	stw	ra,40(sp)
   42ae8:	ddc00815 	stw	r23,32(sp)
   42aec:	dd800715 	stw	r22,28(sp)
   42af0:	dd000515 	stw	r20,20(sp)
   42af4:	dcc00415 	stw	r19,16(sp)
   42af8:	dc400215 	stw	r17,8(sp)
   42afc:	dc000115 	stw	r16,4(sp)
   42b00:	d9000015 	stw	r4,0(sp)
   42b04:	2839883a 	mov	fp,r5
   42b08:	04800044 	movi	r18,1
   42b0c:	057fffc4 	movi	r21,-1
   42b10:	00800134 	movhi	r2,4
   42b14:	1090e304 	addi	r2,r2,17292
   42b18:	12000017 	ldw	r8,0(r2)
   42b1c:	45005217 	ldw	r20,328(r8)
   42b20:	44c05204 	addi	r19,r8,328
   42b24:	a0001c26 	beq	r20,zero,42b98 <__call_exitprocs+0xc4>
   42b28:	a0800117 	ldw	r2,4(r20)
   42b2c:	15ffffc4 	addi	r23,r2,-1
   42b30:	b8000d16 	blt	r23,zero,42b68 <__call_exitprocs+0x94>
   42b34:	14000044 	addi	r16,r2,1
   42b38:	8421883a 	add	r16,r16,r16
   42b3c:	8421883a 	add	r16,r16,r16
   42b40:	84402004 	addi	r17,r16,128
   42b44:	a463883a 	add	r17,r20,r17
   42b48:	a421883a 	add	r16,r20,r16
   42b4c:	e0001e26 	beq	fp,zero,42bc8 <__call_exitprocs+0xf4>
   42b50:	80804017 	ldw	r2,256(r16)
   42b54:	e0801c26 	beq	fp,r2,42bc8 <__call_exitprocs+0xf4>
   42b58:	bdffffc4 	addi	r23,r23,-1
   42b5c:	843fff04 	addi	r16,r16,-4
   42b60:	8c7fff04 	addi	r17,r17,-4
   42b64:	bd7ff91e 	bne	r23,r21,42b4c <__alt_data_end+0xffff2b4c>
   42b68:	00800034 	movhi	r2,0
   42b6c:	10800004 	addi	r2,r2,0
   42b70:	10000926 	beq	r2,zero,42b98 <__call_exitprocs+0xc4>
   42b74:	a0800117 	ldw	r2,4(r20)
   42b78:	1000301e 	bne	r2,zero,42c3c <__call_exitprocs+0x168>
   42b7c:	a0800017 	ldw	r2,0(r20)
   42b80:	10003226 	beq	r2,zero,42c4c <__call_exitprocs+0x178>
   42b84:	a009883a 	mov	r4,r20
   42b88:	98800015 	stw	r2,0(r19)
   42b8c:	00000000 	call	0 <__alt_mem_ImagemA>
   42b90:	9d000017 	ldw	r20,0(r19)
   42b94:	a03fe41e 	bne	r20,zero,42b28 <__alt_data_end+0xffff2b28>
   42b98:	dfc00a17 	ldw	ra,40(sp)
   42b9c:	df000917 	ldw	fp,36(sp)
   42ba0:	ddc00817 	ldw	r23,32(sp)
   42ba4:	dd800717 	ldw	r22,28(sp)
   42ba8:	dd400617 	ldw	r21,24(sp)
   42bac:	dd000517 	ldw	r20,20(sp)
   42bb0:	dcc00417 	ldw	r19,16(sp)
   42bb4:	dc800317 	ldw	r18,12(sp)
   42bb8:	dc400217 	ldw	r17,8(sp)
   42bbc:	dc000117 	ldw	r16,4(sp)
   42bc0:	dec00b04 	addi	sp,sp,44
   42bc4:	f800283a 	ret
   42bc8:	a0800117 	ldw	r2,4(r20)
   42bcc:	80c00017 	ldw	r3,0(r16)
   42bd0:	10bfffc4 	addi	r2,r2,-1
   42bd4:	15c01426 	beq	r2,r23,42c28 <__call_exitprocs+0x154>
   42bd8:	80000015 	stw	zero,0(r16)
   42bdc:	183fde26 	beq	r3,zero,42b58 <__alt_data_end+0xffff2b58>
   42be0:	95c8983a 	sll	r4,r18,r23
   42be4:	a0806217 	ldw	r2,392(r20)
   42be8:	a5800117 	ldw	r22,4(r20)
   42bec:	2084703a 	and	r2,r4,r2
   42bf0:	10000b26 	beq	r2,zero,42c20 <__call_exitprocs+0x14c>
   42bf4:	a0806317 	ldw	r2,396(r20)
   42bf8:	2088703a 	and	r4,r4,r2
   42bfc:	20000c1e 	bne	r4,zero,42c30 <__call_exitprocs+0x15c>
   42c00:	89400017 	ldw	r5,0(r17)
   42c04:	d9000017 	ldw	r4,0(sp)
   42c08:	183ee83a 	callr	r3
   42c0c:	a0800117 	ldw	r2,4(r20)
   42c10:	15bfbf1e 	bne	r2,r22,42b10 <__alt_data_end+0xffff2b10>
   42c14:	98800017 	ldw	r2,0(r19)
   42c18:	153fcf26 	beq	r2,r20,42b58 <__alt_data_end+0xffff2b58>
   42c1c:	003fbc06 	br	42b10 <__alt_data_end+0xffff2b10>
   42c20:	183ee83a 	callr	r3
   42c24:	003ff906 	br	42c0c <__alt_data_end+0xffff2c0c>
   42c28:	a5c00115 	stw	r23,4(r20)
   42c2c:	003feb06 	br	42bdc <__alt_data_end+0xffff2bdc>
   42c30:	89000017 	ldw	r4,0(r17)
   42c34:	183ee83a 	callr	r3
   42c38:	003ff406 	br	42c0c <__alt_data_end+0xffff2c0c>
   42c3c:	a0800017 	ldw	r2,0(r20)
   42c40:	a027883a 	mov	r19,r20
   42c44:	1029883a 	mov	r20,r2
   42c48:	003fb606 	br	42b24 <__alt_data_end+0xffff2b24>
   42c4c:	0005883a 	mov	r2,zero
   42c50:	003ffb06 	br	42c40 <__alt_data_end+0xffff2c40>

00042c54 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   42c54:	defffd04 	addi	sp,sp,-12
   42c58:	df000215 	stw	fp,8(sp)
   42c5c:	df000204 	addi	fp,sp,8
   42c60:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   42c64:	0001883a 	nop
   42c68:	e0bfff17 	ldw	r2,-4(fp)
   42c6c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   42c70:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   42c74:	10000226 	beq	r2,zero,42c80 <_exit+0x2c>
    ALT_SIM_FAIL();
   42c78:	002af070 	cmpltui	zero,zero,43969
   42c7c:	00000106 	br	42c84 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   42c80:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   42c84:	003fff06 	br	42c84 <__alt_data_end+0xffff2c84>
