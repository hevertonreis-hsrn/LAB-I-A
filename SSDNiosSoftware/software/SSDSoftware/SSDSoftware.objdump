
SSDSoftware.elf:     file format elf32-littlenios2
SSDSoftware.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00002c7c memsz 0x00002c7c flags r-x
    LOAD off    0x00003c9c vaddr 0x00022c9c paddr 0x0002436c align 2**12
         filesz 0x000016d0 memsz 0x000016d0 flags rw-
    LOAD off    0x00005a3c vaddr 0x00025a3c paddr 0x00025a3c align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002a30  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  00022c60  00022c60  00003c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000016d0  00022c9c  0002436c  00003c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00025a3c  00025a3c  00005a3c  2**2
                  ALLOC, SMALL_DATA
  6 .ImagemA      00000000  00000000  00000000  0000536c  2**0
                  CONTENTS
  7 .MemoriaPrograma 00000000  00025b60  00025b60  0000536c  2**0
                  CONTENTS
  8 .ImagemC      00000000  00030000  00030000  0000536c  2**0
                  CONTENTS
  9 .ImagemB      00000000  00040000  00040000  0000536c  2**0
                  CONTENTS
 10 .comment      00000023  00000000  00000000  0000536c  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000005f8  00000000  00000000  00005390  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00008235  00000000  00000000  00005988  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c25  00000000  00000000  0000dbbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002c8f  00000000  00000000  000107e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000bcc  00000000  00000000  00013474  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001c65  00000000  00000000  00014040  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00000803  00000000  00000000  00015ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_alt_sim_info 00000010  00000000  00000000  000164a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00000178  00000000  00000000  000164b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .thread_model 00000003  00000000  00000000  00018335  2**0
                  CONTENTS, READONLY
 21 .cpu          0000000b  00000000  00000000  00018338  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  00018343  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  00018344  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00018345  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001834e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00018357  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000018  00000000  00000000  00018360  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  00018378  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00053e2c  00000000  00000000  0001839b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00022c60 l    d  .rodata	00000000 .rodata
00022c9c l    d  .rwdata	00000000 .rwdata
00025a3c l    d  .bss	00000000 .bss
00000000 l    d  .ImagemA	00000000 .ImagemA
00025b60 l    d  .MemoriaPrograma	00000000 .MemoriaPrograma
00030000 l    d  .ImagemC	00000000 .ImagemC
00040000 l    d  .ImagemB	00000000 .ImagemB
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SSDSoftware_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Principal.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00020544 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000206ac l     F .text	00000034 alt_dev_reg
00022c9c l     O .rwdata	00001060 jtag_uart
00023cfc l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00020990 l     F .text	0000020c altera_avalon_jtag_uart_irq
00020b9c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
000242f8 l     O .rwdata	00000009 hcinfo.2538
00024304 l     O .rwdata	0000000a hcinfo.2551
00024310 l     O .rwdata	00000009 hcinfo.2560
0002431c l     O .rwdata	0000000a hcinfo.2573
00024328 l     O .rwdata	0000000a hcinfo.2586
00024334 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00021784 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000218b8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000218e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00021dc4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00021f24 l     F .text	0000003c alt_get_errno
00021f60 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00023ecc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00025a58 g     O .bss	00000004 alt_instruction_exception_handler
00020630 g     F .text	0000007c alt_main
00025a60 g     O .bss	00000100 alt_irq
0002436c g       *ABS*	00000000 __flash_rwdata_start
000211d4 g     F .text	0000011c alt_hostfs_open
000223d0 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00025a5c g     O .bss	00000004 errno
00025a44 g     O .bss	00000004 alt_argv
0002c2f0 g       *ABS*	00000000 _gp
00025a3c g     O .bss	00000004 imgA
00023d4c g     O .rwdata	00000180 alt_fd_list
0002140c g     F .text	00000068 alt_hostfs_seek
000223f4 g     F .text	00000090 alt_find_dev
000227b4 g     F .text	00000148 memcpy
00021a84 g     F .text	00000080 alt_fs_reg
00021ea8 g     F .text	0000007c alt_io_redirect
00022c60 g       *ABS*	00000000 __DTOR_END__
00022650 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00020d94 g     F .text	0000021c altera_avalon_jtag_uart_read
00021334 g     F .text	0000006c alt_hostfs_read
00030000 g       *ABS*	00000000 __alt_mem_ImagemC
00024350 g     O .rwdata	00000004 alt_max_fd
00024364 g     O .rwdata	00000004 _global_impure_ptr
00025b60 g       *ABS*	00000000 __bss_end
00021cd4 g     F .text	000000f0 alt_iic_isr_register
000222c8 g     F .text	00000108 alt_tick
00021c88 g     F .text	0000004c alt_ic_irq_enabled
0002222c g     F .text	0000009c alt_alarm_stop
00025a4c g     O .bss	00000004 alt_irq_active
000212f0 g     F .text	00000044 alt_hostfs_close
000200fc g     F .exceptions	000000d4 alt_irq_handler
00023d24 g     O .rwdata	00000028 alt_dev_null
00021898 g     F .text	00000020 alt_dcache_flush_all
0002436c g       *ABS*	00000000 __ram_rwdata_end
00024348 g     O .rwdata	00000008 alt_dev_list
00022c9c g       *ABS*	00000000 __ram_rodata_end
00025b60 g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_mem_MemoriaPrograma
000208d0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00022c60 g       *ABS*	00000000 __CTOR_LIST__
00030000 g       *ABS*	00000000 __alt_stack_pointer
00020fb0 g     F .text	00000224 altera_avalon_jtag_uart_write
00022aac g     F .text	00000180 __call_exitprocs
00020230 g     F .text	0000003c _start
00025a50 g     O .bss	00000004 _alt_tick_rate
00025a54 g     O .bss	00000004 _alt_nticks
00020718 g     F .text	00000054 alt_sys_init
00022994 g     F .text	00000118 __register_exitproc
00020c3c g     F .text	00000068 altera_avalon_jtag_uart_close
0002051c g     F .text	00000028 .hidden __mulsi3
00022c9c g       *ABS*	00000000 __ram_rwdata_start
00022c60 g       *ABS*	00000000 __ram_rodata_start
000242f0 g     O .rwdata	00000004 imgB
0002076c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002258c g     F .text	000000c4 alt_get_fd
00022738 g     F .text	0000007c memcmp
0002082c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00025b60 g       *ABS*	00000000 __alt_stack_base
0002087c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022484 g     F .text	00000108 alt_find_file
00021920 g     F .text	000000a4 alt_dev_llist_insert
00000000 g       *ABS*	00000000 __alt_mem_ImagemA
00025a3c g       *ABS*	00000000 __bss_start
0002026c g     F .text	000002b0 main
00025a48 g     O .bss	00000004 alt_envp
000207cc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00024354 g     O .rwdata	00000004 alt_errno
00022c60 g       *ABS*	00000000 __CTOR_END__
00022c60 g       *ABS*	00000000 __flash_rodata_start
00022c60 g       *ABS*	00000000 __DTOR_LIST__
000206e0 g     F .text	00000038 alt_irq_init
000221a8 g     F .text	00000084 alt_release_fd
000226ec g     F .text	00000014 atexit
00024368 g     O .rwdata	00000004 _impure_ptr
00025a40 g     O .bss	00000004 alt_argc
00021a24 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00024340 g     O .rwdata	00000008 alt_fs_list
000213a0 g     F .text	0000006c alt_hostfs_write
00020020 g       *ABS*	00000000 __ram_exceptions_start
00021b24 g     F .text	00000050 alt_ic_isr_register
0002436c g       *ABS*	00000000 _edata
00025b60 g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
00020ca4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00021bfc g     F .text	0000008c alt_ic_irq_disable
00022700 g     F .text	00000038 exit
00040000 g       *ABS*	00000000 __alt_mem_ImagemB
00030000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00022c2c g     F .text	00000034 _exit
00021658 g     F .text	0000012c alt_alarm_start
000228fc g     F .text	00000098 strlen
0002204c g     F .text	0000015c open
000242f4 g     O .rwdata	00000004 imgC
00021b04 g     F .text	00000020 alt_icache_flush_all
00024358 g     O .rwdata	00000004 alt_priority_mask
00021b74 g     F .text	00000088 alt_ic_irq_enable
0002435c g     O .rwdata	00000008 alt_alarm_list
000219c4 g     F .text	00000060 _do_ctors
000217c0 g     F .text	000000d8 close
000205ac g     F .text	00000084 alt_load
00021474 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000b4 	movhi	r2,2
   20140:	10969804 	addi	r2,r2,23136
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000b4 	movhi	r2,2
   20158:	10969804 	addi	r2,r2,23136
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_mem_ImagemB+0xfffe012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_mem_ImagemB+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a5da17 	ldw	r2,-26776(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a5da17 	ldw	r2,-26776(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20238:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2023c:	d6b0bc14 	ori	gp,gp,49904
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20244:	10968f14 	ori	r2,r2,23100

    movhi r3, %hi(__bss_end)
   20248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2024c:	18d6d814 	ori	r3,r3,23392

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_mem_ImagemB+0xfffe0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	00205ac0 	call	205ac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	00206300 	call	20630 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_mem_ImagemB+0xfffe0268>

0002026c <main>:
int * imgA = IMG_A;
int * imgB = IMG_B;
int * imgC = IMG_C;

int main()
{
   2026c:	defffe04 	addi	sp,sp,-8
   20270:	dfc00115 	stw	ra,4(sp)
   20274:	df000015 	stw	fp,0(sp)
   20278:	d839883a 	mov	fp,sp
   2027c:	023ffe74 	movhi	r8,65529
   20280:	423dfe04 	addi	r8,r8,-2056
   20284:	da37883a 	add	sp,sp,r8

	//Calculo SSD Software
	int diff[DATA_SIZE], square[DATA_SIZE];
	*MEDIDOR_ESCRITA = 0;
   20288:	00800174 	movhi	r2,5
   2028c:	10840704 	addi	r2,r2,4124
   20290:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1;
   20294:	00800174 	movhi	r2,5
   20298:	10840704 	addi	r2,r2,4124
   2029c:	00c00044 	movi	r3,1
   202a0:	10c00015 	stw	r3,0(r2)
	for (int i = 0; i < DATA_SIZE; i++)
   202a4:	00bffe74 	movhi	r2,65529
   202a8:	10bdfe04 	addi	r2,r2,-2056
   202ac:	1705883a 	add	r2,r2,fp
   202b0:	10000015 	stw	zero,0(r2)
   202b4:	00006906 	br	2045c <main+0x1f0>
	{
		diff[i] = imgB[i] - imgA[i];
   202b8:	d0e00017 	ldw	r3,-32768(gp)
   202bc:	013ffe74 	movhi	r4,65529
   202c0:	213dfe04 	addi	r4,r4,-2056
   202c4:	2709883a 	add	r4,r4,fp
   202c8:	20800017 	ldw	r2,0(r4)
   202cc:	1085883a 	add	r2,r2,r2
   202d0:	1085883a 	add	r2,r2,r2
   202d4:	1885883a 	add	r2,r3,r2
   202d8:	10c00017 	ldw	r3,0(r2)
   202dc:	d125d317 	ldw	r4,-26804(gp)
   202e0:	017ffe74 	movhi	r5,65529
   202e4:	297dfe04 	addi	r5,r5,-2056
   202e8:	2f0b883a 	add	r5,r5,fp
   202ec:	28800017 	ldw	r2,0(r5)
   202f0:	1085883a 	add	r2,r2,r2
   202f4:	1085883a 	add	r2,r2,r2
   202f8:	2085883a 	add	r2,r4,r2
   202fc:	10800017 	ldw	r2,0(r2)
   20300:	1887c83a 	sub	r3,r3,r2
   20304:	013ffe74 	movhi	r4,65529
   20308:	213dfe04 	addi	r4,r4,-2056
   2030c:	2709883a 	add	r4,r4,fp
   20310:	20800017 	ldw	r2,0(r4)
   20314:	1085883a 	add	r2,r2,r2
   20318:	1085883a 	add	r2,r2,r2
   2031c:	017ffe74 	movhi	r5,65529
   20320:	297dfe04 	addi	r5,r5,-2056
   20324:	2f0b883a 	add	r5,r5,fp
   20328:	2885883a 	add	r2,r5,r2
   2032c:	10800204 	addi	r2,r2,8
   20330:	10c00015 	stw	r3,0(r2)
		square[i] = diff[i]*diff[i];
   20334:	00fffe74 	movhi	r3,65529
   20338:	18fdfe04 	addi	r3,r3,-2056
   2033c:	1f07883a 	add	r3,r3,fp
   20340:	18800017 	ldw	r2,0(r3)
   20344:	1085883a 	add	r2,r2,r2
   20348:	1085883a 	add	r2,r2,r2
   2034c:	013ffe74 	movhi	r4,65529
   20350:	213dfe04 	addi	r4,r4,-2056
   20354:	2709883a 	add	r4,r4,fp
   20358:	2085883a 	add	r2,r4,r2
   2035c:	10800204 	addi	r2,r2,8
   20360:	10c00017 	ldw	r3,0(r2)
   20364:	017ffe74 	movhi	r5,65529
   20368:	297dfe04 	addi	r5,r5,-2056
   2036c:	2f0b883a 	add	r5,r5,fp
   20370:	28800017 	ldw	r2,0(r5)
   20374:	1085883a 	add	r2,r2,r2
   20378:	1085883a 	add	r2,r2,r2
   2037c:	013ffe74 	movhi	r4,65529
   20380:	213dfe04 	addi	r4,r4,-2056
   20384:	2709883a 	add	r4,r4,fp
   20388:	2085883a 	add	r2,r4,r2
   2038c:	10800204 	addi	r2,r2,8
   20390:	10800017 	ldw	r2,0(r2)
   20394:	100b883a 	mov	r5,r2
   20398:	1809883a 	mov	r4,r3
   2039c:	002051c0 	call	2051c <__mulsi3>
   203a0:	1009883a 	mov	r4,r2
   203a4:	00800134 	movhi	r2,4
   203a8:	10a10204 	addi	r2,r2,-31736
   203ac:	017ffe74 	movhi	r5,65529
   203b0:	297dfe04 	addi	r5,r5,-2056
   203b4:	2f0b883a 	add	r5,r5,fp
   203b8:	2887883a 	add	r3,r5,r2
   203bc:	017ffe74 	movhi	r5,65529
   203c0:	297dfe04 	addi	r5,r5,-2056
   203c4:	2f0b883a 	add	r5,r5,fp
   203c8:	28800017 	ldw	r2,0(r5)
   203cc:	1085883a 	add	r2,r2,r2
   203d0:	1085883a 	add	r2,r2,r2
   203d4:	1885883a 	add	r2,r3,r2
   203d8:	11000015 	stw	r4,0(r2)
		imgC[i] = square[i];
   203dc:	d0e00117 	ldw	r3,-32764(gp)
   203e0:	013ffe74 	movhi	r4,65529
   203e4:	213dfe04 	addi	r4,r4,-2056
   203e8:	2709883a 	add	r4,r4,fp
   203ec:	20800017 	ldw	r2,0(r4)
   203f0:	1085883a 	add	r2,r2,r2
   203f4:	1085883a 	add	r2,r2,r2
   203f8:	1887883a 	add	r3,r3,r2
   203fc:	00800134 	movhi	r2,4
   20400:	10a10204 	addi	r2,r2,-31736
   20404:	017ffe74 	movhi	r5,65529
   20408:	297dfe04 	addi	r5,r5,-2056
   2040c:	2f0b883a 	add	r5,r5,fp
   20410:	2889883a 	add	r4,r5,r2
   20414:	017ffe74 	movhi	r5,65529
   20418:	297dfe04 	addi	r5,r5,-2056
   2041c:	2f0b883a 	add	r5,r5,fp
   20420:	28800017 	ldw	r2,0(r5)
   20424:	1085883a 	add	r2,r2,r2
   20428:	1085883a 	add	r2,r2,r2
   2042c:	2085883a 	add	r2,r4,r2
   20430:	10800017 	ldw	r2,0(r2)
   20434:	18800015 	stw	r2,0(r3)

	//Calculo SSD Software
	int diff[DATA_SIZE], square[DATA_SIZE];
	*MEDIDOR_ESCRITA = 0;
	*MEDIDOR_ESCRITA = 1;
	for (int i = 0; i < DATA_SIZE; i++)
   20438:	00fffe74 	movhi	r3,65529
   2043c:	18fdfe04 	addi	r3,r3,-2056
   20440:	1f07883a 	add	r3,r3,fp
   20444:	18800017 	ldw	r2,0(r3)
   20448:	10800044 	addi	r2,r2,1
   2044c:	013ffe74 	movhi	r4,65529
   20450:	213dfe04 	addi	r4,r4,-2056
   20454:	2709883a 	add	r4,r4,fp
   20458:	20800015 	stw	r2,0(r4)
   2045c:	017ffe74 	movhi	r5,65529
   20460:	297dfe04 	addi	r5,r5,-2056
   20464:	2f0b883a 	add	r5,r5,fp
   20468:	28800017 	ldw	r2,0(r5)
   2046c:	00f83fd4 	movui	r3,57599
   20470:	18bf910e 	bge	r3,r2,202b8 <__alt_mem_ImagemB+0xfffe02b8>
	{
		diff[i] = imgB[i] - imgA[i];
		square[i] = diff[i]*diff[i];
		imgC[i] = square[i];
	}
	*MEDIDOR_ESCRITA = 2;
   20474:	00800174 	movhi	r2,5
   20478:	10840704 	addi	r2,r2,4124
   2047c:	00c00084 	movi	r3,2
   20480:	10c00015 	stw	r3,0(r2)

	//Exportando Imagem
	for (int i = 0; i < DATA_SIZE; i++)
   20484:	00bffe74 	movhi	r2,65529
   20488:	10bdff04 	addi	r2,r2,-2052
   2048c:	1705883a 	add	r2,r2,fp
   20490:	10000015 	stw	zero,0(r2)
   20494:	00001506 	br	204ec <main+0x280>
	{
		*SAIDA_IMAGEM = imgC[i];
   20498:	00800174 	movhi	r2,5
   2049c:	10840004 	addi	r2,r2,4096
   204a0:	d1200117 	ldw	r4,-32764(gp)
   204a4:	017ffe74 	movhi	r5,65529
   204a8:	297dff04 	addi	r5,r5,-2052
   204ac:	2f0b883a 	add	r5,r5,fp
   204b0:	28c00017 	ldw	r3,0(r5)
   204b4:	18c7883a 	add	r3,r3,r3
   204b8:	18c7883a 	add	r3,r3,r3
   204bc:	20c7883a 	add	r3,r4,r3
   204c0:	18c00017 	ldw	r3,0(r3)
   204c4:	10c00015 	stw	r3,0(r2)
		imgC[i] = square[i];
	}
	*MEDIDOR_ESCRITA = 2;

	//Exportando Imagem
	for (int i = 0; i < DATA_SIZE; i++)
   204c8:	00fffe74 	movhi	r3,65529
   204cc:	18fdff04 	addi	r3,r3,-2052
   204d0:	1f07883a 	add	r3,r3,fp
   204d4:	18800017 	ldw	r2,0(r3)
   204d8:	10800044 	addi	r2,r2,1
   204dc:	013ffe74 	movhi	r4,65529
   204e0:	213dff04 	addi	r4,r4,-2052
   204e4:	2709883a 	add	r4,r4,fp
   204e8:	20800015 	stw	r2,0(r4)
   204ec:	017ffe74 	movhi	r5,65529
   204f0:	297dff04 	addi	r5,r5,-2052
   204f4:	2f0b883a 	add	r5,r5,fp
   204f8:	28800017 	ldw	r2,0(r5)
   204fc:	00f83fd4 	movui	r3,57599
   20500:	18bfe50e 	bge	r3,r2,20498 <__alt_mem_ImagemB+0xfffe0498>
	}

	//Parte hardware
	//...

	return 0;
   20504:	0005883a 	mov	r2,zero
}
   20508:	e037883a 	mov	sp,fp
   2050c:	dfc00117 	ldw	ra,4(sp)
   20510:	df000017 	ldw	fp,0(sp)
   20514:	dec00204 	addi	sp,sp,8
   20518:	f800283a 	ret

0002051c <__mulsi3>:
   2051c:	0005883a 	mov	r2,zero
   20520:	20000726 	beq	r4,zero,20540 <__mulsi3+0x24>
   20524:	20c0004c 	andi	r3,r4,1
   20528:	2008d07a 	srli	r4,r4,1
   2052c:	18000126 	beq	r3,zero,20534 <__mulsi3+0x18>
   20530:	1145883a 	add	r2,r2,r5
   20534:	294b883a 	add	r5,r5,r5
   20538:	203ffa1e 	bne	r4,zero,20524 <__alt_mem_ImagemB+0xfffe0524>
   2053c:	f800283a 	ret
   20540:	f800283a 	ret

00020544 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   20544:	defffc04 	addi	sp,sp,-16
   20548:	df000315 	stw	fp,12(sp)
   2054c:	df000304 	addi	fp,sp,12
   20550:	e13ffd15 	stw	r4,-12(fp)
   20554:	e17ffe15 	stw	r5,-8(fp)
   20558:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2055c:	e0fffe17 	ldw	r3,-8(fp)
   20560:	e0bffd17 	ldw	r2,-12(fp)
   20564:	18800c26 	beq	r3,r2,20598 <alt_load_section+0x54>
  {
    while( to != end )
   20568:	00000806 	br	2058c <alt_load_section+0x48>
    {
      *to++ = *from++;
   2056c:	e0bffe17 	ldw	r2,-8(fp)
   20570:	10c00104 	addi	r3,r2,4
   20574:	e0fffe15 	stw	r3,-8(fp)
   20578:	e0fffd17 	ldw	r3,-12(fp)
   2057c:	19000104 	addi	r4,r3,4
   20580:	e13ffd15 	stw	r4,-12(fp)
   20584:	18c00017 	ldw	r3,0(r3)
   20588:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2058c:	e0fffe17 	ldw	r3,-8(fp)
   20590:	e0bfff17 	ldw	r2,-4(fp)
   20594:	18bff51e 	bne	r3,r2,2056c <__alt_mem_ImagemB+0xfffe056c>
    {
      *to++ = *from++;
    }
  }
}
   20598:	0001883a 	nop
   2059c:	e037883a 	mov	sp,fp
   205a0:	df000017 	ldw	fp,0(sp)
   205a4:	dec00104 	addi	sp,sp,4
   205a8:	f800283a 	ret

000205ac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   205ac:	defffe04 	addi	sp,sp,-8
   205b0:	dfc00115 	stw	ra,4(sp)
   205b4:	df000015 	stw	fp,0(sp)
   205b8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   205bc:	018000b4 	movhi	r6,2
   205c0:	3190db04 	addi	r6,r6,17260
   205c4:	014000b4 	movhi	r5,2
   205c8:	294b2704 	addi	r5,r5,11420
   205cc:	010000b4 	movhi	r4,2
   205d0:	2110db04 	addi	r4,r4,17260
   205d4:	00205440 	call	20544 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   205d8:	018000b4 	movhi	r6,2
   205dc:	31808c04 	addi	r6,r6,560
   205e0:	014000b4 	movhi	r5,2
   205e4:	29400804 	addi	r5,r5,32
   205e8:	010000b4 	movhi	r4,2
   205ec:	21000804 	addi	r4,r4,32
   205f0:	00205440 	call	20544 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   205f4:	018000b4 	movhi	r6,2
   205f8:	318b2704 	addi	r6,r6,11420
   205fc:	014000b4 	movhi	r5,2
   20600:	294b1804 	addi	r5,r5,11360
   20604:	010000b4 	movhi	r4,2
   20608:	210b1804 	addi	r4,r4,11360
   2060c:	00205440 	call	20544 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20610:	00218980 	call	21898 <alt_dcache_flush_all>
  alt_icache_flush_all();
   20614:	0021b040 	call	21b04 <alt_icache_flush_all>
}
   20618:	0001883a 	nop
   2061c:	e037883a 	mov	sp,fp
   20620:	dfc00117 	ldw	ra,4(sp)
   20624:	df000017 	ldw	fp,0(sp)
   20628:	dec00204 	addi	sp,sp,8
   2062c:	f800283a 	ret

00020630 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20630:	defffd04 	addi	sp,sp,-12
   20634:	dfc00215 	stw	ra,8(sp)
   20638:	df000115 	stw	fp,4(sp)
   2063c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20640:	0009883a 	mov	r4,zero
   20644:	00206e00 	call	206e0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   20648:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2064c:	00207180 	call	20718 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   20650:	018000b4 	movhi	r6,2
   20654:	318b1804 	addi	r6,r6,11360
   20658:	014000b4 	movhi	r5,2
   2065c:	294b1804 	addi	r5,r5,11360
   20660:	010000b4 	movhi	r4,2
   20664:	210b1804 	addi	r4,r4,11360
   20668:	0021ea80 	call	21ea8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2066c:	00219c40 	call	219c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   20670:	010000b4 	movhi	r4,2
   20674:	21068904 	addi	r4,r4,6692
   20678:	00226ec0 	call	226ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2067c:	d0a5d417 	ldw	r2,-26800(gp)
   20680:	d0e5d517 	ldw	r3,-26796(gp)
   20684:	d125d617 	ldw	r4,-26792(gp)
   20688:	200d883a 	mov	r6,r4
   2068c:	180b883a 	mov	r5,r3
   20690:	1009883a 	mov	r4,r2
   20694:	002026c0 	call	2026c <main>
   20698:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2069c:	01000044 	movi	r4,1
   206a0:	00217c00 	call	217c0 <close>
  exit (result);
   206a4:	e13fff17 	ldw	r4,-4(fp)
   206a8:	00227000 	call	22700 <exit>

000206ac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   206ac:	defffd04 	addi	sp,sp,-12
   206b0:	dfc00215 	stw	ra,8(sp)
   206b4:	df000115 	stw	fp,4(sp)
   206b8:	df000104 	addi	fp,sp,4
   206bc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   206c0:	d1601604 	addi	r5,gp,-32680
   206c4:	e13fff17 	ldw	r4,-4(fp)
   206c8:	00219200 	call	21920 <alt_dev_llist_insert>
}
   206cc:	e037883a 	mov	sp,fp
   206d0:	dfc00117 	ldw	ra,4(sp)
   206d4:	df000017 	ldw	fp,0(sp)
   206d8:	dec00204 	addi	sp,sp,8
   206dc:	f800283a 	ret

000206e0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   206e0:	defffd04 	addi	sp,sp,-12
   206e4:	dfc00215 	stw	ra,8(sp)
   206e8:	df000115 	stw	fp,4(sp)
   206ec:	df000104 	addi	fp,sp,4
   206f0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( PROCESSADOR, Processador);
   206f4:	00223d00 	call	223d0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   206f8:	00800044 	movi	r2,1
   206fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20700:	0001883a 	nop
   20704:	e037883a 	mov	sp,fp
   20708:	dfc00117 	ldw	ra,4(sp)
   2070c:	df000017 	ldw	fp,0(sp)
   20710:	dec00204 	addi	sp,sp,8
   20714:	f800283a 	ret

00020718 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   20718:	defffe04 	addi	sp,sp,-8
   2071c:	dfc00115 	stw	ra,4(sp)
   20720:	df000015 	stw	fp,0(sp)
   20724:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   20728:	01800204 	movi	r6,8
   2072c:	000b883a 	mov	r5,zero
   20730:	010000b4 	movhi	r4,2
   20734:	210b3104 	addi	r4,r4,11460
   20738:	00208d00 	call	208d0 <altera_avalon_jtag_uart_init>
   2073c:	010000b4 	movhi	r4,2
   20740:	210b2704 	addi	r4,r4,11420
   20744:	00206ac0 	call	206ac <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   20748:	010000b4 	movhi	r4,2
   2074c:	210f3f04 	addi	r4,r4,15612
   20750:	0021a840 	call	21a84 <alt_fs_reg>
}
   20754:	0001883a 	nop
   20758:	e037883a 	mov	sp,fp
   2075c:	dfc00117 	ldw	ra,4(sp)
   20760:	df000017 	ldw	fp,0(sp)
   20764:	dec00204 	addi	sp,sp,8
   20768:	f800283a 	ret

0002076c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2076c:	defffa04 	addi	sp,sp,-24
   20770:	dfc00515 	stw	ra,20(sp)
   20774:	df000415 	stw	fp,16(sp)
   20778:	df000404 	addi	fp,sp,16
   2077c:	e13ffd15 	stw	r4,-12(fp)
   20780:	e17ffe15 	stw	r5,-8(fp)
   20784:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20788:	e0bffd17 	ldw	r2,-12(fp)
   2078c:	10800017 	ldw	r2,0(r2)
   20790:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   20794:	e0bffc17 	ldw	r2,-16(fp)
   20798:	10c00a04 	addi	r3,r2,40
   2079c:	e0bffd17 	ldw	r2,-12(fp)
   207a0:	10800217 	ldw	r2,8(r2)
   207a4:	100f883a 	mov	r7,r2
   207a8:	e1bfff17 	ldw	r6,-4(fp)
   207ac:	e17ffe17 	ldw	r5,-8(fp)
   207b0:	1809883a 	mov	r4,r3
   207b4:	0020d940 	call	20d94 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   207b8:	e037883a 	mov	sp,fp
   207bc:	dfc00117 	ldw	ra,4(sp)
   207c0:	df000017 	ldw	fp,0(sp)
   207c4:	dec00204 	addi	sp,sp,8
   207c8:	f800283a 	ret

000207cc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   207cc:	defffa04 	addi	sp,sp,-24
   207d0:	dfc00515 	stw	ra,20(sp)
   207d4:	df000415 	stw	fp,16(sp)
   207d8:	df000404 	addi	fp,sp,16
   207dc:	e13ffd15 	stw	r4,-12(fp)
   207e0:	e17ffe15 	stw	r5,-8(fp)
   207e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   207e8:	e0bffd17 	ldw	r2,-12(fp)
   207ec:	10800017 	ldw	r2,0(r2)
   207f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   207f4:	e0bffc17 	ldw	r2,-16(fp)
   207f8:	10c00a04 	addi	r3,r2,40
   207fc:	e0bffd17 	ldw	r2,-12(fp)
   20800:	10800217 	ldw	r2,8(r2)
   20804:	100f883a 	mov	r7,r2
   20808:	e1bfff17 	ldw	r6,-4(fp)
   2080c:	e17ffe17 	ldw	r5,-8(fp)
   20810:	1809883a 	mov	r4,r3
   20814:	0020fb00 	call	20fb0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   20818:	e037883a 	mov	sp,fp
   2081c:	dfc00117 	ldw	ra,4(sp)
   20820:	df000017 	ldw	fp,0(sp)
   20824:	dec00204 	addi	sp,sp,8
   20828:	f800283a 	ret

0002082c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2082c:	defffc04 	addi	sp,sp,-16
   20830:	dfc00315 	stw	ra,12(sp)
   20834:	df000215 	stw	fp,8(sp)
   20838:	df000204 	addi	fp,sp,8
   2083c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20840:	e0bfff17 	ldw	r2,-4(fp)
   20844:	10800017 	ldw	r2,0(r2)
   20848:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2084c:	e0bffe17 	ldw	r2,-8(fp)
   20850:	10c00a04 	addi	r3,r2,40
   20854:	e0bfff17 	ldw	r2,-4(fp)
   20858:	10800217 	ldw	r2,8(r2)
   2085c:	100b883a 	mov	r5,r2
   20860:	1809883a 	mov	r4,r3
   20864:	0020c3c0 	call	20c3c <altera_avalon_jtag_uart_close>
}
   20868:	e037883a 	mov	sp,fp
   2086c:	dfc00117 	ldw	ra,4(sp)
   20870:	df000017 	ldw	fp,0(sp)
   20874:	dec00204 	addi	sp,sp,8
   20878:	f800283a 	ret

0002087c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2087c:	defffa04 	addi	sp,sp,-24
   20880:	dfc00515 	stw	ra,20(sp)
   20884:	df000415 	stw	fp,16(sp)
   20888:	df000404 	addi	fp,sp,16
   2088c:	e13ffd15 	stw	r4,-12(fp)
   20890:	e17ffe15 	stw	r5,-8(fp)
   20894:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   20898:	e0bffd17 	ldw	r2,-12(fp)
   2089c:	10800017 	ldw	r2,0(r2)
   208a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   208a4:	e0bffc17 	ldw	r2,-16(fp)
   208a8:	10800a04 	addi	r2,r2,40
   208ac:	e1bfff17 	ldw	r6,-4(fp)
   208b0:	e17ffe17 	ldw	r5,-8(fp)
   208b4:	1009883a 	mov	r4,r2
   208b8:	0020ca40 	call	20ca4 <altera_avalon_jtag_uart_ioctl>
}
   208bc:	e037883a 	mov	sp,fp
   208c0:	dfc00117 	ldw	ra,4(sp)
   208c4:	df000017 	ldw	fp,0(sp)
   208c8:	dec00204 	addi	sp,sp,8
   208cc:	f800283a 	ret

000208d0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   208d0:	defffa04 	addi	sp,sp,-24
   208d4:	dfc00515 	stw	ra,20(sp)
   208d8:	df000415 	stw	fp,16(sp)
   208dc:	df000404 	addi	fp,sp,16
   208e0:	e13ffd15 	stw	r4,-12(fp)
   208e4:	e17ffe15 	stw	r5,-8(fp)
   208e8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   208ec:	e0bffd17 	ldw	r2,-12(fp)
   208f0:	00c00044 	movi	r3,1
   208f4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   208f8:	e0bffd17 	ldw	r2,-12(fp)
   208fc:	10800017 	ldw	r2,0(r2)
   20900:	10800104 	addi	r2,r2,4
   20904:	1007883a 	mov	r3,r2
   20908:	e0bffd17 	ldw	r2,-12(fp)
   2090c:	10800817 	ldw	r2,32(r2)
   20910:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   20914:	e0bffe17 	ldw	r2,-8(fp)
   20918:	e0ffff17 	ldw	r3,-4(fp)
   2091c:	d8000015 	stw	zero,0(sp)
   20920:	e1fffd17 	ldw	r7,-12(fp)
   20924:	018000b4 	movhi	r6,2
   20928:	31826404 	addi	r6,r6,2448
   2092c:	180b883a 	mov	r5,r3
   20930:	1009883a 	mov	r4,r2
   20934:	0021b240 	call	21b24 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   20938:	e0bffd17 	ldw	r2,-12(fp)
   2093c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   20940:	e0bffd17 	ldw	r2,-12(fp)
   20944:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   20948:	d0e5d817 	ldw	r3,-26784(gp)
   2094c:	e1fffd17 	ldw	r7,-12(fp)
   20950:	018000b4 	movhi	r6,2
   20954:	3182e704 	addi	r6,r6,2972
   20958:	180b883a 	mov	r5,r3
   2095c:	1009883a 	mov	r4,r2
   20960:	00216580 	call	21658 <alt_alarm_start>
   20964:	1000040e 	bge	r2,zero,20978 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   20968:	e0fffd17 	ldw	r3,-12(fp)
   2096c:	00a00034 	movhi	r2,32768
   20970:	10bfffc4 	addi	r2,r2,-1
   20974:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   20978:	0001883a 	nop
   2097c:	e037883a 	mov	sp,fp
   20980:	dfc00117 	ldw	ra,4(sp)
   20984:	df000017 	ldw	fp,0(sp)
   20988:	dec00204 	addi	sp,sp,8
   2098c:	f800283a 	ret

00020990 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   20990:	defff804 	addi	sp,sp,-32
   20994:	df000715 	stw	fp,28(sp)
   20998:	df000704 	addi	fp,sp,28
   2099c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   209a0:	e0bfff17 	ldw	r2,-4(fp)
   209a4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   209a8:	e0bffb17 	ldw	r2,-20(fp)
   209ac:	10800017 	ldw	r2,0(r2)
   209b0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   209b4:	e0bffc17 	ldw	r2,-16(fp)
   209b8:	10800104 	addi	r2,r2,4
   209bc:	10800037 	ldwio	r2,0(r2)
   209c0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   209c4:	e0bffd17 	ldw	r2,-12(fp)
   209c8:	1080c00c 	andi	r2,r2,768
   209cc:	10006d26 	beq	r2,zero,20b84 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   209d0:	e0bffd17 	ldw	r2,-12(fp)
   209d4:	1080400c 	andi	r2,r2,256
   209d8:	10003526 	beq	r2,zero,20ab0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   209dc:	00800074 	movhi	r2,1
   209e0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   209e4:	e0bffb17 	ldw	r2,-20(fp)
   209e8:	10800a17 	ldw	r2,40(r2)
   209ec:	10800044 	addi	r2,r2,1
   209f0:	1081ffcc 	andi	r2,r2,2047
   209f4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   209f8:	e0bffb17 	ldw	r2,-20(fp)
   209fc:	10c00b17 	ldw	r3,44(r2)
   20a00:	e0bffe17 	ldw	r2,-8(fp)
   20a04:	18801526 	beq	r3,r2,20a5c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   20a08:	e0bffc17 	ldw	r2,-16(fp)
   20a0c:	10800037 	ldwio	r2,0(r2)
   20a10:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   20a14:	e0bff917 	ldw	r2,-28(fp)
   20a18:	10a0000c 	andi	r2,r2,32768
   20a1c:	10001126 	beq	r2,zero,20a64 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   20a20:	e0bffb17 	ldw	r2,-20(fp)
   20a24:	10800a17 	ldw	r2,40(r2)
   20a28:	e0fff917 	ldw	r3,-28(fp)
   20a2c:	1809883a 	mov	r4,r3
   20a30:	e0fffb17 	ldw	r3,-20(fp)
   20a34:	1885883a 	add	r2,r3,r2
   20a38:	10800e04 	addi	r2,r2,56
   20a3c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20a40:	e0bffb17 	ldw	r2,-20(fp)
   20a44:	10800a17 	ldw	r2,40(r2)
   20a48:	10800044 	addi	r2,r2,1
   20a4c:	10c1ffcc 	andi	r3,r2,2047
   20a50:	e0bffb17 	ldw	r2,-20(fp)
   20a54:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   20a58:	003fe206 	br	209e4 <__alt_mem_ImagemB+0xfffe09e4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   20a5c:	0001883a 	nop
   20a60:	00000106 	br	20a68 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   20a64:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   20a68:	e0bff917 	ldw	r2,-28(fp)
   20a6c:	10bfffec 	andhi	r2,r2,65535
   20a70:	10000f26 	beq	r2,zero,20ab0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20a74:	e0bffb17 	ldw	r2,-20(fp)
   20a78:	10c00817 	ldw	r3,32(r2)
   20a7c:	00bfff84 	movi	r2,-2
   20a80:	1886703a 	and	r3,r3,r2
   20a84:	e0bffb17 	ldw	r2,-20(fp)
   20a88:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   20a8c:	e0bffc17 	ldw	r2,-16(fp)
   20a90:	10800104 	addi	r2,r2,4
   20a94:	1007883a 	mov	r3,r2
   20a98:	e0bffb17 	ldw	r2,-20(fp)
   20a9c:	10800817 	ldw	r2,32(r2)
   20aa0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20aa4:	e0bffc17 	ldw	r2,-16(fp)
   20aa8:	10800104 	addi	r2,r2,4
   20aac:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   20ab0:	e0bffd17 	ldw	r2,-12(fp)
   20ab4:	1080800c 	andi	r2,r2,512
   20ab8:	103fbe26 	beq	r2,zero,209b4 <__alt_mem_ImagemB+0xfffe09b4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   20abc:	e0bffd17 	ldw	r2,-12(fp)
   20ac0:	1004d43a 	srli	r2,r2,16
   20ac4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   20ac8:	00001406 	br	20b1c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   20acc:	e0bffc17 	ldw	r2,-16(fp)
   20ad0:	e0fffb17 	ldw	r3,-20(fp)
   20ad4:	18c00d17 	ldw	r3,52(r3)
   20ad8:	e13ffb17 	ldw	r4,-20(fp)
   20adc:	20c7883a 	add	r3,r4,r3
   20ae0:	18c20e04 	addi	r3,r3,2104
   20ae4:	18c00003 	ldbu	r3,0(r3)
   20ae8:	18c03fcc 	andi	r3,r3,255
   20aec:	18c0201c 	xori	r3,r3,128
   20af0:	18ffe004 	addi	r3,r3,-128
   20af4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20af8:	e0bffb17 	ldw	r2,-20(fp)
   20afc:	10800d17 	ldw	r2,52(r2)
   20b00:	10800044 	addi	r2,r2,1
   20b04:	10c1ffcc 	andi	r3,r2,2047
   20b08:	e0bffb17 	ldw	r2,-20(fp)
   20b0c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   20b10:	e0bffa17 	ldw	r2,-24(fp)
   20b14:	10bfffc4 	addi	r2,r2,-1
   20b18:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   20b1c:	e0bffa17 	ldw	r2,-24(fp)
   20b20:	10000526 	beq	r2,zero,20b38 <altera_avalon_jtag_uart_irq+0x1a8>
   20b24:	e0bffb17 	ldw	r2,-20(fp)
   20b28:	10c00d17 	ldw	r3,52(r2)
   20b2c:	e0bffb17 	ldw	r2,-20(fp)
   20b30:	10800c17 	ldw	r2,48(r2)
   20b34:	18bfe51e 	bne	r3,r2,20acc <__alt_mem_ImagemB+0xfffe0acc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   20b38:	e0bffa17 	ldw	r2,-24(fp)
   20b3c:	103f9d26 	beq	r2,zero,209b4 <__alt_mem_ImagemB+0xfffe09b4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   20b40:	e0bffb17 	ldw	r2,-20(fp)
   20b44:	10c00817 	ldw	r3,32(r2)
   20b48:	00bfff44 	movi	r2,-3
   20b4c:	1886703a 	and	r3,r3,r2
   20b50:	e0bffb17 	ldw	r2,-20(fp)
   20b54:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20b58:	e0bffb17 	ldw	r2,-20(fp)
   20b5c:	10800017 	ldw	r2,0(r2)
   20b60:	10800104 	addi	r2,r2,4
   20b64:	1007883a 	mov	r3,r2
   20b68:	e0bffb17 	ldw	r2,-20(fp)
   20b6c:	10800817 	ldw	r2,32(r2)
   20b70:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20b74:	e0bffc17 	ldw	r2,-16(fp)
   20b78:	10800104 	addi	r2,r2,4
   20b7c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   20b80:	003f8c06 	br	209b4 <__alt_mem_ImagemB+0xfffe09b4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   20b84:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   20b88:	0001883a 	nop
   20b8c:	e037883a 	mov	sp,fp
   20b90:	df000017 	ldw	fp,0(sp)
   20b94:	dec00104 	addi	sp,sp,4
   20b98:	f800283a 	ret

00020b9c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   20b9c:	defff804 	addi	sp,sp,-32
   20ba0:	df000715 	stw	fp,28(sp)
   20ba4:	df000704 	addi	fp,sp,28
   20ba8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   20bac:	e0bffb17 	ldw	r2,-20(fp)
   20bb0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   20bb4:	e0bff917 	ldw	r2,-28(fp)
   20bb8:	10800017 	ldw	r2,0(r2)
   20bbc:	10800104 	addi	r2,r2,4
   20bc0:	10800037 	ldwio	r2,0(r2)
   20bc4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   20bc8:	e0bffa17 	ldw	r2,-24(fp)
   20bcc:	1081000c 	andi	r2,r2,1024
   20bd0:	10000b26 	beq	r2,zero,20c00 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   20bd4:	e0bff917 	ldw	r2,-28(fp)
   20bd8:	10800017 	ldw	r2,0(r2)
   20bdc:	10800104 	addi	r2,r2,4
   20be0:	1007883a 	mov	r3,r2
   20be4:	e0bff917 	ldw	r2,-28(fp)
   20be8:	10800817 	ldw	r2,32(r2)
   20bec:	10810014 	ori	r2,r2,1024
   20bf0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   20bf4:	e0bff917 	ldw	r2,-28(fp)
   20bf8:	10000915 	stw	zero,36(r2)
   20bfc:	00000a06 	br	20c28 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   20c00:	e0bff917 	ldw	r2,-28(fp)
   20c04:	10c00917 	ldw	r3,36(r2)
   20c08:	00a00034 	movhi	r2,32768
   20c0c:	10bfff04 	addi	r2,r2,-4
   20c10:	10c00536 	bltu	r2,r3,20c28 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   20c14:	e0bff917 	ldw	r2,-28(fp)
   20c18:	10800917 	ldw	r2,36(r2)
   20c1c:	10c00044 	addi	r3,r2,1
   20c20:	e0bff917 	ldw	r2,-28(fp)
   20c24:	10c00915 	stw	r3,36(r2)
   20c28:	d0a5d817 	ldw	r2,-26784(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   20c2c:	e037883a 	mov	sp,fp
   20c30:	df000017 	ldw	fp,0(sp)
   20c34:	dec00104 	addi	sp,sp,4
   20c38:	f800283a 	ret

00020c3c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   20c3c:	defffd04 	addi	sp,sp,-12
   20c40:	df000215 	stw	fp,8(sp)
   20c44:	df000204 	addi	fp,sp,8
   20c48:	e13ffe15 	stw	r4,-8(fp)
   20c4c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20c50:	00000506 	br	20c68 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   20c54:	e0bfff17 	ldw	r2,-4(fp)
   20c58:	1090000c 	andi	r2,r2,16384
   20c5c:	10000226 	beq	r2,zero,20c68 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   20c60:	00bffd44 	movi	r2,-11
   20c64:	00000b06 	br	20c94 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20c68:	e0bffe17 	ldw	r2,-8(fp)
   20c6c:	10c00d17 	ldw	r3,52(r2)
   20c70:	e0bffe17 	ldw	r2,-8(fp)
   20c74:	10800c17 	ldw	r2,48(r2)
   20c78:	18800526 	beq	r3,r2,20c90 <altera_avalon_jtag_uart_close+0x54>
   20c7c:	e0bffe17 	ldw	r2,-8(fp)
   20c80:	10c00917 	ldw	r3,36(r2)
   20c84:	e0bffe17 	ldw	r2,-8(fp)
   20c88:	10800117 	ldw	r2,4(r2)
   20c8c:	18bff136 	bltu	r3,r2,20c54 <__alt_mem_ImagemB+0xfffe0c54>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   20c90:	0005883a 	mov	r2,zero
}
   20c94:	e037883a 	mov	sp,fp
   20c98:	df000017 	ldw	fp,0(sp)
   20c9c:	dec00104 	addi	sp,sp,4
   20ca0:	f800283a 	ret

00020ca4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   20ca4:	defffa04 	addi	sp,sp,-24
   20ca8:	df000515 	stw	fp,20(sp)
   20cac:	df000504 	addi	fp,sp,20
   20cb0:	e13ffd15 	stw	r4,-12(fp)
   20cb4:	e17ffe15 	stw	r5,-8(fp)
   20cb8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   20cbc:	00bff9c4 	movi	r2,-25
   20cc0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   20cc4:	e0bffe17 	ldw	r2,-8(fp)
   20cc8:	10da8060 	cmpeqi	r3,r2,27137
   20ccc:	1800031e 	bne	r3,zero,20cdc <altera_avalon_jtag_uart_ioctl+0x38>
   20cd0:	109a80a0 	cmpeqi	r2,r2,27138
   20cd4:	1000181e 	bne	r2,zero,20d38 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   20cd8:	00002906 	br	20d80 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   20cdc:	e0bffd17 	ldw	r2,-12(fp)
   20ce0:	10c00117 	ldw	r3,4(r2)
   20ce4:	00a00034 	movhi	r2,32768
   20ce8:	10bfffc4 	addi	r2,r2,-1
   20cec:	18802126 	beq	r3,r2,20d74 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   20cf0:	e0bfff17 	ldw	r2,-4(fp)
   20cf4:	10800017 	ldw	r2,0(r2)
   20cf8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   20cfc:	e0bffc17 	ldw	r2,-16(fp)
   20d00:	10800090 	cmplti	r2,r2,2
   20d04:	1000061e 	bne	r2,zero,20d20 <altera_avalon_jtag_uart_ioctl+0x7c>
   20d08:	e0fffc17 	ldw	r3,-16(fp)
   20d0c:	00a00034 	movhi	r2,32768
   20d10:	10bfffc4 	addi	r2,r2,-1
   20d14:	18800226 	beq	r3,r2,20d20 <altera_avalon_jtag_uart_ioctl+0x7c>
   20d18:	e0bffc17 	ldw	r2,-16(fp)
   20d1c:	00000206 	br	20d28 <altera_avalon_jtag_uart_ioctl+0x84>
   20d20:	00a00034 	movhi	r2,32768
   20d24:	10bfff84 	addi	r2,r2,-2
   20d28:	e0fffd17 	ldw	r3,-12(fp)
   20d2c:	18800115 	stw	r2,4(r3)
      rc = 0;
   20d30:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   20d34:	00000f06 	br	20d74 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   20d38:	e0bffd17 	ldw	r2,-12(fp)
   20d3c:	10c00117 	ldw	r3,4(r2)
   20d40:	00a00034 	movhi	r2,32768
   20d44:	10bfffc4 	addi	r2,r2,-1
   20d48:	18800c26 	beq	r3,r2,20d7c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   20d4c:	e0bffd17 	ldw	r2,-12(fp)
   20d50:	10c00917 	ldw	r3,36(r2)
   20d54:	e0bffd17 	ldw	r2,-12(fp)
   20d58:	10800117 	ldw	r2,4(r2)
   20d5c:	1885803a 	cmpltu	r2,r3,r2
   20d60:	10c03fcc 	andi	r3,r2,255
   20d64:	e0bfff17 	ldw	r2,-4(fp)
   20d68:	10c00015 	stw	r3,0(r2)
      rc = 0;
   20d6c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   20d70:	00000206 	br	20d7c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   20d74:	0001883a 	nop
   20d78:	00000106 	br	20d80 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   20d7c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   20d80:	e0bffb17 	ldw	r2,-20(fp)
}
   20d84:	e037883a 	mov	sp,fp
   20d88:	df000017 	ldw	fp,0(sp)
   20d8c:	dec00104 	addi	sp,sp,4
   20d90:	f800283a 	ret

00020d94 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   20d94:	defff304 	addi	sp,sp,-52
   20d98:	dfc00c15 	stw	ra,48(sp)
   20d9c:	df000b15 	stw	fp,44(sp)
   20da0:	df000b04 	addi	fp,sp,44
   20da4:	e13ffc15 	stw	r4,-16(fp)
   20da8:	e17ffd15 	stw	r5,-12(fp)
   20dac:	e1bffe15 	stw	r6,-8(fp)
   20db0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   20db4:	e0bffd17 	ldw	r2,-12(fp)
   20db8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   20dbc:	00004706 	br	20edc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   20dc0:	e0bffc17 	ldw	r2,-16(fp)
   20dc4:	10800a17 	ldw	r2,40(r2)
   20dc8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   20dcc:	e0bffc17 	ldw	r2,-16(fp)
   20dd0:	10800b17 	ldw	r2,44(r2)
   20dd4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   20dd8:	e0fff717 	ldw	r3,-36(fp)
   20ddc:	e0bff817 	ldw	r2,-32(fp)
   20de0:	18800536 	bltu	r3,r2,20df8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   20de4:	e0fff717 	ldw	r3,-36(fp)
   20de8:	e0bff817 	ldw	r2,-32(fp)
   20dec:	1885c83a 	sub	r2,r3,r2
   20df0:	e0bff615 	stw	r2,-40(fp)
   20df4:	00000406 	br	20e08 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   20df8:	00c20004 	movi	r3,2048
   20dfc:	e0bff817 	ldw	r2,-32(fp)
   20e00:	1885c83a 	sub	r2,r3,r2
   20e04:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   20e08:	e0bff617 	ldw	r2,-40(fp)
   20e0c:	10001e26 	beq	r2,zero,20e88 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   20e10:	e0fffe17 	ldw	r3,-8(fp)
   20e14:	e0bff617 	ldw	r2,-40(fp)
   20e18:	1880022e 	bgeu	r3,r2,20e24 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   20e1c:	e0bffe17 	ldw	r2,-8(fp)
   20e20:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   20e24:	e0bffc17 	ldw	r2,-16(fp)
   20e28:	10c00e04 	addi	r3,r2,56
   20e2c:	e0bff817 	ldw	r2,-32(fp)
   20e30:	1885883a 	add	r2,r3,r2
   20e34:	e1bff617 	ldw	r6,-40(fp)
   20e38:	100b883a 	mov	r5,r2
   20e3c:	e13ff517 	ldw	r4,-44(fp)
   20e40:	00227b40 	call	227b4 <memcpy>
      ptr   += n;
   20e44:	e0fff517 	ldw	r3,-44(fp)
   20e48:	e0bff617 	ldw	r2,-40(fp)
   20e4c:	1885883a 	add	r2,r3,r2
   20e50:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   20e54:	e0fffe17 	ldw	r3,-8(fp)
   20e58:	e0bff617 	ldw	r2,-40(fp)
   20e5c:	1885c83a 	sub	r2,r3,r2
   20e60:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20e64:	e0fff817 	ldw	r3,-32(fp)
   20e68:	e0bff617 	ldw	r2,-40(fp)
   20e6c:	1885883a 	add	r2,r3,r2
   20e70:	10c1ffcc 	andi	r3,r2,2047
   20e74:	e0bffc17 	ldw	r2,-16(fp)
   20e78:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   20e7c:	e0bffe17 	ldw	r2,-8(fp)
   20e80:	00bfcf16 	blt	zero,r2,20dc0 <__alt_mem_ImagemB+0xfffe0dc0>
   20e84:	00000106 	br	20e8c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   20e88:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   20e8c:	e0fff517 	ldw	r3,-44(fp)
   20e90:	e0bffd17 	ldw	r2,-12(fp)
   20e94:	1880141e 	bne	r3,r2,20ee8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   20e98:	e0bfff17 	ldw	r2,-4(fp)
   20e9c:	1090000c 	andi	r2,r2,16384
   20ea0:	1000131e 	bne	r2,zero,20ef0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   20ea4:	0001883a 	nop
   20ea8:	e0bffc17 	ldw	r2,-16(fp)
   20eac:	10c00a17 	ldw	r3,40(r2)
   20eb0:	e0bff717 	ldw	r2,-36(fp)
   20eb4:	1880051e 	bne	r3,r2,20ecc <altera_avalon_jtag_uart_read+0x138>
   20eb8:	e0bffc17 	ldw	r2,-16(fp)
   20ebc:	10c00917 	ldw	r3,36(r2)
   20ec0:	e0bffc17 	ldw	r2,-16(fp)
   20ec4:	10800117 	ldw	r2,4(r2)
   20ec8:	18bff736 	bltu	r3,r2,20ea8 <__alt_mem_ImagemB+0xfffe0ea8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   20ecc:	e0bffc17 	ldw	r2,-16(fp)
   20ed0:	10c00a17 	ldw	r3,40(r2)
   20ed4:	e0bff717 	ldw	r2,-36(fp)
   20ed8:	18800726 	beq	r3,r2,20ef8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   20edc:	e0bffe17 	ldw	r2,-8(fp)
   20ee0:	00bfb716 	blt	zero,r2,20dc0 <__alt_mem_ImagemB+0xfffe0dc0>
   20ee4:	00000506 	br	20efc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   20ee8:	0001883a 	nop
   20eec:	00000306 	br	20efc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   20ef0:	0001883a 	nop
   20ef4:	00000106 	br	20efc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   20ef8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   20efc:	e0fff517 	ldw	r3,-44(fp)
   20f00:	e0bffd17 	ldw	r2,-12(fp)
   20f04:	18801826 	beq	r3,r2,20f68 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20f08:	0005303a 	rdctl	r2,status
   20f0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20f10:	e0fffb17 	ldw	r3,-20(fp)
   20f14:	00bfff84 	movi	r2,-2
   20f18:	1884703a 	and	r2,r3,r2
   20f1c:	1001703a 	wrctl	status,r2
  
  return context;
   20f20:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   20f24:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20f28:	e0bffc17 	ldw	r2,-16(fp)
   20f2c:	10800817 	ldw	r2,32(r2)
   20f30:	10c00054 	ori	r3,r2,1
   20f34:	e0bffc17 	ldw	r2,-16(fp)
   20f38:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20f3c:	e0bffc17 	ldw	r2,-16(fp)
   20f40:	10800017 	ldw	r2,0(r2)
   20f44:	10800104 	addi	r2,r2,4
   20f48:	1007883a 	mov	r3,r2
   20f4c:	e0bffc17 	ldw	r2,-16(fp)
   20f50:	10800817 	ldw	r2,32(r2)
   20f54:	18800035 	stwio	r2,0(r3)
   20f58:	e0bffa17 	ldw	r2,-24(fp)
   20f5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20f60:	e0bff917 	ldw	r2,-28(fp)
   20f64:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   20f68:	e0fff517 	ldw	r3,-44(fp)
   20f6c:	e0bffd17 	ldw	r2,-12(fp)
   20f70:	18800426 	beq	r3,r2,20f84 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   20f74:	e0fff517 	ldw	r3,-44(fp)
   20f78:	e0bffd17 	ldw	r2,-12(fp)
   20f7c:	1885c83a 	sub	r2,r3,r2
   20f80:	00000606 	br	20f9c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   20f84:	e0bfff17 	ldw	r2,-4(fp)
   20f88:	1090000c 	andi	r2,r2,16384
   20f8c:	10000226 	beq	r2,zero,20f98 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   20f90:	00bffd44 	movi	r2,-11
   20f94:	00000106 	br	20f9c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   20f98:	00bffec4 	movi	r2,-5
}
   20f9c:	e037883a 	mov	sp,fp
   20fa0:	dfc00117 	ldw	ra,4(sp)
   20fa4:	df000017 	ldw	fp,0(sp)
   20fa8:	dec00204 	addi	sp,sp,8
   20fac:	f800283a 	ret

00020fb0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   20fb0:	defff304 	addi	sp,sp,-52
   20fb4:	dfc00c15 	stw	ra,48(sp)
   20fb8:	df000b15 	stw	fp,44(sp)
   20fbc:	df000b04 	addi	fp,sp,44
   20fc0:	e13ffc15 	stw	r4,-16(fp)
   20fc4:	e17ffd15 	stw	r5,-12(fp)
   20fc8:	e1bffe15 	stw	r6,-8(fp)
   20fcc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   20fd0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   20fd4:	e0bffd17 	ldw	r2,-12(fp)
   20fd8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   20fdc:	00003706 	br	210bc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   20fe0:	e0bffc17 	ldw	r2,-16(fp)
   20fe4:	10800c17 	ldw	r2,48(r2)
   20fe8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   20fec:	e0bffc17 	ldw	r2,-16(fp)
   20ff0:	10800d17 	ldw	r2,52(r2)
   20ff4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   20ff8:	e0fff917 	ldw	r3,-28(fp)
   20ffc:	e0bff517 	ldw	r2,-44(fp)
   21000:	1880062e 	bgeu	r3,r2,2101c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   21004:	e0fff517 	ldw	r3,-44(fp)
   21008:	e0bff917 	ldw	r2,-28(fp)
   2100c:	1885c83a 	sub	r2,r3,r2
   21010:	10bfffc4 	addi	r2,r2,-1
   21014:	e0bff615 	stw	r2,-40(fp)
   21018:	00000b06 	br	21048 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2101c:	e0bff517 	ldw	r2,-44(fp)
   21020:	10000526 	beq	r2,zero,21038 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   21024:	00c20004 	movi	r3,2048
   21028:	e0bff917 	ldw	r2,-28(fp)
   2102c:	1885c83a 	sub	r2,r3,r2
   21030:	e0bff615 	stw	r2,-40(fp)
   21034:	00000406 	br	21048 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   21038:	00c1ffc4 	movi	r3,2047
   2103c:	e0bff917 	ldw	r2,-28(fp)
   21040:	1885c83a 	sub	r2,r3,r2
   21044:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   21048:	e0bff617 	ldw	r2,-40(fp)
   2104c:	10001e26 	beq	r2,zero,210c8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   21050:	e0fffe17 	ldw	r3,-8(fp)
   21054:	e0bff617 	ldw	r2,-40(fp)
   21058:	1880022e 	bgeu	r3,r2,21064 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2105c:	e0bffe17 	ldw	r2,-8(fp)
   21060:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   21064:	e0bffc17 	ldw	r2,-16(fp)
   21068:	10c20e04 	addi	r3,r2,2104
   2106c:	e0bff917 	ldw	r2,-28(fp)
   21070:	1885883a 	add	r2,r3,r2
   21074:	e1bff617 	ldw	r6,-40(fp)
   21078:	e17ffd17 	ldw	r5,-12(fp)
   2107c:	1009883a 	mov	r4,r2
   21080:	00227b40 	call	227b4 <memcpy>
      ptr   += n;
   21084:	e0fffd17 	ldw	r3,-12(fp)
   21088:	e0bff617 	ldw	r2,-40(fp)
   2108c:	1885883a 	add	r2,r3,r2
   21090:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   21094:	e0fffe17 	ldw	r3,-8(fp)
   21098:	e0bff617 	ldw	r2,-40(fp)
   2109c:	1885c83a 	sub	r2,r3,r2
   210a0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   210a4:	e0fff917 	ldw	r3,-28(fp)
   210a8:	e0bff617 	ldw	r2,-40(fp)
   210ac:	1885883a 	add	r2,r3,r2
   210b0:	10c1ffcc 	andi	r3,r2,2047
   210b4:	e0bffc17 	ldw	r2,-16(fp)
   210b8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   210bc:	e0bffe17 	ldw	r2,-8(fp)
   210c0:	00bfc716 	blt	zero,r2,20fe0 <__alt_mem_ImagemB+0xfffe0fe0>
   210c4:	00000106 	br	210cc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   210c8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   210cc:	0005303a 	rdctl	r2,status
   210d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   210d4:	e0fffb17 	ldw	r3,-20(fp)
   210d8:	00bfff84 	movi	r2,-2
   210dc:	1884703a 	and	r2,r3,r2
   210e0:	1001703a 	wrctl	status,r2
  
  return context;
   210e4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   210e8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   210ec:	e0bffc17 	ldw	r2,-16(fp)
   210f0:	10800817 	ldw	r2,32(r2)
   210f4:	10c00094 	ori	r3,r2,2
   210f8:	e0bffc17 	ldw	r2,-16(fp)
   210fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21100:	e0bffc17 	ldw	r2,-16(fp)
   21104:	10800017 	ldw	r2,0(r2)
   21108:	10800104 	addi	r2,r2,4
   2110c:	1007883a 	mov	r3,r2
   21110:	e0bffc17 	ldw	r2,-16(fp)
   21114:	10800817 	ldw	r2,32(r2)
   21118:	18800035 	stwio	r2,0(r3)
   2111c:	e0bffa17 	ldw	r2,-24(fp)
   21120:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21124:	e0bff817 	ldw	r2,-32(fp)
   21128:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2112c:	e0bffe17 	ldw	r2,-8(fp)
   21130:	0080100e 	bge	zero,r2,21174 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   21134:	e0bfff17 	ldw	r2,-4(fp)
   21138:	1090000c 	andi	r2,r2,16384
   2113c:	1000101e 	bne	r2,zero,21180 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   21140:	0001883a 	nop
   21144:	e0bffc17 	ldw	r2,-16(fp)
   21148:	10c00d17 	ldw	r3,52(r2)
   2114c:	e0bff517 	ldw	r2,-44(fp)
   21150:	1880051e 	bne	r3,r2,21168 <altera_avalon_jtag_uart_write+0x1b8>
   21154:	e0bffc17 	ldw	r2,-16(fp)
   21158:	10c00917 	ldw	r3,36(r2)
   2115c:	e0bffc17 	ldw	r2,-16(fp)
   21160:	10800117 	ldw	r2,4(r2)
   21164:	18bff736 	bltu	r3,r2,21144 <__alt_mem_ImagemB+0xfffe1144>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   21168:	e0bffc17 	ldw	r2,-16(fp)
   2116c:	10800917 	ldw	r2,36(r2)
   21170:	1000051e 	bne	r2,zero,21188 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   21174:	e0bffe17 	ldw	r2,-8(fp)
   21178:	00bfd016 	blt	zero,r2,210bc <__alt_mem_ImagemB+0xfffe10bc>
   2117c:	00000306 	br	2118c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   21180:	0001883a 	nop
   21184:	00000106 	br	2118c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   21188:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2118c:	e0fffd17 	ldw	r3,-12(fp)
   21190:	e0bff717 	ldw	r2,-36(fp)
   21194:	18800426 	beq	r3,r2,211a8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   21198:	e0fffd17 	ldw	r3,-12(fp)
   2119c:	e0bff717 	ldw	r2,-36(fp)
   211a0:	1885c83a 	sub	r2,r3,r2
   211a4:	00000606 	br	211c0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   211a8:	e0bfff17 	ldw	r2,-4(fp)
   211ac:	1090000c 	andi	r2,r2,16384
   211b0:	10000226 	beq	r2,zero,211bc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   211b4:	00bffd44 	movi	r2,-11
   211b8:	00000106 	br	211c0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   211bc:	00bffec4 	movi	r2,-5
}
   211c0:	e037883a 	mov	sp,fp
   211c4:	dfc00117 	ldw	ra,4(sp)
   211c8:	df000017 	ldw	fp,0(sp)
   211cc:	dec00204 	addi	sp,sp,8
   211d0:	f800283a 	ret

000211d4 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   211d4:	defff404 	addi	sp,sp,-48
   211d8:	df000b15 	stw	fp,44(sp)
   211dc:	df000b04 	addi	fp,sp,44
   211e0:	e13ffc15 	stw	r4,-16(fp)
   211e4:	e17ffd15 	stw	r5,-12(fp)
   211e8:	e1bffe15 	stw	r6,-8(fp)
   211ec:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   211f0:	e0bffc17 	ldw	r2,-16(fp)
   211f4:	10800017 	ldw	r2,0(r2)
   211f8:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   211fc:	e0bff517 	ldw	r2,-44(fp)
   21200:	10800217 	ldw	r2,8(r2)
   21204:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   21208:	e0bff617 	ldw	r2,-40(fp)
   2120c:	10bfffc4 	addi	r2,r2,-1
   21210:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
   21214:	e0bffb17 	ldw	r2,-20(fp)
   21218:	10800044 	addi	r2,r2,1
   2121c:	e0bffb15 	stw	r2,-20(fp)
   21220:	e0bffb17 	ldw	r2,-20(fp)
   21224:	10800003 	ldbu	r2,0(r2)
   21228:	10803fcc 	andi	r2,r2,255
   2122c:	1080201c 	xori	r2,r2,128
   21230:	10bfe004 	addi	r2,r2,-128
   21234:	103ff71e 	bne	r2,zero,21214 <__alt_mem_ImagemB+0xfffe1214>
    ;

  return ptr - string;
   21238:	e0fffb17 	ldw	r3,-20(fp)
   2123c:	e0bff617 	ldw	r2,-40(fp)
   21240:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   21244:	10800044 	addi	r2,r2,1
   21248:	1007883a 	mov	r3,r2
   2124c:	e0bffd17 	ldw	r2,-12(fp)
   21250:	10c5883a 	add	r2,r2,r3
   21254:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
   21258:	d0a00204 	addi	r2,gp,-32760
   2125c:	1007883a 	mov	r3,r2
  r4 = (int)name;
   21260:	e0bffd17 	ldw	r2,-12(fp)
   21264:	1009883a 	mov	r4,r2
  r5 = flags;
   21268:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
   2126c:	e1bfff17 	ldw	r6,-4(fp)
   21270:	e0bffd17 	ldw	r2,-12(fp)
   21274:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   21278:	e0bff917 	ldw	r2,-28(fp)
   2127c:	10bfffc4 	addi	r2,r2,-1
   21280:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   21284:	e0bffa17 	ldw	r2,-24(fp)
   21288:	10800044 	addi	r2,r2,1
   2128c:	e0bffa15 	stw	r2,-24(fp)
   21290:	e0bffa17 	ldw	r2,-24(fp)
   21294:	10800003 	ldbu	r2,0(r2)
   21298:	10803fcc 	andi	r2,r2,255
   2129c:	1080201c 	xori	r2,r2,128
   212a0:	10bfe004 	addi	r2,r2,-128
   212a4:	103ff71e 	bne	r2,zero,21284 <__alt_mem_ImagemB+0xfffe1284>
    ;

  return ptr - string;
   212a8:	e1fffa17 	ldw	r7,-24(fp)
   212ac:	e0bff917 	ldw	r2,-28(fp)
   212b0:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   212b4:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
   212b8:	003da07a 	break	1

  handle = (void *)r2;
   212bc:	e0bff715 	stw	r2,-36(fp)
  error = r3;
   212c0:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
   212c4:	e0bff817 	ldw	r2,-32(fp)
   212c8:	1000031e 	bne	r2,zero,212d8 <alt_hostfs_open+0x104>
    fd->priv = handle;
   212cc:	e0bffc17 	ldw	r2,-16(fp)
   212d0:	e0fff717 	ldw	r3,-36(fp)
   212d4:	10c00115 	stw	r3,4(r2)

  return -error;
   212d8:	e0bff817 	ldw	r2,-32(fp)
   212dc:	0085c83a 	sub	r2,zero,r2
}
   212e0:	e037883a 	mov	sp,fp
   212e4:	df000017 	ldw	fp,0(sp)
   212e8:	dec00104 	addi	sp,sp,4
   212ec:	f800283a 	ret

000212f0 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   212f0:	defffd04 	addi	sp,sp,-12
   212f4:	df000215 	stw	fp,8(sp)
   212f8:	df000204 	addi	fp,sp,8
   212fc:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
   21300:	d0a00504 	addi	r2,gp,-32748
   21304:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   21308:	e0bfff17 	ldw	r2,-4(fp)
   2130c:	10800117 	ldw	r2,4(r2)
   21310:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
   21314:	003da07a 	break	1

  error = r3;
   21318:	e0fffe15 	stw	r3,-8(fp)

  return -error;
   2131c:	e0bffe17 	ldw	r2,-8(fp)
   21320:	0085c83a 	sub	r2,zero,r2
}
   21324:	e037883a 	mov	sp,fp
   21328:	df000017 	ldw	fp,0(sp)
   2132c:	dec00104 	addi	sp,sp,4
   21330:	f800283a 	ret

00021334 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   21334:	defffa04 	addi	sp,sp,-24
   21338:	df000515 	stw	fp,20(sp)
   2133c:	df000504 	addi	fp,sp,20
   21340:	e13ffd15 	stw	r4,-12(fp)
   21344:	e17ffe15 	stw	r5,-8(fp)
   21348:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
   2134c:	d0a00804 	addi	r2,gp,-32736
   21350:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   21354:	e0bffd17 	ldw	r2,-12(fp)
   21358:	10800117 	ldw	r2,4(r2)
   2135c:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
   21360:	e0bffe17 	ldw	r2,-8(fp)
   21364:	100b883a 	mov	r5,r2
  r6 = len;
   21368:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   2136c:	003da07a 	break	1

  rc = r2;
   21370:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   21374:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   21378:	e0bffc17 	ldw	r2,-16(fp)
   2137c:	10000326 	beq	r2,zero,2138c <alt_hostfs_read+0x58>
   21380:	e0bffc17 	ldw	r2,-16(fp)
   21384:	0085c83a 	sub	r2,zero,r2
   21388:	00000106 	br	21390 <alt_hostfs_read+0x5c>
   2138c:	e0bffb17 	ldw	r2,-20(fp)
}
   21390:	e037883a 	mov	sp,fp
   21394:	df000017 	ldw	fp,0(sp)
   21398:	dec00104 	addi	sp,sp,4
   2139c:	f800283a 	ret

000213a0 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   213a0:	defffa04 	addi	sp,sp,-24
   213a4:	df000515 	stw	fp,20(sp)
   213a8:	df000504 	addi	fp,sp,20
   213ac:	e13ffd15 	stw	r4,-12(fp)
   213b0:	e17ffe15 	stw	r5,-8(fp)
   213b4:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
   213b8:	d0a00b04 	addi	r2,gp,-32724
   213bc:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   213c0:	e0bffd17 	ldw	r2,-12(fp)
   213c4:	10800117 	ldw	r2,4(r2)
   213c8:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
   213cc:	e0bffe17 	ldw	r2,-8(fp)
   213d0:	100b883a 	mov	r5,r2
  r6 = len;
   213d4:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   213d8:	003da07a 	break	1

  rc = r2;
   213dc:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   213e0:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   213e4:	e0bffc17 	ldw	r2,-16(fp)
   213e8:	10000326 	beq	r2,zero,213f8 <alt_hostfs_write+0x58>
   213ec:	e0bffc17 	ldw	r2,-16(fp)
   213f0:	0085c83a 	sub	r2,zero,r2
   213f4:	00000106 	br	213fc <alt_hostfs_write+0x5c>
   213f8:	e0bffb17 	ldw	r2,-20(fp)
}
   213fc:	e037883a 	mov	sp,fp
   21400:	df000017 	ldw	fp,0(sp)
   21404:	dec00104 	addi	sp,sp,4
   21408:	f800283a 	ret

0002140c <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   2140c:	defffa04 	addi	sp,sp,-24
   21410:	df000515 	stw	fp,20(sp)
   21414:	df000504 	addi	fp,sp,20
   21418:	e13ffd15 	stw	r4,-12(fp)
   2141c:	e17ffe15 	stw	r5,-8(fp)
   21420:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
   21424:	d0a00e04 	addi	r2,gp,-32712
   21428:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   2142c:	e0bffd17 	ldw	r2,-12(fp)
   21430:	10800117 	ldw	r2,4(r2)
   21434:	1009883a 	mov	r4,r2
  r5 = ptr;
   21438:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
   2143c:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   21440:	003da07a 	break	1

  rc = r2;
   21444:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   21448:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   2144c:	e0bffc17 	ldw	r2,-16(fp)
   21450:	10000326 	beq	r2,zero,21460 <alt_hostfs_seek+0x54>
   21454:	e0bffc17 	ldw	r2,-16(fp)
   21458:	0085c83a 	sub	r2,zero,r2
   2145c:	00000106 	br	21464 <alt_hostfs_seek+0x58>
   21460:	e0bffb17 	ldw	r2,-20(fp)
}
   21464:	e037883a 	mov	sp,fp
   21468:	df000017 	ldw	fp,0(sp)
   2146c:	dec00104 	addi	sp,sp,4
   21470:	f800283a 	ret

00021474 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   21474:	deffe904 	addi	sp,sp,-92
   21478:	df001615 	stw	fp,88(sp)
   2147c:	df001604 	addi	fp,sp,88
   21480:	e13ffe15 	stw	r4,-8(fp)
   21484:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
   21488:	d0a01104 	addi	r2,gp,-32700
   2148c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   21490:	e0bffe17 	ldw	r2,-8(fp)
   21494:	10800117 	ldw	r2,4(r2)
   21498:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
   2149c:	e0bfee04 	addi	r2,fp,-72
   214a0:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
   214a4:	003da07a 	break	1

  rc = r2;
   214a8:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
   214ac:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
   214b0:	e0bfec17 	ldw	r2,-80(fp)
   214b4:	1000621e 	bne	r2,zero,21640 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   214b8:	e0bfee04 	addi	r2,fp,-72
   214bc:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   214c0:	e0bfea17 	ldw	r2,-88(fp)
   214c4:	10801004 	addi	r2,r2,64
   214c8:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
   214cc:	00001606 	br	21528 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   214d0:	e0bfea17 	ldw	r2,-88(fp)
   214d4:	10800017 	ldw	r2,0(r2)
   214d8:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   214dc:	e0bfea17 	ldw	r2,-88(fp)
   214e0:	10800017 	ldw	r2,0(r2)
   214e4:	10803fec 	andhi	r2,r2,255
   214e8:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   214ec:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   214f0:	e0bfea17 	ldw	r2,-88(fp)
   214f4:	10800017 	ldw	r2,0(r2)
   214f8:	10bfc00c 	andi	r2,r2,65280
   214fc:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   21500:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   21504:	e0bfea17 	ldw	r2,-88(fp)
   21508:	10800017 	ldw	r2,0(r2)
   2150c:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   21510:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   21514:	e0bfea17 	ldw	r2,-88(fp)
   21518:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   2151c:	e0bfea17 	ldw	r2,-88(fp)
   21520:	10800104 	addi	r2,r2,4
   21524:	e0bfea15 	stw	r2,-88(fp)
   21528:	e0ffea17 	ldw	r3,-88(fp)
   2152c:	e0bfed17 	ldw	r2,-76(fp)
   21530:	18bfe736 	bltu	r3,r2,214d0 <__alt_mem_ImagemB+0xfffe14d0>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   21534:	e0bfff17 	ldw	r2,-4(fp)
   21538:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   2153c:	e0bfea17 	ldw	r2,-88(fp)
   21540:	10800f04 	addi	r2,r2,60
   21544:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
   21548:	00000506 	br	21560 <alt_hostfs_fstat+0xec>
      *ptr = 0;
   2154c:	e0bfea17 	ldw	r2,-88(fp)
   21550:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   21554:	e0bfea17 	ldw	r2,-88(fp)
   21558:	10800104 	addi	r2,r2,4
   2155c:	e0bfea15 	stw	r2,-88(fp)
   21560:	e0ffea17 	ldw	r3,-88(fp)
   21564:	e0bfed17 	ldw	r2,-76(fp)
   21568:	18bff836 	bltu	r3,r2,2154c <__alt_mem_ImagemB+0xfffe154c>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   2156c:	e0bfee17 	ldw	r2,-72(fp)
   21570:	1007883a 	mov	r3,r2
   21574:	e0bfff17 	ldw	r2,-4(fp)
   21578:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   2157c:	e0bfef17 	ldw	r2,-68(fp)
   21580:	1007883a 	mov	r3,r2
   21584:	e0bfff17 	ldw	r2,-4(fp)
   21588:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   2158c:	e0fff017 	ldw	r3,-64(fp)
   21590:	e0bfff17 	ldw	r2,-4(fp)
   21594:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   21598:	e0bff117 	ldw	r2,-60(fp)
   2159c:	1007883a 	mov	r3,r2
   215a0:	e0bfff17 	ldw	r2,-4(fp)
   215a4:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   215a8:	e0bff217 	ldw	r2,-56(fp)
   215ac:	1007883a 	mov	r3,r2
   215b0:	e0bfff17 	ldw	r2,-4(fp)
   215b4:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   215b8:	e0bff317 	ldw	r2,-52(fp)
   215bc:	1007883a 	mov	r3,r2
   215c0:	e0bfff17 	ldw	r2,-4(fp)
   215c4:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   215c8:	e0bff417 	ldw	r2,-48(fp)
   215cc:	1007883a 	mov	r3,r2
   215d0:	e0bfff17 	ldw	r2,-4(fp)
   215d4:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   215d8:	e0bff617 	ldw	r2,-40(fp)
   215dc:	1007883a 	mov	r3,r2
   215e0:	e0bfff17 	ldw	r2,-4(fp)
   215e4:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   215e8:	e0bffb17 	ldw	r2,-20(fp)
   215ec:	1007883a 	mov	r3,r2
   215f0:	e0bfff17 	ldw	r2,-4(fp)
   215f4:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   215f8:	e0bffc17 	ldw	r2,-16(fp)
   215fc:	1007883a 	mov	r3,r2
   21600:	e0bfff17 	ldw	r2,-4(fp)
   21604:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   21608:	e0bffd17 	ldw	r2,-12(fp)
   2160c:	1007883a 	mov	r3,r2
   21610:	e0bfff17 	ldw	r2,-4(fp)
   21614:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   21618:	e0bff817 	ldw	r2,-32(fp)
   2161c:	1007883a 	mov	r3,r2
   21620:	e0bfff17 	ldw	r2,-4(fp)
   21624:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   21628:	e0bffa17 	ldw	r2,-24(fp)
   2162c:	1007883a 	mov	r3,r2
   21630:	e0bfff17 	ldw	r2,-4(fp)
   21634:	10c00c15 	stw	r3,48(r2)

    return rc;
   21638:	e0bfeb17 	ldw	r2,-84(fp)
   2163c:	00000206 	br	21648 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
   21640:	e0bfec17 	ldw	r2,-80(fp)
   21644:	0085c83a 	sub	r2,zero,r2
}
   21648:	e037883a 	mov	sp,fp
   2164c:	df000017 	ldw	fp,0(sp)
   21650:	dec00104 	addi	sp,sp,4
   21654:	f800283a 	ret

00021658 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   21658:	defff504 	addi	sp,sp,-44
   2165c:	df000a15 	stw	fp,40(sp)
   21660:	df000a04 	addi	fp,sp,40
   21664:	e13ffc15 	stw	r4,-16(fp)
   21668:	e17ffd15 	stw	r5,-12(fp)
   2166c:	e1bffe15 	stw	r6,-8(fp)
   21670:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   21674:	e03ff615 	stw	zero,-40(fp)
   21678:	d0a5d817 	ldw	r2,-26784(gp)
  
  if (alt_ticks_per_second ())
   2167c:	10003c26 	beq	r2,zero,21770 <alt_alarm_start+0x118>
  {
    if (alarm)
   21680:	e0bffc17 	ldw	r2,-16(fp)
   21684:	10003826 	beq	r2,zero,21768 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   21688:	e0bffc17 	ldw	r2,-16(fp)
   2168c:	e0fffe17 	ldw	r3,-8(fp)
   21690:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   21694:	e0bffc17 	ldw	r2,-16(fp)
   21698:	e0ffff17 	ldw	r3,-4(fp)
   2169c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   216a0:	0005303a 	rdctl	r2,status
   216a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   216a8:	e0fff917 	ldw	r3,-28(fp)
   216ac:	00bfff84 	movi	r2,-2
   216b0:	1884703a 	and	r2,r3,r2
   216b4:	1001703a 	wrctl	status,r2
  
  return context;
   216b8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   216bc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   216c0:	d0a5d917 	ldw	r2,-26780(gp)
      
      current_nticks = alt_nticks();
   216c4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   216c8:	e0fffd17 	ldw	r3,-12(fp)
   216cc:	e0bff617 	ldw	r2,-40(fp)
   216d0:	1885883a 	add	r2,r3,r2
   216d4:	10c00044 	addi	r3,r2,1
   216d8:	e0bffc17 	ldw	r2,-16(fp)
   216dc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   216e0:	e0bffc17 	ldw	r2,-16(fp)
   216e4:	10c00217 	ldw	r3,8(r2)
   216e8:	e0bff617 	ldw	r2,-40(fp)
   216ec:	1880042e 	bgeu	r3,r2,21700 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   216f0:	e0bffc17 	ldw	r2,-16(fp)
   216f4:	00c00044 	movi	r3,1
   216f8:	10c00405 	stb	r3,16(r2)
   216fc:	00000206 	br	21708 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   21700:	e0bffc17 	ldw	r2,-16(fp)
   21704:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   21708:	e0bffc17 	ldw	r2,-16(fp)
   2170c:	d0e01b04 	addi	r3,gp,-32660
   21710:	e0fffa15 	stw	r3,-24(fp)
   21714:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   21718:	e0bffb17 	ldw	r2,-20(fp)
   2171c:	e0fffa17 	ldw	r3,-24(fp)
   21720:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   21724:	e0bffa17 	ldw	r2,-24(fp)
   21728:	10c00017 	ldw	r3,0(r2)
   2172c:	e0bffb17 	ldw	r2,-20(fp)
   21730:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   21734:	e0bffa17 	ldw	r2,-24(fp)
   21738:	10800017 	ldw	r2,0(r2)
   2173c:	e0fffb17 	ldw	r3,-20(fp)
   21740:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   21744:	e0bffa17 	ldw	r2,-24(fp)
   21748:	e0fffb17 	ldw	r3,-20(fp)
   2174c:	10c00015 	stw	r3,0(r2)
   21750:	e0bff817 	ldw	r2,-32(fp)
   21754:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21758:	e0bff717 	ldw	r2,-36(fp)
   2175c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   21760:	0005883a 	mov	r2,zero
   21764:	00000306 	br	21774 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   21768:	00bffa84 	movi	r2,-22
   2176c:	00000106 	br	21774 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   21770:	00bfde84 	movi	r2,-134
  }
}
   21774:	e037883a 	mov	sp,fp
   21778:	df000017 	ldw	fp,0(sp)
   2177c:	dec00104 	addi	sp,sp,4
   21780:	f800283a 	ret

00021784 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21784:	defffe04 	addi	sp,sp,-8
   21788:	dfc00115 	stw	ra,4(sp)
   2178c:	df000015 	stw	fp,0(sp)
   21790:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21794:	d0a01917 	ldw	r2,-32668(gp)
   21798:	10000326 	beq	r2,zero,217a8 <alt_get_errno+0x24>
   2179c:	d0a01917 	ldw	r2,-32668(gp)
   217a0:	103ee83a 	callr	r2
   217a4:	00000106 	br	217ac <alt_get_errno+0x28>
   217a8:	d0a5db04 	addi	r2,gp,-26772
}
   217ac:	e037883a 	mov	sp,fp
   217b0:	dfc00117 	ldw	ra,4(sp)
   217b4:	df000017 	ldw	fp,0(sp)
   217b8:	dec00204 	addi	sp,sp,8
   217bc:	f800283a 	ret

000217c0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   217c0:	defffb04 	addi	sp,sp,-20
   217c4:	dfc00415 	stw	ra,16(sp)
   217c8:	df000315 	stw	fp,12(sp)
   217cc:	df000304 	addi	fp,sp,12
   217d0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   217d4:	e0bfff17 	ldw	r2,-4(fp)
   217d8:	10000816 	blt	r2,zero,217fc <close+0x3c>
   217dc:	01400304 	movi	r5,12
   217e0:	e13fff17 	ldw	r4,-4(fp)
   217e4:	002051c0 	call	2051c <__mulsi3>
   217e8:	1007883a 	mov	r3,r2
   217ec:	008000b4 	movhi	r2,2
   217f0:	108f5304 	addi	r2,r2,15692
   217f4:	1885883a 	add	r2,r3,r2
   217f8:	00000106 	br	21800 <close+0x40>
   217fc:	0005883a 	mov	r2,zero
   21800:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   21804:	e0bffd17 	ldw	r2,-12(fp)
   21808:	10001926 	beq	r2,zero,21870 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2180c:	e0bffd17 	ldw	r2,-12(fp)
   21810:	10800017 	ldw	r2,0(r2)
   21814:	10800417 	ldw	r2,16(r2)
   21818:	10000626 	beq	r2,zero,21834 <close+0x74>
   2181c:	e0bffd17 	ldw	r2,-12(fp)
   21820:	10800017 	ldw	r2,0(r2)
   21824:	10800417 	ldw	r2,16(r2)
   21828:	e13ffd17 	ldw	r4,-12(fp)
   2182c:	103ee83a 	callr	r2
   21830:	00000106 	br	21838 <close+0x78>
   21834:	0005883a 	mov	r2,zero
   21838:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2183c:	e13fff17 	ldw	r4,-4(fp)
   21840:	00221a80 	call	221a8 <alt_release_fd>
    if (rval < 0)
   21844:	e0bffe17 	ldw	r2,-8(fp)
   21848:	1000070e 	bge	r2,zero,21868 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   2184c:	00217840 	call	21784 <alt_get_errno>
   21850:	1007883a 	mov	r3,r2
   21854:	e0bffe17 	ldw	r2,-8(fp)
   21858:	0085c83a 	sub	r2,zero,r2
   2185c:	18800015 	stw	r2,0(r3)
      return -1;
   21860:	00bfffc4 	movi	r2,-1
   21864:	00000706 	br	21884 <close+0xc4>
    }
    return 0;
   21868:	0005883a 	mov	r2,zero
   2186c:	00000506 	br	21884 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   21870:	00217840 	call	21784 <alt_get_errno>
   21874:	1007883a 	mov	r3,r2
   21878:	00801444 	movi	r2,81
   2187c:	18800015 	stw	r2,0(r3)
    return -1;
   21880:	00bfffc4 	movi	r2,-1
  }
}
   21884:	e037883a 	mov	sp,fp
   21888:	dfc00117 	ldw	ra,4(sp)
   2188c:	df000017 	ldw	fp,0(sp)
   21890:	dec00204 	addi	sp,sp,8
   21894:	f800283a 	ret

00021898 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   21898:	deffff04 	addi	sp,sp,-4
   2189c:	df000015 	stw	fp,0(sp)
   218a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   218a4:	0001883a 	nop
   218a8:	e037883a 	mov	sp,fp
   218ac:	df000017 	ldw	fp,0(sp)
   218b0:	dec00104 	addi	sp,sp,4
   218b4:	f800283a 	ret

000218b8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   218b8:	defffc04 	addi	sp,sp,-16
   218bc:	df000315 	stw	fp,12(sp)
   218c0:	df000304 	addi	fp,sp,12
   218c4:	e13ffd15 	stw	r4,-12(fp)
   218c8:	e17ffe15 	stw	r5,-8(fp)
   218cc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   218d0:	e0bfff17 	ldw	r2,-4(fp)
}
   218d4:	e037883a 	mov	sp,fp
   218d8:	df000017 	ldw	fp,0(sp)
   218dc:	dec00104 	addi	sp,sp,4
   218e0:	f800283a 	ret

000218e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   218e4:	defffe04 	addi	sp,sp,-8
   218e8:	dfc00115 	stw	ra,4(sp)
   218ec:	df000015 	stw	fp,0(sp)
   218f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   218f4:	d0a01917 	ldw	r2,-32668(gp)
   218f8:	10000326 	beq	r2,zero,21908 <alt_get_errno+0x24>
   218fc:	d0a01917 	ldw	r2,-32668(gp)
   21900:	103ee83a 	callr	r2
   21904:	00000106 	br	2190c <alt_get_errno+0x28>
   21908:	d0a5db04 	addi	r2,gp,-26772
}
   2190c:	e037883a 	mov	sp,fp
   21910:	dfc00117 	ldw	ra,4(sp)
   21914:	df000017 	ldw	fp,0(sp)
   21918:	dec00204 	addi	sp,sp,8
   2191c:	f800283a 	ret

00021920 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   21920:	defffa04 	addi	sp,sp,-24
   21924:	dfc00515 	stw	ra,20(sp)
   21928:	df000415 	stw	fp,16(sp)
   2192c:	df000404 	addi	fp,sp,16
   21930:	e13ffe15 	stw	r4,-8(fp)
   21934:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   21938:	e0bffe17 	ldw	r2,-8(fp)
   2193c:	10000326 	beq	r2,zero,2194c <alt_dev_llist_insert+0x2c>
   21940:	e0bffe17 	ldw	r2,-8(fp)
   21944:	10800217 	ldw	r2,8(r2)
   21948:	1000061e 	bne	r2,zero,21964 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2194c:	00218e40 	call	218e4 <alt_get_errno>
   21950:	1007883a 	mov	r3,r2
   21954:	00800584 	movi	r2,22
   21958:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2195c:	00bffa84 	movi	r2,-22
   21960:	00001306 	br	219b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   21964:	e0bffe17 	ldw	r2,-8(fp)
   21968:	e0ffff17 	ldw	r3,-4(fp)
   2196c:	e0fffc15 	stw	r3,-16(fp)
   21970:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   21974:	e0bffd17 	ldw	r2,-12(fp)
   21978:	e0fffc17 	ldw	r3,-16(fp)
   2197c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   21980:	e0bffc17 	ldw	r2,-16(fp)
   21984:	10c00017 	ldw	r3,0(r2)
   21988:	e0bffd17 	ldw	r2,-12(fp)
   2198c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   21990:	e0bffc17 	ldw	r2,-16(fp)
   21994:	10800017 	ldw	r2,0(r2)
   21998:	e0fffd17 	ldw	r3,-12(fp)
   2199c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   219a0:	e0bffc17 	ldw	r2,-16(fp)
   219a4:	e0fffd17 	ldw	r3,-12(fp)
   219a8:	10c00015 	stw	r3,0(r2)

  return 0;  
   219ac:	0005883a 	mov	r2,zero
}
   219b0:	e037883a 	mov	sp,fp
   219b4:	dfc00117 	ldw	ra,4(sp)
   219b8:	df000017 	ldw	fp,0(sp)
   219bc:	dec00204 	addi	sp,sp,8
   219c0:	f800283a 	ret

000219c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   219c4:	defffd04 	addi	sp,sp,-12
   219c8:	dfc00215 	stw	ra,8(sp)
   219cc:	df000115 	stw	fp,4(sp)
   219d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   219d4:	008000b4 	movhi	r2,2
   219d8:	108b1704 	addi	r2,r2,11356
   219dc:	e0bfff15 	stw	r2,-4(fp)
   219e0:	00000606 	br	219fc <_do_ctors+0x38>
        (*ctor) (); 
   219e4:	e0bfff17 	ldw	r2,-4(fp)
   219e8:	10800017 	ldw	r2,0(r2)
   219ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   219f0:	e0bfff17 	ldw	r2,-4(fp)
   219f4:	10bfff04 	addi	r2,r2,-4
   219f8:	e0bfff15 	stw	r2,-4(fp)
   219fc:	e0ffff17 	ldw	r3,-4(fp)
   21a00:	008000b4 	movhi	r2,2
   21a04:	108b1804 	addi	r2,r2,11360
   21a08:	18bff62e 	bgeu	r3,r2,219e4 <__alt_mem_ImagemB+0xfffe19e4>
        (*ctor) (); 
}
   21a0c:	0001883a 	nop
   21a10:	e037883a 	mov	sp,fp
   21a14:	dfc00117 	ldw	ra,4(sp)
   21a18:	df000017 	ldw	fp,0(sp)
   21a1c:	dec00204 	addi	sp,sp,8
   21a20:	f800283a 	ret

00021a24 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   21a24:	defffd04 	addi	sp,sp,-12
   21a28:	dfc00215 	stw	ra,8(sp)
   21a2c:	df000115 	stw	fp,4(sp)
   21a30:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   21a34:	008000b4 	movhi	r2,2
   21a38:	108b1704 	addi	r2,r2,11356
   21a3c:	e0bfff15 	stw	r2,-4(fp)
   21a40:	00000606 	br	21a5c <_do_dtors+0x38>
        (*dtor) (); 
   21a44:	e0bfff17 	ldw	r2,-4(fp)
   21a48:	10800017 	ldw	r2,0(r2)
   21a4c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   21a50:	e0bfff17 	ldw	r2,-4(fp)
   21a54:	10bfff04 	addi	r2,r2,-4
   21a58:	e0bfff15 	stw	r2,-4(fp)
   21a5c:	e0ffff17 	ldw	r3,-4(fp)
   21a60:	008000b4 	movhi	r2,2
   21a64:	108b1804 	addi	r2,r2,11360
   21a68:	18bff62e 	bgeu	r3,r2,21a44 <__alt_mem_ImagemB+0xfffe1a44>
        (*dtor) (); 
}
   21a6c:	0001883a 	nop
   21a70:	e037883a 	mov	sp,fp
   21a74:	dfc00117 	ldw	ra,4(sp)
   21a78:	df000017 	ldw	fp,0(sp)
   21a7c:	dec00204 	addi	sp,sp,8
   21a80:	f800283a 	ret

00021a84 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   21a84:	defffc04 	addi	sp,sp,-16
   21a88:	df000315 	stw	fp,12(sp)
   21a8c:	df000304 	addi	fp,sp,12
   21a90:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   21a94:	e0bfff17 	ldw	r2,-4(fp)
   21a98:	10800217 	ldw	r2,8(r2)
   21a9c:	1000021e 	bne	r2,zero,21aa8 <alt_fs_reg+0x24>
  {
    return -ENODEV;
   21aa0:	00bffb44 	movi	r2,-19
   21aa4:	00001306 	br	21af4 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   21aa8:	e0bfff17 	ldw	r2,-4(fp)
   21aac:	d0e01404 	addi	r3,gp,-32688
   21ab0:	e0fffd15 	stw	r3,-12(fp)
   21ab4:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   21ab8:	e0bffe17 	ldw	r2,-8(fp)
   21abc:	e0fffd17 	ldw	r3,-12(fp)
   21ac0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   21ac4:	e0bffd17 	ldw	r2,-12(fp)
   21ac8:	10c00017 	ldw	r3,0(r2)
   21acc:	e0bffe17 	ldw	r2,-8(fp)
   21ad0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   21ad4:	e0bffd17 	ldw	r2,-12(fp)
   21ad8:	10800017 	ldw	r2,0(r2)
   21adc:	e0fffe17 	ldw	r3,-8(fp)
   21ae0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   21ae4:	e0bffd17 	ldw	r2,-12(fp)
   21ae8:	e0fffe17 	ldw	r3,-8(fp)
   21aec:	10c00015 	stw	r3,0(r2)

  return 0;
   21af0:	0005883a 	mov	r2,zero
} 
   21af4:	e037883a 	mov	sp,fp
   21af8:	df000017 	ldw	fp,0(sp)
   21afc:	dec00104 	addi	sp,sp,4
   21b00:	f800283a 	ret

00021b04 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   21b04:	deffff04 	addi	sp,sp,-4
   21b08:	df000015 	stw	fp,0(sp)
   21b0c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   21b10:	0001883a 	nop
   21b14:	e037883a 	mov	sp,fp
   21b18:	df000017 	ldw	fp,0(sp)
   21b1c:	dec00104 	addi	sp,sp,4
   21b20:	f800283a 	ret

00021b24 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   21b24:	defff904 	addi	sp,sp,-28
   21b28:	dfc00615 	stw	ra,24(sp)
   21b2c:	df000515 	stw	fp,20(sp)
   21b30:	df000504 	addi	fp,sp,20
   21b34:	e13ffc15 	stw	r4,-16(fp)
   21b38:	e17ffd15 	stw	r5,-12(fp)
   21b3c:	e1bffe15 	stw	r6,-8(fp)
   21b40:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   21b44:	e0800217 	ldw	r2,8(fp)
   21b48:	d8800015 	stw	r2,0(sp)
   21b4c:	e1ffff17 	ldw	r7,-4(fp)
   21b50:	e1bffe17 	ldw	r6,-8(fp)
   21b54:	e17ffd17 	ldw	r5,-12(fp)
   21b58:	e13ffc17 	ldw	r4,-16(fp)
   21b5c:	0021cd40 	call	21cd4 <alt_iic_isr_register>
}  
   21b60:	e037883a 	mov	sp,fp
   21b64:	dfc00117 	ldw	ra,4(sp)
   21b68:	df000017 	ldw	fp,0(sp)
   21b6c:	dec00204 	addi	sp,sp,8
   21b70:	f800283a 	ret

00021b74 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   21b74:	defff904 	addi	sp,sp,-28
   21b78:	df000615 	stw	fp,24(sp)
   21b7c:	df000604 	addi	fp,sp,24
   21b80:	e13ffe15 	stw	r4,-8(fp)
   21b84:	e17fff15 	stw	r5,-4(fp)
   21b88:	e0bfff17 	ldw	r2,-4(fp)
   21b8c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21b90:	0005303a 	rdctl	r2,status
   21b94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21b98:	e0fffb17 	ldw	r3,-20(fp)
   21b9c:	00bfff84 	movi	r2,-2
   21ba0:	1884703a 	and	r2,r3,r2
   21ba4:	1001703a 	wrctl	status,r2
  
  return context;
   21ba8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   21bac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   21bb0:	00c00044 	movi	r3,1
   21bb4:	e0bffa17 	ldw	r2,-24(fp)
   21bb8:	1884983a 	sll	r2,r3,r2
   21bbc:	1007883a 	mov	r3,r2
   21bc0:	d0a5d717 	ldw	r2,-26788(gp)
   21bc4:	1884b03a 	or	r2,r3,r2
   21bc8:	d0a5d715 	stw	r2,-26788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   21bcc:	d0a5d717 	ldw	r2,-26788(gp)
   21bd0:	100170fa 	wrctl	ienable,r2
   21bd4:	e0bffc17 	ldw	r2,-16(fp)
   21bd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21bdc:	e0bffd17 	ldw	r2,-12(fp)
   21be0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   21be4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   21be8:	0001883a 	nop
}
   21bec:	e037883a 	mov	sp,fp
   21bf0:	df000017 	ldw	fp,0(sp)
   21bf4:	dec00104 	addi	sp,sp,4
   21bf8:	f800283a 	ret

00021bfc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   21bfc:	defff904 	addi	sp,sp,-28
   21c00:	df000615 	stw	fp,24(sp)
   21c04:	df000604 	addi	fp,sp,24
   21c08:	e13ffe15 	stw	r4,-8(fp)
   21c0c:	e17fff15 	stw	r5,-4(fp)
   21c10:	e0bfff17 	ldw	r2,-4(fp)
   21c14:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21c18:	0005303a 	rdctl	r2,status
   21c1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21c20:	e0fffb17 	ldw	r3,-20(fp)
   21c24:	00bfff84 	movi	r2,-2
   21c28:	1884703a 	and	r2,r3,r2
   21c2c:	1001703a 	wrctl	status,r2
  
  return context;
   21c30:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   21c34:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   21c38:	00c00044 	movi	r3,1
   21c3c:	e0bffa17 	ldw	r2,-24(fp)
   21c40:	1884983a 	sll	r2,r3,r2
   21c44:	0084303a 	nor	r2,zero,r2
   21c48:	1007883a 	mov	r3,r2
   21c4c:	d0a5d717 	ldw	r2,-26788(gp)
   21c50:	1884703a 	and	r2,r3,r2
   21c54:	d0a5d715 	stw	r2,-26788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   21c58:	d0a5d717 	ldw	r2,-26788(gp)
   21c5c:	100170fa 	wrctl	ienable,r2
   21c60:	e0bffc17 	ldw	r2,-16(fp)
   21c64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21c68:	e0bffd17 	ldw	r2,-12(fp)
   21c6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   21c70:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   21c74:	0001883a 	nop
}
   21c78:	e037883a 	mov	sp,fp
   21c7c:	df000017 	ldw	fp,0(sp)
   21c80:	dec00104 	addi	sp,sp,4
   21c84:	f800283a 	ret

00021c88 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   21c88:	defffc04 	addi	sp,sp,-16
   21c8c:	df000315 	stw	fp,12(sp)
   21c90:	df000304 	addi	fp,sp,12
   21c94:	e13ffe15 	stw	r4,-8(fp)
   21c98:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   21c9c:	000530fa 	rdctl	r2,ienable
   21ca0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   21ca4:	00c00044 	movi	r3,1
   21ca8:	e0bfff17 	ldw	r2,-4(fp)
   21cac:	1884983a 	sll	r2,r3,r2
   21cb0:	1007883a 	mov	r3,r2
   21cb4:	e0bffd17 	ldw	r2,-12(fp)
   21cb8:	1884703a 	and	r2,r3,r2
   21cbc:	1004c03a 	cmpne	r2,r2,zero
   21cc0:	10803fcc 	andi	r2,r2,255
}
   21cc4:	e037883a 	mov	sp,fp
   21cc8:	df000017 	ldw	fp,0(sp)
   21ccc:	dec00104 	addi	sp,sp,4
   21cd0:	f800283a 	ret

00021cd4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   21cd4:	defff504 	addi	sp,sp,-44
   21cd8:	dfc00a15 	stw	ra,40(sp)
   21cdc:	df000915 	stw	fp,36(sp)
   21ce0:	df000904 	addi	fp,sp,36
   21ce4:	e13ffc15 	stw	r4,-16(fp)
   21ce8:	e17ffd15 	stw	r5,-12(fp)
   21cec:	e1bffe15 	stw	r6,-8(fp)
   21cf0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   21cf4:	00bffa84 	movi	r2,-22
   21cf8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   21cfc:	e0bffd17 	ldw	r2,-12(fp)
   21d00:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   21d04:	e0bff817 	ldw	r2,-32(fp)
   21d08:	10800808 	cmpgei	r2,r2,32
   21d0c:	1000271e 	bne	r2,zero,21dac <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21d10:	0005303a 	rdctl	r2,status
   21d14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21d18:	e0fffb17 	ldw	r3,-20(fp)
   21d1c:	00bfff84 	movi	r2,-2
   21d20:	1884703a 	and	r2,r3,r2
   21d24:	1001703a 	wrctl	status,r2
  
  return context;
   21d28:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   21d2c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   21d30:	008000b4 	movhi	r2,2
   21d34:	10969804 	addi	r2,r2,23136
   21d38:	e0fff817 	ldw	r3,-32(fp)
   21d3c:	180690fa 	slli	r3,r3,3
   21d40:	10c5883a 	add	r2,r2,r3
   21d44:	e0fffe17 	ldw	r3,-8(fp)
   21d48:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   21d4c:	008000b4 	movhi	r2,2
   21d50:	10969804 	addi	r2,r2,23136
   21d54:	e0fff817 	ldw	r3,-32(fp)
   21d58:	180690fa 	slli	r3,r3,3
   21d5c:	10c5883a 	add	r2,r2,r3
   21d60:	10800104 	addi	r2,r2,4
   21d64:	e0ffff17 	ldw	r3,-4(fp)
   21d68:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   21d6c:	e0bffe17 	ldw	r2,-8(fp)
   21d70:	10000526 	beq	r2,zero,21d88 <alt_iic_isr_register+0xb4>
   21d74:	e0bff817 	ldw	r2,-32(fp)
   21d78:	100b883a 	mov	r5,r2
   21d7c:	e13ffc17 	ldw	r4,-16(fp)
   21d80:	0021b740 	call	21b74 <alt_ic_irq_enable>
   21d84:	00000406 	br	21d98 <alt_iic_isr_register+0xc4>
   21d88:	e0bff817 	ldw	r2,-32(fp)
   21d8c:	100b883a 	mov	r5,r2
   21d90:	e13ffc17 	ldw	r4,-16(fp)
   21d94:	0021bfc0 	call	21bfc <alt_ic_irq_disable>
   21d98:	e0bff715 	stw	r2,-36(fp)
   21d9c:	e0bffa17 	ldw	r2,-24(fp)
   21da0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21da4:	e0bff917 	ldw	r2,-28(fp)
   21da8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   21dac:	e0bff717 	ldw	r2,-36(fp)
}
   21db0:	e037883a 	mov	sp,fp
   21db4:	dfc00117 	ldw	ra,4(sp)
   21db8:	df000017 	ldw	fp,0(sp)
   21dbc:	dec00204 	addi	sp,sp,8
   21dc0:	f800283a 	ret

00021dc4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   21dc4:	defff804 	addi	sp,sp,-32
   21dc8:	dfc00715 	stw	ra,28(sp)
   21dcc:	df000615 	stw	fp,24(sp)
   21dd0:	dc000515 	stw	r16,20(sp)
   21dd4:	df000604 	addi	fp,sp,24
   21dd8:	e13ffb15 	stw	r4,-20(fp)
   21ddc:	e17ffc15 	stw	r5,-16(fp)
   21de0:	e1bffd15 	stw	r6,-12(fp)
   21de4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   21de8:	e1bffe17 	ldw	r6,-8(fp)
   21dec:	e17ffd17 	ldw	r5,-12(fp)
   21df0:	e13ffc17 	ldw	r4,-16(fp)
   21df4:	002204c0 	call	2204c <open>
   21df8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   21dfc:	e0bffa17 	ldw	r2,-24(fp)
   21e00:	10002216 	blt	r2,zero,21e8c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   21e04:	040000b4 	movhi	r16,2
   21e08:	840f5304 	addi	r16,r16,15692
   21e0c:	e0bffa17 	ldw	r2,-24(fp)
   21e10:	01400304 	movi	r5,12
   21e14:	1009883a 	mov	r4,r2
   21e18:	002051c0 	call	2051c <__mulsi3>
   21e1c:	8085883a 	add	r2,r16,r2
   21e20:	10c00017 	ldw	r3,0(r2)
   21e24:	e0bffb17 	ldw	r2,-20(fp)
   21e28:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   21e2c:	040000b4 	movhi	r16,2
   21e30:	840f5304 	addi	r16,r16,15692
   21e34:	e0bffa17 	ldw	r2,-24(fp)
   21e38:	01400304 	movi	r5,12
   21e3c:	1009883a 	mov	r4,r2
   21e40:	002051c0 	call	2051c <__mulsi3>
   21e44:	8085883a 	add	r2,r16,r2
   21e48:	10800104 	addi	r2,r2,4
   21e4c:	10c00017 	ldw	r3,0(r2)
   21e50:	e0bffb17 	ldw	r2,-20(fp)
   21e54:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   21e58:	040000b4 	movhi	r16,2
   21e5c:	840f5304 	addi	r16,r16,15692
   21e60:	e0bffa17 	ldw	r2,-24(fp)
   21e64:	01400304 	movi	r5,12
   21e68:	1009883a 	mov	r4,r2
   21e6c:	002051c0 	call	2051c <__mulsi3>
   21e70:	8085883a 	add	r2,r16,r2
   21e74:	10800204 	addi	r2,r2,8
   21e78:	10c00017 	ldw	r3,0(r2)
   21e7c:	e0bffb17 	ldw	r2,-20(fp)
   21e80:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   21e84:	e13ffa17 	ldw	r4,-24(fp)
   21e88:	00221a80 	call	221a8 <alt_release_fd>
  }
} 
   21e8c:	0001883a 	nop
   21e90:	e6ffff04 	addi	sp,fp,-4
   21e94:	dfc00217 	ldw	ra,8(sp)
   21e98:	df000117 	ldw	fp,4(sp)
   21e9c:	dc000017 	ldw	r16,0(sp)
   21ea0:	dec00304 	addi	sp,sp,12
   21ea4:	f800283a 	ret

00021ea8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   21ea8:	defffb04 	addi	sp,sp,-20
   21eac:	dfc00415 	stw	ra,16(sp)
   21eb0:	df000315 	stw	fp,12(sp)
   21eb4:	df000304 	addi	fp,sp,12
   21eb8:	e13ffd15 	stw	r4,-12(fp)
   21ebc:	e17ffe15 	stw	r5,-8(fp)
   21ec0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   21ec4:	01c07fc4 	movi	r7,511
   21ec8:	01800044 	movi	r6,1
   21ecc:	e17ffd17 	ldw	r5,-12(fp)
   21ed0:	010000b4 	movhi	r4,2
   21ed4:	210f5604 	addi	r4,r4,15704
   21ed8:	0021dc40 	call	21dc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   21edc:	01c07fc4 	movi	r7,511
   21ee0:	000d883a 	mov	r6,zero
   21ee4:	e17ffe17 	ldw	r5,-8(fp)
   21ee8:	010000b4 	movhi	r4,2
   21eec:	210f5304 	addi	r4,r4,15692
   21ef0:	0021dc40 	call	21dc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   21ef4:	01c07fc4 	movi	r7,511
   21ef8:	01800044 	movi	r6,1
   21efc:	e17fff17 	ldw	r5,-4(fp)
   21f00:	010000b4 	movhi	r4,2
   21f04:	210f5904 	addi	r4,r4,15716
   21f08:	0021dc40 	call	21dc4 <alt_open_fd>
}  
   21f0c:	0001883a 	nop
   21f10:	e037883a 	mov	sp,fp
   21f14:	dfc00117 	ldw	ra,4(sp)
   21f18:	df000017 	ldw	fp,0(sp)
   21f1c:	dec00204 	addi	sp,sp,8
   21f20:	f800283a 	ret

00021f24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21f24:	defffe04 	addi	sp,sp,-8
   21f28:	dfc00115 	stw	ra,4(sp)
   21f2c:	df000015 	stw	fp,0(sp)
   21f30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21f34:	d0a01917 	ldw	r2,-32668(gp)
   21f38:	10000326 	beq	r2,zero,21f48 <alt_get_errno+0x24>
   21f3c:	d0a01917 	ldw	r2,-32668(gp)
   21f40:	103ee83a 	callr	r2
   21f44:	00000106 	br	21f4c <alt_get_errno+0x28>
   21f48:	d0a5db04 	addi	r2,gp,-26772
}
   21f4c:	e037883a 	mov	sp,fp
   21f50:	dfc00117 	ldw	ra,4(sp)
   21f54:	df000017 	ldw	fp,0(sp)
   21f58:	dec00204 	addi	sp,sp,8
   21f5c:	f800283a 	ret

00021f60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   21f60:	defffb04 	addi	sp,sp,-20
   21f64:	dfc00415 	stw	ra,16(sp)
   21f68:	df000315 	stw	fp,12(sp)
   21f6c:	dc000215 	stw	r16,8(sp)
   21f70:	df000304 	addi	fp,sp,12
   21f74:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   21f78:	e0bffe17 	ldw	r2,-8(fp)
   21f7c:	10800217 	ldw	r2,8(r2)
   21f80:	10d00034 	orhi	r3,r2,16384
   21f84:	e0bffe17 	ldw	r2,-8(fp)
   21f88:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   21f8c:	e03ffd15 	stw	zero,-12(fp)
   21f90:	00002306 	br	22020 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21f94:	040000b4 	movhi	r16,2
   21f98:	840f5304 	addi	r16,r16,15692
   21f9c:	e0bffd17 	ldw	r2,-12(fp)
   21fa0:	01400304 	movi	r5,12
   21fa4:	1009883a 	mov	r4,r2
   21fa8:	002051c0 	call	2051c <__mulsi3>
   21fac:	8085883a 	add	r2,r16,r2
   21fb0:	10c00017 	ldw	r3,0(r2)
   21fb4:	e0bffe17 	ldw	r2,-8(fp)
   21fb8:	10800017 	ldw	r2,0(r2)
   21fbc:	1880151e 	bne	r3,r2,22014 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   21fc0:	040000b4 	movhi	r16,2
   21fc4:	840f5304 	addi	r16,r16,15692
   21fc8:	e0bffd17 	ldw	r2,-12(fp)
   21fcc:	01400304 	movi	r5,12
   21fd0:	1009883a 	mov	r4,r2
   21fd4:	002051c0 	call	2051c <__mulsi3>
   21fd8:	8085883a 	add	r2,r16,r2
   21fdc:	10800204 	addi	r2,r2,8
   21fe0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21fe4:	10000b0e 	bge	r2,zero,22014 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   21fe8:	01400304 	movi	r5,12
   21fec:	e13ffd17 	ldw	r4,-12(fp)
   21ff0:	002051c0 	call	2051c <__mulsi3>
   21ff4:	1007883a 	mov	r3,r2
   21ff8:	008000b4 	movhi	r2,2
   21ffc:	108f5304 	addi	r2,r2,15692
   22000:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22004:	e0bffe17 	ldw	r2,-8(fp)
   22008:	18800226 	beq	r3,r2,22014 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2200c:	00bffcc4 	movi	r2,-13
   22010:	00000806 	br	22034 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22014:	e0bffd17 	ldw	r2,-12(fp)
   22018:	10800044 	addi	r2,r2,1
   2201c:	e0bffd15 	stw	r2,-12(fp)
   22020:	d0a01817 	ldw	r2,-32672(gp)
   22024:	1007883a 	mov	r3,r2
   22028:	e0bffd17 	ldw	r2,-12(fp)
   2202c:	18bfd92e 	bgeu	r3,r2,21f94 <__alt_mem_ImagemB+0xfffe1f94>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   22030:	0005883a 	mov	r2,zero
}
   22034:	e6ffff04 	addi	sp,fp,-4
   22038:	dfc00217 	ldw	ra,8(sp)
   2203c:	df000117 	ldw	fp,4(sp)
   22040:	dc000017 	ldw	r16,0(sp)
   22044:	dec00304 	addi	sp,sp,12
   22048:	f800283a 	ret

0002204c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2204c:	defff604 	addi	sp,sp,-40
   22050:	dfc00915 	stw	ra,36(sp)
   22054:	df000815 	stw	fp,32(sp)
   22058:	df000804 	addi	fp,sp,32
   2205c:	e13ffd15 	stw	r4,-12(fp)
   22060:	e17ffe15 	stw	r5,-8(fp)
   22064:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   22068:	00bfffc4 	movi	r2,-1
   2206c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   22070:	00bffb44 	movi	r2,-19
   22074:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   22078:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2207c:	d1601604 	addi	r5,gp,-32680
   22080:	e13ffd17 	ldw	r4,-12(fp)
   22084:	00223f40 	call	223f4 <alt_find_dev>
   22088:	e0bff815 	stw	r2,-32(fp)
   2208c:	e0bff817 	ldw	r2,-32(fp)
   22090:	1000051e 	bne	r2,zero,220a8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   22094:	e13ffd17 	ldw	r4,-12(fp)
   22098:	00224840 	call	22484 <alt_find_file>
   2209c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   220a0:	00800044 	movi	r2,1
   220a4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   220a8:	e0bff817 	ldw	r2,-32(fp)
   220ac:	10002b26 	beq	r2,zero,2215c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   220b0:	e13ff817 	ldw	r4,-32(fp)
   220b4:	002258c0 	call	2258c <alt_get_fd>
   220b8:	e0bff915 	stw	r2,-28(fp)
   220bc:	e0bff917 	ldw	r2,-28(fp)
   220c0:	1000030e 	bge	r2,zero,220d0 <open+0x84>
    {
      status = index;
   220c4:	e0bff917 	ldw	r2,-28(fp)
   220c8:	e0bffa15 	stw	r2,-24(fp)
   220cc:	00002506 	br	22164 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   220d0:	01400304 	movi	r5,12
   220d4:	e13ff917 	ldw	r4,-28(fp)
   220d8:	002051c0 	call	2051c <__mulsi3>
   220dc:	1007883a 	mov	r3,r2
   220e0:	008000b4 	movhi	r2,2
   220e4:	108f5304 	addi	r2,r2,15692
   220e8:	1885883a 	add	r2,r3,r2
   220ec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   220f0:	e0fffe17 	ldw	r3,-8(fp)
   220f4:	00900034 	movhi	r2,16384
   220f8:	10bfffc4 	addi	r2,r2,-1
   220fc:	1886703a 	and	r3,r3,r2
   22100:	e0bffc17 	ldw	r2,-16(fp)
   22104:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   22108:	e0bffb17 	ldw	r2,-20(fp)
   2210c:	1000051e 	bne	r2,zero,22124 <open+0xd8>
   22110:	e13ffc17 	ldw	r4,-16(fp)
   22114:	0021f600 	call	21f60 <alt_file_locked>
   22118:	e0bffa15 	stw	r2,-24(fp)
   2211c:	e0bffa17 	ldw	r2,-24(fp)
   22120:	10001016 	blt	r2,zero,22164 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   22124:	e0bff817 	ldw	r2,-32(fp)
   22128:	10800317 	ldw	r2,12(r2)
   2212c:	10000826 	beq	r2,zero,22150 <open+0x104>
   22130:	e0bff817 	ldw	r2,-32(fp)
   22134:	10800317 	ldw	r2,12(r2)
   22138:	e1ffff17 	ldw	r7,-4(fp)
   2213c:	e1bffe17 	ldw	r6,-8(fp)
   22140:	e17ffd17 	ldw	r5,-12(fp)
   22144:	e13ffc17 	ldw	r4,-16(fp)
   22148:	103ee83a 	callr	r2
   2214c:	00000106 	br	22154 <open+0x108>
   22150:	0005883a 	mov	r2,zero
   22154:	e0bffa15 	stw	r2,-24(fp)
   22158:	00000206 	br	22164 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2215c:	00bffb44 	movi	r2,-19
   22160:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   22164:	e0bffa17 	ldw	r2,-24(fp)
   22168:	1000090e 	bge	r2,zero,22190 <open+0x144>
  {
    alt_release_fd (index);  
   2216c:	e13ff917 	ldw	r4,-28(fp)
   22170:	00221a80 	call	221a8 <alt_release_fd>
    ALT_ERRNO = -status;
   22174:	0021f240 	call	21f24 <alt_get_errno>
   22178:	1007883a 	mov	r3,r2
   2217c:	e0bffa17 	ldw	r2,-24(fp)
   22180:	0085c83a 	sub	r2,zero,r2
   22184:	18800015 	stw	r2,0(r3)
    return -1;
   22188:	00bfffc4 	movi	r2,-1
   2218c:	00000106 	br	22194 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   22190:	e0bff917 	ldw	r2,-28(fp)
}
   22194:	e037883a 	mov	sp,fp
   22198:	dfc00117 	ldw	ra,4(sp)
   2219c:	df000017 	ldw	fp,0(sp)
   221a0:	dec00204 	addi	sp,sp,8
   221a4:	f800283a 	ret

000221a8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   221a8:	defffc04 	addi	sp,sp,-16
   221ac:	dfc00315 	stw	ra,12(sp)
   221b0:	df000215 	stw	fp,8(sp)
   221b4:	dc000115 	stw	r16,4(sp)
   221b8:	df000204 	addi	fp,sp,8
   221bc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   221c0:	e0bffe17 	ldw	r2,-8(fp)
   221c4:	108000d0 	cmplti	r2,r2,3
   221c8:	1000111e 	bne	r2,zero,22210 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   221cc:	040000b4 	movhi	r16,2
   221d0:	840f5304 	addi	r16,r16,15692
   221d4:	e0bffe17 	ldw	r2,-8(fp)
   221d8:	01400304 	movi	r5,12
   221dc:	1009883a 	mov	r4,r2
   221e0:	002051c0 	call	2051c <__mulsi3>
   221e4:	8085883a 	add	r2,r16,r2
   221e8:	10800204 	addi	r2,r2,8
   221ec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   221f0:	040000b4 	movhi	r16,2
   221f4:	840f5304 	addi	r16,r16,15692
   221f8:	e0bffe17 	ldw	r2,-8(fp)
   221fc:	01400304 	movi	r5,12
   22200:	1009883a 	mov	r4,r2
   22204:	002051c0 	call	2051c <__mulsi3>
   22208:	8085883a 	add	r2,r16,r2
   2220c:	10000015 	stw	zero,0(r2)
  }
}
   22210:	0001883a 	nop
   22214:	e6ffff04 	addi	sp,fp,-4
   22218:	dfc00217 	ldw	ra,8(sp)
   2221c:	df000117 	ldw	fp,4(sp)
   22220:	dc000017 	ldw	r16,0(sp)
   22224:	dec00304 	addi	sp,sp,12
   22228:	f800283a 	ret

0002222c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2222c:	defffa04 	addi	sp,sp,-24
   22230:	df000515 	stw	fp,20(sp)
   22234:	df000504 	addi	fp,sp,20
   22238:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2223c:	0005303a 	rdctl	r2,status
   22240:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22244:	e0fffc17 	ldw	r3,-16(fp)
   22248:	00bfff84 	movi	r2,-2
   2224c:	1884703a 	and	r2,r3,r2
   22250:	1001703a 	wrctl	status,r2
  
  return context;
   22254:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   22258:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2225c:	e0bfff17 	ldw	r2,-4(fp)
   22260:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   22264:	e0bffd17 	ldw	r2,-12(fp)
   22268:	10800017 	ldw	r2,0(r2)
   2226c:	e0fffd17 	ldw	r3,-12(fp)
   22270:	18c00117 	ldw	r3,4(r3)
   22274:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   22278:	e0bffd17 	ldw	r2,-12(fp)
   2227c:	10800117 	ldw	r2,4(r2)
   22280:	e0fffd17 	ldw	r3,-12(fp)
   22284:	18c00017 	ldw	r3,0(r3)
   22288:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2228c:	e0bffd17 	ldw	r2,-12(fp)
   22290:	e0fffd17 	ldw	r3,-12(fp)
   22294:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   22298:	e0bffd17 	ldw	r2,-12(fp)
   2229c:	e0fffd17 	ldw	r3,-12(fp)
   222a0:	10c00015 	stw	r3,0(r2)
   222a4:	e0bffb17 	ldw	r2,-20(fp)
   222a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   222ac:	e0bffe17 	ldw	r2,-8(fp)
   222b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   222b4:	0001883a 	nop
   222b8:	e037883a 	mov	sp,fp
   222bc:	df000017 	ldw	fp,0(sp)
   222c0:	dec00104 	addi	sp,sp,4
   222c4:	f800283a 	ret

000222c8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   222c8:	defffb04 	addi	sp,sp,-20
   222cc:	dfc00415 	stw	ra,16(sp)
   222d0:	df000315 	stw	fp,12(sp)
   222d4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   222d8:	d0a01b17 	ldw	r2,-32660(gp)
   222dc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   222e0:	d0a5d917 	ldw	r2,-26780(gp)
   222e4:	10800044 	addi	r2,r2,1
   222e8:	d0a5d915 	stw	r2,-26780(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   222ec:	00002e06 	br	223a8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   222f0:	e0bffd17 	ldw	r2,-12(fp)
   222f4:	10800017 	ldw	r2,0(r2)
   222f8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   222fc:	e0bffd17 	ldw	r2,-12(fp)
   22300:	10800403 	ldbu	r2,16(r2)
   22304:	10803fcc 	andi	r2,r2,255
   22308:	10000426 	beq	r2,zero,2231c <alt_tick+0x54>
   2230c:	d0a5d917 	ldw	r2,-26780(gp)
   22310:	1000021e 	bne	r2,zero,2231c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   22314:	e0bffd17 	ldw	r2,-12(fp)
   22318:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2231c:	e0bffd17 	ldw	r2,-12(fp)
   22320:	10800217 	ldw	r2,8(r2)
   22324:	d0e5d917 	ldw	r3,-26780(gp)
   22328:	18801d36 	bltu	r3,r2,223a0 <alt_tick+0xd8>
   2232c:	e0bffd17 	ldw	r2,-12(fp)
   22330:	10800403 	ldbu	r2,16(r2)
   22334:	10803fcc 	andi	r2,r2,255
   22338:	1000191e 	bne	r2,zero,223a0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2233c:	e0bffd17 	ldw	r2,-12(fp)
   22340:	10800317 	ldw	r2,12(r2)
   22344:	e0fffd17 	ldw	r3,-12(fp)
   22348:	18c00517 	ldw	r3,20(r3)
   2234c:	1809883a 	mov	r4,r3
   22350:	103ee83a 	callr	r2
   22354:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   22358:	e0bfff17 	ldw	r2,-4(fp)
   2235c:	1000031e 	bne	r2,zero,2236c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   22360:	e13ffd17 	ldw	r4,-12(fp)
   22364:	002222c0 	call	2222c <alt_alarm_stop>
   22368:	00000d06 	br	223a0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2236c:	e0bffd17 	ldw	r2,-12(fp)
   22370:	10c00217 	ldw	r3,8(r2)
   22374:	e0bfff17 	ldw	r2,-4(fp)
   22378:	1887883a 	add	r3,r3,r2
   2237c:	e0bffd17 	ldw	r2,-12(fp)
   22380:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   22384:	e0bffd17 	ldw	r2,-12(fp)
   22388:	10c00217 	ldw	r3,8(r2)
   2238c:	d0a5d917 	ldw	r2,-26780(gp)
   22390:	1880032e 	bgeu	r3,r2,223a0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   22394:	e0bffd17 	ldw	r2,-12(fp)
   22398:	00c00044 	movi	r3,1
   2239c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   223a0:	e0bffe17 	ldw	r2,-8(fp)
   223a4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   223a8:	e0fffd17 	ldw	r3,-12(fp)
   223ac:	d0a01b04 	addi	r2,gp,-32660
   223b0:	18bfcf1e 	bne	r3,r2,222f0 <__alt_mem_ImagemB+0xfffe22f0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   223b4:	0001883a 	nop
}
   223b8:	0001883a 	nop
   223bc:	e037883a 	mov	sp,fp
   223c0:	dfc00117 	ldw	ra,4(sp)
   223c4:	df000017 	ldw	fp,0(sp)
   223c8:	dec00204 	addi	sp,sp,8
   223cc:	f800283a 	ret

000223d0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   223d0:	deffff04 	addi	sp,sp,-4
   223d4:	df000015 	stw	fp,0(sp)
   223d8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   223dc:	000170fa 	wrctl	ienable,zero
}
   223e0:	0001883a 	nop
   223e4:	e037883a 	mov	sp,fp
   223e8:	df000017 	ldw	fp,0(sp)
   223ec:	dec00104 	addi	sp,sp,4
   223f0:	f800283a 	ret

000223f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   223f4:	defffa04 	addi	sp,sp,-24
   223f8:	dfc00515 	stw	ra,20(sp)
   223fc:	df000415 	stw	fp,16(sp)
   22400:	df000404 	addi	fp,sp,16
   22404:	e13ffe15 	stw	r4,-8(fp)
   22408:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2240c:	e0bfff17 	ldw	r2,-4(fp)
   22410:	10800017 	ldw	r2,0(r2)
   22414:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   22418:	e13ffe17 	ldw	r4,-8(fp)
   2241c:	00228fc0 	call	228fc <strlen>
   22420:	10800044 	addi	r2,r2,1
   22424:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   22428:	00000d06 	br	22460 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2242c:	e0bffc17 	ldw	r2,-16(fp)
   22430:	10800217 	ldw	r2,8(r2)
   22434:	e0fffd17 	ldw	r3,-12(fp)
   22438:	180d883a 	mov	r6,r3
   2243c:	e17ffe17 	ldw	r5,-8(fp)
   22440:	1009883a 	mov	r4,r2
   22444:	00227380 	call	22738 <memcmp>
   22448:	1000021e 	bne	r2,zero,22454 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2244c:	e0bffc17 	ldw	r2,-16(fp)
   22450:	00000706 	br	22470 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   22454:	e0bffc17 	ldw	r2,-16(fp)
   22458:	10800017 	ldw	r2,0(r2)
   2245c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   22460:	e0fffc17 	ldw	r3,-16(fp)
   22464:	e0bfff17 	ldw	r2,-4(fp)
   22468:	18bff01e 	bne	r3,r2,2242c <__alt_mem_ImagemB+0xfffe242c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2246c:	0005883a 	mov	r2,zero
}
   22470:	e037883a 	mov	sp,fp
   22474:	dfc00117 	ldw	ra,4(sp)
   22478:	df000017 	ldw	fp,0(sp)
   2247c:	dec00204 	addi	sp,sp,8
   22480:	f800283a 	ret

00022484 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   22484:	defffb04 	addi	sp,sp,-20
   22488:	dfc00415 	stw	ra,16(sp)
   2248c:	df000315 	stw	fp,12(sp)
   22490:	df000304 	addi	fp,sp,12
   22494:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   22498:	d0a01417 	ldw	r2,-32688(gp)
   2249c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   224a0:	00003106 	br	22568 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   224a4:	e0bffd17 	ldw	r2,-12(fp)
   224a8:	10800217 	ldw	r2,8(r2)
   224ac:	1009883a 	mov	r4,r2
   224b0:	00228fc0 	call	228fc <strlen>
   224b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   224b8:	e0bffd17 	ldw	r2,-12(fp)
   224bc:	10c00217 	ldw	r3,8(r2)
   224c0:	e0bffe17 	ldw	r2,-8(fp)
   224c4:	10bfffc4 	addi	r2,r2,-1
   224c8:	1885883a 	add	r2,r3,r2
   224cc:	10800003 	ldbu	r2,0(r2)
   224d0:	10803fcc 	andi	r2,r2,255
   224d4:	1080201c 	xori	r2,r2,128
   224d8:	10bfe004 	addi	r2,r2,-128
   224dc:	10800bd8 	cmpnei	r2,r2,47
   224e0:	1000031e 	bne	r2,zero,224f0 <alt_find_file+0x6c>
    {
      len -= 1;
   224e4:	e0bffe17 	ldw	r2,-8(fp)
   224e8:	10bfffc4 	addi	r2,r2,-1
   224ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   224f0:	e0bffe17 	ldw	r2,-8(fp)
   224f4:	e0ffff17 	ldw	r3,-4(fp)
   224f8:	1885883a 	add	r2,r3,r2
   224fc:	10800003 	ldbu	r2,0(r2)
   22500:	10803fcc 	andi	r2,r2,255
   22504:	1080201c 	xori	r2,r2,128
   22508:	10bfe004 	addi	r2,r2,-128
   2250c:	10800be0 	cmpeqi	r2,r2,47
   22510:	1000081e 	bne	r2,zero,22534 <alt_find_file+0xb0>
   22514:	e0bffe17 	ldw	r2,-8(fp)
   22518:	e0ffff17 	ldw	r3,-4(fp)
   2251c:	1885883a 	add	r2,r3,r2
   22520:	10800003 	ldbu	r2,0(r2)
   22524:	10803fcc 	andi	r2,r2,255
   22528:	1080201c 	xori	r2,r2,128
   2252c:	10bfe004 	addi	r2,r2,-128
   22530:	10000a1e 	bne	r2,zero,2255c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   22534:	e0bffd17 	ldw	r2,-12(fp)
   22538:	10800217 	ldw	r2,8(r2)
   2253c:	e0fffe17 	ldw	r3,-8(fp)
   22540:	180d883a 	mov	r6,r3
   22544:	e17fff17 	ldw	r5,-4(fp)
   22548:	1009883a 	mov	r4,r2
   2254c:	00227380 	call	22738 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   22550:	1000021e 	bne	r2,zero,2255c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   22554:	e0bffd17 	ldw	r2,-12(fp)
   22558:	00000706 	br	22578 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   2255c:	e0bffd17 	ldw	r2,-12(fp)
   22560:	10800017 	ldw	r2,0(r2)
   22564:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   22568:	e0fffd17 	ldw	r3,-12(fp)
   2256c:	d0a01404 	addi	r2,gp,-32688
   22570:	18bfcc1e 	bne	r3,r2,224a4 <__alt_mem_ImagemB+0xfffe24a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   22574:	0005883a 	mov	r2,zero
}
   22578:	e037883a 	mov	sp,fp
   2257c:	dfc00117 	ldw	ra,4(sp)
   22580:	df000017 	ldw	fp,0(sp)
   22584:	dec00204 	addi	sp,sp,8
   22588:	f800283a 	ret

0002258c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2258c:	defffa04 	addi	sp,sp,-24
   22590:	dfc00515 	stw	ra,20(sp)
   22594:	df000415 	stw	fp,16(sp)
   22598:	dc000315 	stw	r16,12(sp)
   2259c:	df000404 	addi	fp,sp,16
   225a0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   225a4:	00bffa04 	movi	r2,-24
   225a8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   225ac:	e03ffc15 	stw	zero,-16(fp)
   225b0:	00001d06 	br	22628 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   225b4:	040000b4 	movhi	r16,2
   225b8:	840f5304 	addi	r16,r16,15692
   225bc:	e0bffc17 	ldw	r2,-16(fp)
   225c0:	01400304 	movi	r5,12
   225c4:	1009883a 	mov	r4,r2
   225c8:	002051c0 	call	2051c <__mulsi3>
   225cc:	8085883a 	add	r2,r16,r2
   225d0:	10800017 	ldw	r2,0(r2)
   225d4:	1000111e 	bne	r2,zero,2261c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   225d8:	040000b4 	movhi	r16,2
   225dc:	840f5304 	addi	r16,r16,15692
   225e0:	e0bffc17 	ldw	r2,-16(fp)
   225e4:	01400304 	movi	r5,12
   225e8:	1009883a 	mov	r4,r2
   225ec:	002051c0 	call	2051c <__mulsi3>
   225f0:	8085883a 	add	r2,r16,r2
   225f4:	e0fffe17 	ldw	r3,-8(fp)
   225f8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   225fc:	d0e01817 	ldw	r3,-32672(gp)
   22600:	e0bffc17 	ldw	r2,-16(fp)
   22604:	1880020e 	bge	r3,r2,22610 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   22608:	e0bffc17 	ldw	r2,-16(fp)
   2260c:	d0a01815 	stw	r2,-32672(gp)
      }
      rc = i;
   22610:	e0bffc17 	ldw	r2,-16(fp)
   22614:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   22618:	00000606 	br	22634 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2261c:	e0bffc17 	ldw	r2,-16(fp)
   22620:	10800044 	addi	r2,r2,1
   22624:	e0bffc15 	stw	r2,-16(fp)
   22628:	e0bffc17 	ldw	r2,-16(fp)
   2262c:	10800810 	cmplti	r2,r2,32
   22630:	103fe01e 	bne	r2,zero,225b4 <__alt_mem_ImagemB+0xfffe25b4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   22634:	e0bffd17 	ldw	r2,-12(fp)
}
   22638:	e6ffff04 	addi	sp,fp,-4
   2263c:	dfc00217 	ldw	ra,8(sp)
   22640:	df000117 	ldw	fp,4(sp)
   22644:	dc000017 	ldw	r16,0(sp)
   22648:	dec00304 	addi	sp,sp,12
   2264c:	f800283a 	ret

00022650 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   22650:	defffe04 	addi	sp,sp,-8
   22654:	df000115 	stw	fp,4(sp)
   22658:	df000104 	addi	fp,sp,4
   2265c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   22660:	e0bfff17 	ldw	r2,-4(fp)
   22664:	10bffe84 	addi	r2,r2,-6
   22668:	10c00428 	cmpgeui	r3,r2,16
   2266c:	18001a1e 	bne	r3,zero,226d8 <alt_exception_cause_generated_bad_addr+0x88>
   22670:	100690ba 	slli	r3,r2,2
   22674:	008000b4 	movhi	r2,2
   22678:	1089a204 	addi	r2,r2,9864
   2267c:	1885883a 	add	r2,r3,r2
   22680:	10800017 	ldw	r2,0(r2)
   22684:	1000683a 	jmp	r2
   22688:	000226c8 	cmpgei	zero,zero,2203
   2268c:	000226c8 	cmpgei	zero,zero,2203
   22690:	000226d8 	cmpnei	zero,zero,2203
   22694:	000226d8 	cmpnei	zero,zero,2203
   22698:	000226d8 	cmpnei	zero,zero,2203
   2269c:	000226c8 	cmpgei	zero,zero,2203
   226a0:	000226d0 	cmplti	zero,zero,2203
   226a4:	000226d8 	cmpnei	zero,zero,2203
   226a8:	000226c8 	cmpgei	zero,zero,2203
   226ac:	000226c8 	cmpgei	zero,zero,2203
   226b0:	000226d8 	cmpnei	zero,zero,2203
   226b4:	000226c8 	cmpgei	zero,zero,2203
   226b8:	000226d0 	cmplti	zero,zero,2203
   226bc:	000226d8 	cmpnei	zero,zero,2203
   226c0:	000226d8 	cmpnei	zero,zero,2203
   226c4:	000226c8 	cmpgei	zero,zero,2203
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   226c8:	00800044 	movi	r2,1
   226cc:	00000306 	br	226dc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   226d0:	0005883a 	mov	r2,zero
   226d4:	00000106 	br	226dc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   226d8:	0005883a 	mov	r2,zero
  }
}
   226dc:	e037883a 	mov	sp,fp
   226e0:	df000017 	ldw	fp,0(sp)
   226e4:	dec00104 	addi	sp,sp,4
   226e8:	f800283a 	ret

000226ec <atexit>:
   226ec:	200b883a 	mov	r5,r4
   226f0:	000f883a 	mov	r7,zero
   226f4:	000d883a 	mov	r6,zero
   226f8:	0009883a 	mov	r4,zero
   226fc:	00229941 	jmpi	22994 <__register_exitproc>

00022700 <exit>:
   22700:	defffe04 	addi	sp,sp,-8
   22704:	000b883a 	mov	r5,zero
   22708:	dc000015 	stw	r16,0(sp)
   2270c:	dfc00115 	stw	ra,4(sp)
   22710:	2021883a 	mov	r16,r4
   22714:	0022aac0 	call	22aac <__call_exitprocs>
   22718:	008000b4 	movhi	r2,2
   2271c:	1090d904 	addi	r2,r2,17252
   22720:	11000017 	ldw	r4,0(r2)
   22724:	20800f17 	ldw	r2,60(r4)
   22728:	10000126 	beq	r2,zero,22730 <exit+0x30>
   2272c:	103ee83a 	callr	r2
   22730:	8009883a 	mov	r4,r16
   22734:	0022c2c0 	call	22c2c <_exit>

00022738 <memcmp>:
   22738:	01c000c4 	movi	r7,3
   2273c:	3980192e 	bgeu	r7,r6,227a4 <memcmp+0x6c>
   22740:	2144b03a 	or	r2,r4,r5
   22744:	11c4703a 	and	r2,r2,r7
   22748:	10000f26 	beq	r2,zero,22788 <memcmp+0x50>
   2274c:	20800003 	ldbu	r2,0(r4)
   22750:	28c00003 	ldbu	r3,0(r5)
   22754:	10c0151e 	bne	r2,r3,227ac <memcmp+0x74>
   22758:	31bfff84 	addi	r6,r6,-2
   2275c:	01ffffc4 	movi	r7,-1
   22760:	00000406 	br	22774 <memcmp+0x3c>
   22764:	20800003 	ldbu	r2,0(r4)
   22768:	28c00003 	ldbu	r3,0(r5)
   2276c:	31bfffc4 	addi	r6,r6,-1
   22770:	10c00e1e 	bne	r2,r3,227ac <memcmp+0x74>
   22774:	21000044 	addi	r4,r4,1
   22778:	29400044 	addi	r5,r5,1
   2277c:	31fff91e 	bne	r6,r7,22764 <__alt_mem_ImagemB+0xfffe2764>
   22780:	0005883a 	mov	r2,zero
   22784:	f800283a 	ret
   22788:	20c00017 	ldw	r3,0(r4)
   2278c:	28800017 	ldw	r2,0(r5)
   22790:	18bfee1e 	bne	r3,r2,2274c <__alt_mem_ImagemB+0xfffe274c>
   22794:	31bfff04 	addi	r6,r6,-4
   22798:	21000104 	addi	r4,r4,4
   2279c:	29400104 	addi	r5,r5,4
   227a0:	39bff936 	bltu	r7,r6,22788 <__alt_mem_ImagemB+0xfffe2788>
   227a4:	303fe91e 	bne	r6,zero,2274c <__alt_mem_ImagemB+0xfffe274c>
   227a8:	003ff506 	br	22780 <__alt_mem_ImagemB+0xfffe2780>
   227ac:	10c5c83a 	sub	r2,r2,r3
   227b0:	f800283a 	ret

000227b4 <memcpy>:
   227b4:	defffd04 	addi	sp,sp,-12
   227b8:	dfc00215 	stw	ra,8(sp)
   227bc:	dc400115 	stw	r17,4(sp)
   227c0:	dc000015 	stw	r16,0(sp)
   227c4:	00c003c4 	movi	r3,15
   227c8:	2005883a 	mov	r2,r4
   227cc:	1980452e 	bgeu	r3,r6,228e4 <memcpy+0x130>
   227d0:	2906b03a 	or	r3,r5,r4
   227d4:	18c000cc 	andi	r3,r3,3
   227d8:	1800441e 	bne	r3,zero,228ec <memcpy+0x138>
   227dc:	347ffc04 	addi	r17,r6,-16
   227e0:	8822d13a 	srli	r17,r17,4
   227e4:	28c00104 	addi	r3,r5,4
   227e8:	23400104 	addi	r13,r4,4
   227ec:	8820913a 	slli	r16,r17,4
   227f0:	2b000204 	addi	r12,r5,8
   227f4:	22c00204 	addi	r11,r4,8
   227f8:	84000504 	addi	r16,r16,20
   227fc:	2a800304 	addi	r10,r5,12
   22800:	22400304 	addi	r9,r4,12
   22804:	2c21883a 	add	r16,r5,r16
   22808:	2811883a 	mov	r8,r5
   2280c:	200f883a 	mov	r7,r4
   22810:	41000017 	ldw	r4,0(r8)
   22814:	1fc00017 	ldw	ra,0(r3)
   22818:	63c00017 	ldw	r15,0(r12)
   2281c:	39000015 	stw	r4,0(r7)
   22820:	53800017 	ldw	r14,0(r10)
   22824:	6fc00015 	stw	ra,0(r13)
   22828:	5bc00015 	stw	r15,0(r11)
   2282c:	4b800015 	stw	r14,0(r9)
   22830:	18c00404 	addi	r3,r3,16
   22834:	39c00404 	addi	r7,r7,16
   22838:	42000404 	addi	r8,r8,16
   2283c:	6b400404 	addi	r13,r13,16
   22840:	63000404 	addi	r12,r12,16
   22844:	5ac00404 	addi	r11,r11,16
   22848:	52800404 	addi	r10,r10,16
   2284c:	4a400404 	addi	r9,r9,16
   22850:	1c3fef1e 	bne	r3,r16,22810 <__alt_mem_ImagemB+0xfffe2810>
   22854:	89c00044 	addi	r7,r17,1
   22858:	380e913a 	slli	r7,r7,4
   2285c:	310003cc 	andi	r4,r6,15
   22860:	02c000c4 	movi	r11,3
   22864:	11c7883a 	add	r3,r2,r7
   22868:	29cb883a 	add	r5,r5,r7
   2286c:	5900212e 	bgeu	r11,r4,228f4 <memcpy+0x140>
   22870:	1813883a 	mov	r9,r3
   22874:	2811883a 	mov	r8,r5
   22878:	200f883a 	mov	r7,r4
   2287c:	42800017 	ldw	r10,0(r8)
   22880:	4a400104 	addi	r9,r9,4
   22884:	39ffff04 	addi	r7,r7,-4
   22888:	4abfff15 	stw	r10,-4(r9)
   2288c:	42000104 	addi	r8,r8,4
   22890:	59fffa36 	bltu	r11,r7,2287c <__alt_mem_ImagemB+0xfffe287c>
   22894:	213fff04 	addi	r4,r4,-4
   22898:	2008d0ba 	srli	r4,r4,2
   2289c:	318000cc 	andi	r6,r6,3
   228a0:	21000044 	addi	r4,r4,1
   228a4:	2109883a 	add	r4,r4,r4
   228a8:	2109883a 	add	r4,r4,r4
   228ac:	1907883a 	add	r3,r3,r4
   228b0:	290b883a 	add	r5,r5,r4
   228b4:	30000626 	beq	r6,zero,228d0 <memcpy+0x11c>
   228b8:	198d883a 	add	r6,r3,r6
   228bc:	29c00003 	ldbu	r7,0(r5)
   228c0:	18c00044 	addi	r3,r3,1
   228c4:	29400044 	addi	r5,r5,1
   228c8:	19ffffc5 	stb	r7,-1(r3)
   228cc:	19bffb1e 	bne	r3,r6,228bc <__alt_mem_ImagemB+0xfffe28bc>
   228d0:	dfc00217 	ldw	ra,8(sp)
   228d4:	dc400117 	ldw	r17,4(sp)
   228d8:	dc000017 	ldw	r16,0(sp)
   228dc:	dec00304 	addi	sp,sp,12
   228e0:	f800283a 	ret
   228e4:	2007883a 	mov	r3,r4
   228e8:	003ff206 	br	228b4 <__alt_mem_ImagemB+0xfffe28b4>
   228ec:	2007883a 	mov	r3,r4
   228f0:	003ff106 	br	228b8 <__alt_mem_ImagemB+0xfffe28b8>
   228f4:	200d883a 	mov	r6,r4
   228f8:	003fee06 	br	228b4 <__alt_mem_ImagemB+0xfffe28b4>

000228fc <strlen>:
   228fc:	208000cc 	andi	r2,r4,3
   22900:	10002026 	beq	r2,zero,22984 <strlen+0x88>
   22904:	20800007 	ldb	r2,0(r4)
   22908:	10002026 	beq	r2,zero,2298c <strlen+0x90>
   2290c:	2005883a 	mov	r2,r4
   22910:	00000206 	br	2291c <strlen+0x20>
   22914:	10c00007 	ldb	r3,0(r2)
   22918:	18001826 	beq	r3,zero,2297c <strlen+0x80>
   2291c:	10800044 	addi	r2,r2,1
   22920:	10c000cc 	andi	r3,r2,3
   22924:	183ffb1e 	bne	r3,zero,22914 <__alt_mem_ImagemB+0xfffe2914>
   22928:	10c00017 	ldw	r3,0(r2)
   2292c:	01ffbff4 	movhi	r7,65279
   22930:	39ffbfc4 	addi	r7,r7,-257
   22934:	00ca303a 	nor	r5,zero,r3
   22938:	01a02074 	movhi	r6,32897
   2293c:	19c7883a 	add	r3,r3,r7
   22940:	31a02004 	addi	r6,r6,-32640
   22944:	1946703a 	and	r3,r3,r5
   22948:	1986703a 	and	r3,r3,r6
   2294c:	1800091e 	bne	r3,zero,22974 <strlen+0x78>
   22950:	10800104 	addi	r2,r2,4
   22954:	10c00017 	ldw	r3,0(r2)
   22958:	19cb883a 	add	r5,r3,r7
   2295c:	00c6303a 	nor	r3,zero,r3
   22960:	28c6703a 	and	r3,r5,r3
   22964:	1986703a 	and	r3,r3,r6
   22968:	183ff926 	beq	r3,zero,22950 <__alt_mem_ImagemB+0xfffe2950>
   2296c:	00000106 	br	22974 <strlen+0x78>
   22970:	10800044 	addi	r2,r2,1
   22974:	10c00007 	ldb	r3,0(r2)
   22978:	183ffd1e 	bne	r3,zero,22970 <__alt_mem_ImagemB+0xfffe2970>
   2297c:	1105c83a 	sub	r2,r2,r4
   22980:	f800283a 	ret
   22984:	2005883a 	mov	r2,r4
   22988:	003fe706 	br	22928 <__alt_mem_ImagemB+0xfffe2928>
   2298c:	0005883a 	mov	r2,zero
   22990:	f800283a 	ret

00022994 <__register_exitproc>:
   22994:	defffa04 	addi	sp,sp,-24
   22998:	dc000315 	stw	r16,12(sp)
   2299c:	040000b4 	movhi	r16,2
   229a0:	8410d904 	addi	r16,r16,17252
   229a4:	80c00017 	ldw	r3,0(r16)
   229a8:	dc400415 	stw	r17,16(sp)
   229ac:	dfc00515 	stw	ra,20(sp)
   229b0:	18805217 	ldw	r2,328(r3)
   229b4:	2023883a 	mov	r17,r4
   229b8:	10003726 	beq	r2,zero,22a98 <__register_exitproc+0x104>
   229bc:	10c00117 	ldw	r3,4(r2)
   229c0:	010007c4 	movi	r4,31
   229c4:	20c00e16 	blt	r4,r3,22a00 <__register_exitproc+0x6c>
   229c8:	1a000044 	addi	r8,r3,1
   229cc:	8800221e 	bne	r17,zero,22a58 <__register_exitproc+0xc4>
   229d0:	18c00084 	addi	r3,r3,2
   229d4:	18c7883a 	add	r3,r3,r3
   229d8:	18c7883a 	add	r3,r3,r3
   229dc:	12000115 	stw	r8,4(r2)
   229e0:	10c7883a 	add	r3,r2,r3
   229e4:	19400015 	stw	r5,0(r3)
   229e8:	0005883a 	mov	r2,zero
   229ec:	dfc00517 	ldw	ra,20(sp)
   229f0:	dc400417 	ldw	r17,16(sp)
   229f4:	dc000317 	ldw	r16,12(sp)
   229f8:	dec00604 	addi	sp,sp,24
   229fc:	f800283a 	ret
   22a00:	00800034 	movhi	r2,0
   22a04:	10800004 	addi	r2,r2,0
   22a08:	10002626 	beq	r2,zero,22aa4 <__register_exitproc+0x110>
   22a0c:	01006404 	movi	r4,400
   22a10:	d9400015 	stw	r5,0(sp)
   22a14:	d9800115 	stw	r6,4(sp)
   22a18:	d9c00215 	stw	r7,8(sp)
   22a1c:	00000000 	call	0 <__alt_mem_ImagemA>
   22a20:	d9400017 	ldw	r5,0(sp)
   22a24:	d9800117 	ldw	r6,4(sp)
   22a28:	d9c00217 	ldw	r7,8(sp)
   22a2c:	10001d26 	beq	r2,zero,22aa4 <__register_exitproc+0x110>
   22a30:	81000017 	ldw	r4,0(r16)
   22a34:	10000115 	stw	zero,4(r2)
   22a38:	02000044 	movi	r8,1
   22a3c:	22405217 	ldw	r9,328(r4)
   22a40:	0007883a 	mov	r3,zero
   22a44:	12400015 	stw	r9,0(r2)
   22a48:	20805215 	stw	r2,328(r4)
   22a4c:	10006215 	stw	zero,392(r2)
   22a50:	10006315 	stw	zero,396(r2)
   22a54:	883fde26 	beq	r17,zero,229d0 <__alt_mem_ImagemB+0xfffe29d0>
   22a58:	18c9883a 	add	r4,r3,r3
   22a5c:	2109883a 	add	r4,r4,r4
   22a60:	1109883a 	add	r4,r2,r4
   22a64:	21802215 	stw	r6,136(r4)
   22a68:	01800044 	movi	r6,1
   22a6c:	12406217 	ldw	r9,392(r2)
   22a70:	30cc983a 	sll	r6,r6,r3
   22a74:	4992b03a 	or	r9,r9,r6
   22a78:	12406215 	stw	r9,392(r2)
   22a7c:	21c04215 	stw	r7,264(r4)
   22a80:	01000084 	movi	r4,2
   22a84:	893fd21e 	bne	r17,r4,229d0 <__alt_mem_ImagemB+0xfffe29d0>
   22a88:	11006317 	ldw	r4,396(r2)
   22a8c:	218cb03a 	or	r6,r4,r6
   22a90:	11806315 	stw	r6,396(r2)
   22a94:	003fce06 	br	229d0 <__alt_mem_ImagemB+0xfffe29d0>
   22a98:	18805304 	addi	r2,r3,332
   22a9c:	18805215 	stw	r2,328(r3)
   22aa0:	003fc606 	br	229bc <__alt_mem_ImagemB+0xfffe29bc>
   22aa4:	00bfffc4 	movi	r2,-1
   22aa8:	003fd006 	br	229ec <__alt_mem_ImagemB+0xfffe29ec>

00022aac <__call_exitprocs>:
   22aac:	defff504 	addi	sp,sp,-44
   22ab0:	df000915 	stw	fp,36(sp)
   22ab4:	dd400615 	stw	r21,24(sp)
   22ab8:	dc800315 	stw	r18,12(sp)
   22abc:	dfc00a15 	stw	ra,40(sp)
   22ac0:	ddc00815 	stw	r23,32(sp)
   22ac4:	dd800715 	stw	r22,28(sp)
   22ac8:	dd000515 	stw	r20,20(sp)
   22acc:	dcc00415 	stw	r19,16(sp)
   22ad0:	dc400215 	stw	r17,8(sp)
   22ad4:	dc000115 	stw	r16,4(sp)
   22ad8:	d9000015 	stw	r4,0(sp)
   22adc:	2839883a 	mov	fp,r5
   22ae0:	04800044 	movi	r18,1
   22ae4:	057fffc4 	movi	r21,-1
   22ae8:	008000b4 	movhi	r2,2
   22aec:	1090d904 	addi	r2,r2,17252
   22af0:	12000017 	ldw	r8,0(r2)
   22af4:	45005217 	ldw	r20,328(r8)
   22af8:	44c05204 	addi	r19,r8,328
   22afc:	a0001c26 	beq	r20,zero,22b70 <__call_exitprocs+0xc4>
   22b00:	a0800117 	ldw	r2,4(r20)
   22b04:	15ffffc4 	addi	r23,r2,-1
   22b08:	b8000d16 	blt	r23,zero,22b40 <__call_exitprocs+0x94>
   22b0c:	14000044 	addi	r16,r2,1
   22b10:	8421883a 	add	r16,r16,r16
   22b14:	8421883a 	add	r16,r16,r16
   22b18:	84402004 	addi	r17,r16,128
   22b1c:	a463883a 	add	r17,r20,r17
   22b20:	a421883a 	add	r16,r20,r16
   22b24:	e0001e26 	beq	fp,zero,22ba0 <__call_exitprocs+0xf4>
   22b28:	80804017 	ldw	r2,256(r16)
   22b2c:	e0801c26 	beq	fp,r2,22ba0 <__call_exitprocs+0xf4>
   22b30:	bdffffc4 	addi	r23,r23,-1
   22b34:	843fff04 	addi	r16,r16,-4
   22b38:	8c7fff04 	addi	r17,r17,-4
   22b3c:	bd7ff91e 	bne	r23,r21,22b24 <__alt_mem_ImagemB+0xfffe2b24>
   22b40:	00800034 	movhi	r2,0
   22b44:	10800004 	addi	r2,r2,0
   22b48:	10000926 	beq	r2,zero,22b70 <__call_exitprocs+0xc4>
   22b4c:	a0800117 	ldw	r2,4(r20)
   22b50:	1000301e 	bne	r2,zero,22c14 <__call_exitprocs+0x168>
   22b54:	a0800017 	ldw	r2,0(r20)
   22b58:	10003226 	beq	r2,zero,22c24 <__call_exitprocs+0x178>
   22b5c:	a009883a 	mov	r4,r20
   22b60:	98800015 	stw	r2,0(r19)
   22b64:	00000000 	call	0 <__alt_mem_ImagemA>
   22b68:	9d000017 	ldw	r20,0(r19)
   22b6c:	a03fe41e 	bne	r20,zero,22b00 <__alt_mem_ImagemB+0xfffe2b00>
   22b70:	dfc00a17 	ldw	ra,40(sp)
   22b74:	df000917 	ldw	fp,36(sp)
   22b78:	ddc00817 	ldw	r23,32(sp)
   22b7c:	dd800717 	ldw	r22,28(sp)
   22b80:	dd400617 	ldw	r21,24(sp)
   22b84:	dd000517 	ldw	r20,20(sp)
   22b88:	dcc00417 	ldw	r19,16(sp)
   22b8c:	dc800317 	ldw	r18,12(sp)
   22b90:	dc400217 	ldw	r17,8(sp)
   22b94:	dc000117 	ldw	r16,4(sp)
   22b98:	dec00b04 	addi	sp,sp,44
   22b9c:	f800283a 	ret
   22ba0:	a0800117 	ldw	r2,4(r20)
   22ba4:	80c00017 	ldw	r3,0(r16)
   22ba8:	10bfffc4 	addi	r2,r2,-1
   22bac:	15c01426 	beq	r2,r23,22c00 <__call_exitprocs+0x154>
   22bb0:	80000015 	stw	zero,0(r16)
   22bb4:	183fde26 	beq	r3,zero,22b30 <__alt_mem_ImagemB+0xfffe2b30>
   22bb8:	95c8983a 	sll	r4,r18,r23
   22bbc:	a0806217 	ldw	r2,392(r20)
   22bc0:	a5800117 	ldw	r22,4(r20)
   22bc4:	2084703a 	and	r2,r4,r2
   22bc8:	10000b26 	beq	r2,zero,22bf8 <__call_exitprocs+0x14c>
   22bcc:	a0806317 	ldw	r2,396(r20)
   22bd0:	2088703a 	and	r4,r4,r2
   22bd4:	20000c1e 	bne	r4,zero,22c08 <__call_exitprocs+0x15c>
   22bd8:	89400017 	ldw	r5,0(r17)
   22bdc:	d9000017 	ldw	r4,0(sp)
   22be0:	183ee83a 	callr	r3
   22be4:	a0800117 	ldw	r2,4(r20)
   22be8:	15bfbf1e 	bne	r2,r22,22ae8 <__alt_mem_ImagemB+0xfffe2ae8>
   22bec:	98800017 	ldw	r2,0(r19)
   22bf0:	153fcf26 	beq	r2,r20,22b30 <__alt_mem_ImagemB+0xfffe2b30>
   22bf4:	003fbc06 	br	22ae8 <__alt_mem_ImagemB+0xfffe2ae8>
   22bf8:	183ee83a 	callr	r3
   22bfc:	003ff906 	br	22be4 <__alt_mem_ImagemB+0xfffe2be4>
   22c00:	a5c00115 	stw	r23,4(r20)
   22c04:	003feb06 	br	22bb4 <__alt_mem_ImagemB+0xfffe2bb4>
   22c08:	89000017 	ldw	r4,0(r17)
   22c0c:	183ee83a 	callr	r3
   22c10:	003ff406 	br	22be4 <__alt_mem_ImagemB+0xfffe2be4>
   22c14:	a0800017 	ldw	r2,0(r20)
   22c18:	a027883a 	mov	r19,r20
   22c1c:	1029883a 	mov	r20,r2
   22c20:	003fb606 	br	22afc <__alt_mem_ImagemB+0xfffe2afc>
   22c24:	0005883a 	mov	r2,zero
   22c28:	003ffb06 	br	22c18 <__alt_mem_ImagemB+0xfffe2c18>

00022c2c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   22c2c:	defffd04 	addi	sp,sp,-12
   22c30:	df000215 	stw	fp,8(sp)
   22c34:	df000204 	addi	fp,sp,8
   22c38:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   22c3c:	0001883a 	nop
   22c40:	e0bfff17 	ldw	r2,-4(fp)
   22c44:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   22c48:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   22c4c:	10000226 	beq	r2,zero,22c58 <_exit+0x2c>
    ALT_SIM_FAIL();
   22c50:	002af070 	cmpltui	zero,zero,43969
   22c54:	00000106 	br	22c5c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   22c58:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   22c5c:	003fff06 	br	22c5c <__alt_mem_ImagemB+0xfffe2c5c>
