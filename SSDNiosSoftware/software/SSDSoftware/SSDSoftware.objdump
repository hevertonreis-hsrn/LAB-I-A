
SSDSoftware.elf:     file format elf32-littlenios2
SSDSoftware.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00310230

Program Header:
    LOAD off    0x00001000 vaddr 0x00310000 paddr 0x00310000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00310020 paddr 0x00310020 align 2**12
         filesz 0x000026d0 memsz 0x000026d0 flags r-x
    LOAD off    0x000036f0 vaddr 0x003126f0 paddr 0x00313d50 align 2**12
         filesz 0x00001660 memsz 0x00001660 flags rw-
    LOAD off    0x000053b0 vaddr 0x003153b0 paddr 0x003153b0 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00310000  00310000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00310020  00310020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002490  00310230  00310230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000030  003126c0  003126c0  000036c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001660  003126f0  00313d50  000036f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  003153b0  003153b0  000053b0  2**2
                  ALLOC, SMALL_DATA
  6 .ImagemA      00000000  00000000  00000000  00004d50  2**0
                  CONTENTS
  7 .ImagemC      00000000  00100000  00100000  00004d50  2**0
                  CONTENTS
  8 .ImagemB      00000000  00200000  00200000  00004d50  2**0
                  CONTENTS
  9 .MemoriaPrograma 00000000  003154d4  003154d4  00004d50  2**0
                  CONTENTS
 10 .comment      00000023  00000000  00000000  00004d50  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000005b8  00000000  00000000  00004d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0000751e  00000000  00000000  00005330  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000294b  00000000  00000000  0000c84e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000297a  00000000  00000000  0000f199  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000ab0  00000000  00000000  00011b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001b74  00000000  00000000  000125c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00000803  00000000  00000000  00014138  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_alt_sim_info 00000010  00000000  00000000  0001493c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00000178  00000000  00000000  00014950  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .thread_model 00000003  00000000  00000000  000165f1  2**0
                  CONTENTS, READONLY
 21 .cpu          0000000b  00000000  00000000  000165f4  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  000165ff  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  00016600  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00016601  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001660a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00016613  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000018  00000000  00000000  0001661c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  00016634  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0004dfa0  00000000  00000000  00016657  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00310000 l    d  .entry	00000000 .entry
00310020 l    d  .exceptions	00000000 .exceptions
00310230 l    d  .text	00000000 .text
003126c0 l    d  .rodata	00000000 .rodata
003126f0 l    d  .rwdata	00000000 .rwdata
003153b0 l    d  .bss	00000000 .bss
00000000 l    d  .ImagemA	00000000 .ImagemA
00100000 l    d  .ImagemC	00000000 .ImagemC
00200000 l    d  .ImagemB	00000000 .ImagemB
003154d4 l    d  .MemoriaPrograma	00000000 .MemoriaPrograma
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SSDSoftware_bsp//obj/HAL/src/crt0.o
00310268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Principal.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
003104b4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0031061c l     F .text	00000034 alt_dev_reg
003126f0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
003108f4 l     F .text	0000020c altera_avalon_jtag_uart_irq
00310b00 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00311264 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00311398 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
003113c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00311824 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00311984 l     F .text	0000003c alt_get_errno
003119c0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
003138f8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
003153cc g     O .bss	00000004 alt_instruction_exception_handler
003105a0 g     F .text	0000007c alt_main
003153d4 g     O .bss	00000100 alt_irq
00313d50 g       *ABS*	00000000 __flash_rwdata_start
00311e30 g     F .text	00000024 altera_nios2_gen2_irq_init
00310000 g     F .entry	0000000c __reset
00310020 g       *ABS*	00000000 __flash_exceptions_start
003153d0 g     O .bss	00000004 errno
003153b8 g     O .bss	00000004 alt_argv
0031bd1c g       *ABS*	00000000 _gp
003153b0 g     O .bss	00000004 imgA
00313778 g     O .rwdata	00000180 alt_fd_list
00311e54 g     F .text	00000090 alt_find_dev
00312214 g     F .text	00000148 memcpy
00311908 g     F .text	0000007c alt_io_redirect
003126c0 g       *ABS*	00000000 __DTOR_END__
003120b0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00310cf8 g     F .text	0000021c altera_avalon_jtag_uart_read
00100000 g       *ABS*	00000000 __alt_mem_ImagemC
00313d34 g     O .rwdata	00000004 alt_max_fd
00313d48 g     O .rwdata	00000004 _global_impure_ptr
003154d4 g       *ABS*	00000000 __bss_end
00311734 g     F .text	000000f0 alt_iic_isr_register
00311d28 g     F .text	00000108 alt_tick
003116e8 g     F .text	0000004c alt_ic_irq_enabled
00311c8c g     F .text	0000009c alt_alarm_stop
003153c0 g     O .bss	00000004 alt_irq_active
003100fc g     F .exceptions	000000d4 alt_irq_handler
00313750 g     O .rwdata	00000028 alt_dev_null
00311378 g     F .text	00000020 alt_dcache_flush_all
00313d50 g       *ABS*	00000000 __ram_rwdata_end
00313d2c g     O .rwdata	00000008 alt_dev_list
003126f0 g       *ABS*	00000000 __ram_rodata_end
003154d4 g       *ABS*	00000000 end
00310000 g       *ABS*	00000000 __alt_mem_MemoriaPrograma
00310834 g     F .text	000000c0 altera_avalon_jtag_uart_init
003101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
003126c0 g       *ABS*	00000000 __CTOR_LIST__
00320000 g       *ABS*	00000000 __alt_stack_pointer
00310f14 g     F .text	00000224 altera_avalon_jtag_uart_write
0031250c g     F .text	00000180 __call_exitprocs
00310230 g     F .text	0000003c _start
003153c4 g     O .bss	00000004 _alt_tick_rate
003153c8 g     O .bss	00000004 _alt_nticks
00310688 g     F .text	00000048 alt_sys_init
003123f4 g     F .text	00000118 __register_exitproc
00310ba0 g     F .text	00000068 altera_avalon_jtag_uart_close
0031048c g     F .text	00000028 .hidden __mulsi3
003126f0 g       *ABS*	00000000 __ram_rwdata_start
003126c0 g       *ABS*	00000000 __ram_rodata_start
00313d1c g     O .rwdata	00000004 imgB
003106d0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00311fec g     F .text	000000c4 alt_get_fd
00312198 g     F .text	0000007c memcmp
00310790 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
003154d4 g       *ABS*	00000000 __alt_stack_base
003107e0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00311ee4 g     F .text	00000108 alt_find_file
00311400 g     F .text	000000a4 alt_dev_llist_insert
00000000 g       *ABS*	00000000 __alt_mem_ImagemA
003153b0 g       *ABS*	00000000 __bss_start
0031026c g     F .text	00000220 main
003153bc g     O .bss	00000004 alt_envp
00310730 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00313d38 g     O .rwdata	00000004 alt_errno
003126c0 g       *ABS*	00000000 __CTOR_END__
003126c0 g       *ABS*	00000000 __flash_rodata_start
003126c0 g       *ABS*	00000000 __DTOR_LIST__
00310650 g     F .text	00000038 alt_irq_init
00311c08 g     F .text	00000084 alt_release_fd
0031214c g     F .text	00000014 atexit
00313d4c g     O .rwdata	00000004 _impure_ptr
003153b4 g     O .bss	00000004 alt_argc
00311504 g     F .text	00000060 _do_dtors
00310020 g       .exceptions	00000000 alt_irq_entry
00313d24 g     O .rwdata	00000008 alt_fs_list
00310020 g       *ABS*	00000000 __ram_exceptions_start
00311584 g     F .text	00000050 alt_ic_isr_register
00313d50 g       *ABS*	00000000 _edata
003154d4 g       *ABS*	00000000 _end
00310230 g       *ABS*	00000000 __ram_exceptions_end
00310c08 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0031165c g     F .text	0000008c alt_ic_irq_disable
00312160 g     F .text	00000038 exit
00200000 g       *ABS*	00000000 __alt_mem_ImagemB
00320000 g       *ABS*	00000000 __alt_data_end
00310020 g     F .exceptions	00000000 alt_exception
0031268c g     F .text	00000034 _exit
00311138 g     F .text	0000012c alt_alarm_start
0031235c g     F .text	00000098 strlen
00311aac g     F .text	0000015c open
00313d20 g     O .rwdata	00000004 imgC
00311564 g     F .text	00000020 alt_icache_flush_all
00313d3c g     O .rwdata	00000004 alt_priority_mask
003115d4 g     F .text	00000088 alt_ic_irq_enable
00313d40 g     O .rwdata	00000008 alt_alarm_list
003114a4 g     F .text	00000060 _do_ctors
003112a0 g     F .text	000000d8 close
0031051c g     F .text	00000084 alt_load



Disassembly of section .entry:

00310000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  310000:	00400c74 	movhi	at,49
    ori r1, r1, %lo(_start)
  310004:	08408c14 	ori	at,at,560
    jmp r1
  310008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00310020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  310020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  310024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  310028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  31002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  310030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  310034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  310038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  31003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  310040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  310044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  310048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  31004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  310050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  310054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  310058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  31005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  310060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  310064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  310068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  31006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  310070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  310074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  310078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  31007c:	10000326 	beq	r2,zero,31008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  310080:	20000226 	beq	r4,zero,31008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  310084:	03100fc0 	call	3100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  310088:	00000706 	br	3100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  31008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  310090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  310094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  310098:	03101d00 	call	3101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  31009c:	1000021e 	bne	r2,zero,3100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  3100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  3100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  3100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  3100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  3100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  3100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  3100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  3100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  3100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  3100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  3100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  3100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  3100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  3100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  3100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  3100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  3100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  3100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  3100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  3100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  3100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  3100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  3100f8:	ef80083a 	eret

003100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  3100fc:	defff904 	addi	sp,sp,-28
  310100:	dfc00615 	stw	ra,24(sp)
  310104:	df000515 	stw	fp,20(sp)
  310108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  31010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  310110:	0005313a 	rdctl	r2,ipending
  310114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  310118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  31011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  310120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  310124:	00800044 	movi	r2,1
  310128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  31012c:	e0fffb17 	ldw	r3,-20(fp)
  310130:	e0bffc17 	ldw	r2,-16(fp)
  310134:	1884703a 	and	r2,r3,r2
  310138:	10001426 	beq	r2,zero,31018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  31013c:	00800c74 	movhi	r2,49
  310140:	1094f504 	addi	r2,r2,21460
  310144:	e0fffd17 	ldw	r3,-12(fp)
  310148:	180690fa 	slli	r3,r3,3
  31014c:	10c5883a 	add	r2,r2,r3
  310150:	10c00017 	ldw	r3,0(r2)
  310154:	00800c74 	movhi	r2,49
  310158:	1094f504 	addi	r2,r2,21460
  31015c:	e13ffd17 	ldw	r4,-12(fp)
  310160:	200890fa 	slli	r4,r4,3
  310164:	1105883a 	add	r2,r2,r4
  310168:	10800104 	addi	r2,r2,4
  31016c:	10800017 	ldw	r2,0(r2)
  310170:	1009883a 	mov	r4,r2
  310174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  310178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  31017c:	0005313a 	rdctl	r2,ipending
  310180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  310184:	e0bfff17 	ldw	r2,-4(fp)
  310188:	00000706 	br	3101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  31018c:	e0bffc17 	ldw	r2,-16(fp)
  310190:	1085883a 	add	r2,r2,r2
  310194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  310198:	e0bffd17 	ldw	r2,-12(fp)
  31019c:	10800044 	addi	r2,r2,1
  3101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  3101a4:	003fe106 	br	31012c <__alt_data_end+0xffff012c>

    active = alt_irq_pending ();
  3101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  3101ac:	e0bffb17 	ldw	r2,-20(fp)
  3101b0:	103fdb1e 	bne	r2,zero,310120 <__alt_data_end+0xffff0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  3101b4:	0001883a 	nop
}
  3101b8:	0001883a 	nop
  3101bc:	e037883a 	mov	sp,fp
  3101c0:	dfc00117 	ldw	ra,4(sp)
  3101c4:	df000017 	ldw	fp,0(sp)
  3101c8:	dec00204 	addi	sp,sp,8
  3101cc:	f800283a 	ret

003101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  3101d0:	defffb04 	addi	sp,sp,-20
  3101d4:	dfc00415 	stw	ra,16(sp)
  3101d8:	df000315 	stw	fp,12(sp)
  3101dc:	df000304 	addi	fp,sp,12
  3101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  3101e4:	00bfffc4 	movi	r2,-1
  3101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
  3101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  3101f0:	d0a5ac17 	ldw	r2,-26960(gp)
  3101f4:	10000726 	beq	r2,zero,310214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  3101f8:	d0a5ac17 	ldw	r2,-26960(gp)
  3101fc:	e0fffd17 	ldw	r3,-12(fp)
  310200:	e1bffe17 	ldw	r6,-8(fp)
  310204:	e17fff17 	ldw	r5,-4(fp)
  310208:	1809883a 	mov	r4,r3
  31020c:	103ee83a 	callr	r2
  310210:	00000206 	br	31021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  310214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  310218:	0005883a 	mov	r2,zero
}
  31021c:	e037883a 	mov	sp,fp
  310220:	dfc00117 	ldw	ra,4(sp)
  310224:	df000017 	ldw	fp,0(sp)
  310228:	dec00204 	addi	sp,sp,8
  31022c:	f800283a 	ret

Disassembly of section .text:

00310230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  310230:	06c00cb4 	movhi	sp,50
    ori sp, sp, %lo(__alt_stack_pointer)
  310234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  310238:	06800c74 	movhi	gp,49
    ori gp, gp, %lo(_gp)
  31023c:	d6af4714 	ori	gp,gp,48412
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  310240:	00800c74 	movhi	r2,49
    ori r2, r2, %lo(__bss_start)
  310244:	1094ec14 	ori	r2,r2,21424

    movhi r3, %hi(__bss_end)
  310248:	00c00c74 	movhi	r3,49
    ori r3, r3, %lo(__bss_end)
  31024c:	18d53514 	ori	r3,r3,21716

    beq r2, r3, 1f
  310250:	10c00326 	beq	r2,r3,310260 <_start+0x30>

0:
    stw zero, (r2)
  310254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  310258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  31025c:	10fffd36 	bltu	r2,r3,310254 <__alt_data_end+0xffff0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  310260:	031051c0 	call	31051c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  310264:	03105a00 	call	3105a0 <alt_main>

00310268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  310268:	003fff06 	br	310268 <__alt_data_end+0xffff0268>

0031026c <main>:
int * imgA = IMG_A;
int * imgB = IMG_B;
int * imgC = IMG_C;

int main()
{
  31026c:	defffe04 	addi	sp,sp,-8
  310270:	dfc00115 	stw	ra,4(sp)
  310274:	df000015 	stw	fp,0(sp)
  310278:	d839883a 	mov	fp,sp
  31027c:	023ffe74 	movhi	r8,65529
  310280:	423dff04 	addi	r8,r8,-2052
  310284:	da37883a 	add	sp,sp,r8


  int diff[DATA_SIZE], square[DATA_SIZE];
  *MEDIDOR_ESCRITA = 0;
  310288:	00800cb4 	movhi	r2,50
  31028c:	10840304 	addi	r2,r2,4108
  310290:	10000015 	stw	zero,0(r2)
  for (int i = 0; i < DATA_SIZE; i++)
  310294:	00bffe74 	movhi	r2,65529
  310298:	10bdff04 	addi	r2,r2,-2052
  31029c:	1705883a 	add	r2,r2,fp
  3102a0:	10000015 	stw	zero,0(r2)
  3102a4:	00006906 	br	31044c <main+0x1e0>
  {
    diff[i] = imgB[i] - imgA[i];
  3102a8:	d0e00017 	ldw	r3,-32768(gp)
  3102ac:	013ffe74 	movhi	r4,65529
  3102b0:	213dff04 	addi	r4,r4,-2052
  3102b4:	2709883a 	add	r4,r4,fp
  3102b8:	20800017 	ldw	r2,0(r4)
  3102bc:	1085883a 	add	r2,r2,r2
  3102c0:	1085883a 	add	r2,r2,r2
  3102c4:	1885883a 	add	r2,r3,r2
  3102c8:	10c00017 	ldw	r3,0(r2)
  3102cc:	d125a517 	ldw	r4,-26988(gp)
  3102d0:	017ffe74 	movhi	r5,65529
  3102d4:	297dff04 	addi	r5,r5,-2052
  3102d8:	2f0b883a 	add	r5,r5,fp
  3102dc:	28800017 	ldw	r2,0(r5)
  3102e0:	1085883a 	add	r2,r2,r2
  3102e4:	1085883a 	add	r2,r2,r2
  3102e8:	2085883a 	add	r2,r4,r2
  3102ec:	10800017 	ldw	r2,0(r2)
  3102f0:	1887c83a 	sub	r3,r3,r2
  3102f4:	013ffe74 	movhi	r4,65529
  3102f8:	213dff04 	addi	r4,r4,-2052
  3102fc:	2709883a 	add	r4,r4,fp
  310300:	20800017 	ldw	r2,0(r4)
  310304:	1085883a 	add	r2,r2,r2
  310308:	1085883a 	add	r2,r2,r2
  31030c:	017ffe74 	movhi	r5,65529
  310310:	297dff04 	addi	r5,r5,-2052
  310314:	2f0b883a 	add	r5,r5,fp
  310318:	2885883a 	add	r2,r5,r2
  31031c:	10800104 	addi	r2,r2,4
  310320:	10c00015 	stw	r3,0(r2)
    square[i] = diff[i]*diff[i];
  310324:	00fffe74 	movhi	r3,65529
  310328:	18fdff04 	addi	r3,r3,-2052
  31032c:	1f07883a 	add	r3,r3,fp
  310330:	18800017 	ldw	r2,0(r3)
  310334:	1085883a 	add	r2,r2,r2
  310338:	1085883a 	add	r2,r2,r2
  31033c:	013ffe74 	movhi	r4,65529
  310340:	213dff04 	addi	r4,r4,-2052
  310344:	2709883a 	add	r4,r4,fp
  310348:	2085883a 	add	r2,r4,r2
  31034c:	10800104 	addi	r2,r2,4
  310350:	10c00017 	ldw	r3,0(r2)
  310354:	017ffe74 	movhi	r5,65529
  310358:	297dff04 	addi	r5,r5,-2052
  31035c:	2f0b883a 	add	r5,r5,fp
  310360:	28800017 	ldw	r2,0(r5)
  310364:	1085883a 	add	r2,r2,r2
  310368:	1085883a 	add	r2,r2,r2
  31036c:	013ffe74 	movhi	r4,65529
  310370:	213dff04 	addi	r4,r4,-2052
  310374:	2709883a 	add	r4,r4,fp
  310378:	2085883a 	add	r2,r4,r2
  31037c:	10800104 	addi	r2,r2,4
  310380:	10800017 	ldw	r2,0(r2)
  310384:	100b883a 	mov	r5,r2
  310388:	1809883a 	mov	r4,r3
  31038c:	031048c0 	call	31048c <__mulsi3>
  310390:	1009883a 	mov	r4,r2
  310394:	00800134 	movhi	r2,4
  310398:	10a10104 	addi	r2,r2,-31740
  31039c:	017ffe74 	movhi	r5,65529
  3103a0:	297dff04 	addi	r5,r5,-2052
  3103a4:	2f0b883a 	add	r5,r5,fp
  3103a8:	2887883a 	add	r3,r5,r2
  3103ac:	017ffe74 	movhi	r5,65529
  3103b0:	297dff04 	addi	r5,r5,-2052
  3103b4:	2f0b883a 	add	r5,r5,fp
  3103b8:	28800017 	ldw	r2,0(r5)
  3103bc:	1085883a 	add	r2,r2,r2
  3103c0:	1085883a 	add	r2,r2,r2
  3103c4:	1885883a 	add	r2,r3,r2
  3103c8:	11000015 	stw	r4,0(r2)
    imgC[i] = square[i];
  3103cc:	d0e00117 	ldw	r3,-32764(gp)
  3103d0:	013ffe74 	movhi	r4,65529
  3103d4:	213dff04 	addi	r4,r4,-2052
  3103d8:	2709883a 	add	r4,r4,fp
  3103dc:	20800017 	ldw	r2,0(r4)
  3103e0:	1085883a 	add	r2,r2,r2
  3103e4:	1085883a 	add	r2,r2,r2
  3103e8:	1887883a 	add	r3,r3,r2
  3103ec:	00800134 	movhi	r2,4
  3103f0:	10a10104 	addi	r2,r2,-31740
  3103f4:	017ffe74 	movhi	r5,65529
  3103f8:	297dff04 	addi	r5,r5,-2052
  3103fc:	2f0b883a 	add	r5,r5,fp
  310400:	2889883a 	add	r4,r5,r2
  310404:	017ffe74 	movhi	r5,65529
  310408:	297dff04 	addi	r5,r5,-2052
  31040c:	2f0b883a 	add	r5,r5,fp
  310410:	28800017 	ldw	r2,0(r5)
  310414:	1085883a 	add	r2,r2,r2
  310418:	1085883a 	add	r2,r2,r2
  31041c:	2085883a 	add	r2,r4,r2
  310420:	10800017 	ldw	r2,0(r2)
  310424:	18800015 	stw	r2,0(r3)
{


  int diff[DATA_SIZE], square[DATA_SIZE];
  *MEDIDOR_ESCRITA = 0;
  for (int i = 0; i < DATA_SIZE; i++)
  310428:	00fffe74 	movhi	r3,65529
  31042c:	18fdff04 	addi	r3,r3,-2052
  310430:	1f07883a 	add	r3,r3,fp
  310434:	18800017 	ldw	r2,0(r3)
  310438:	10800044 	addi	r2,r2,1
  31043c:	013ffe74 	movhi	r4,65529
  310440:	213dff04 	addi	r4,r4,-2052
  310444:	2709883a 	add	r4,r4,fp
  310448:	20800015 	stw	r2,0(r4)
  31044c:	017ffe74 	movhi	r5,65529
  310450:	297dff04 	addi	r5,r5,-2052
  310454:	2f0b883a 	add	r5,r5,fp
  310458:	28800017 	ldw	r2,0(r5)
  31045c:	00f83fd4 	movui	r3,57599
  310460:	18bf910e 	bge	r3,r2,3102a8 <__alt_data_end+0xffff02a8>
  {
    diff[i] = imgB[i] - imgA[i];
    square[i] = diff[i]*diff[i];
    imgC[i] = square[i];
  }
  *MEDIDOR_ESCRITA = 2;
  310464:	00800cb4 	movhi	r2,50
  310468:	10840304 	addi	r2,r2,4108
  31046c:	00c00084 	movi	r3,2
  310470:	10c00015 	stw	r3,0(r2)

  return 0;
  310474:	0005883a 	mov	r2,zero
}
  310478:	e037883a 	mov	sp,fp
  31047c:	dfc00117 	ldw	ra,4(sp)
  310480:	df000017 	ldw	fp,0(sp)
  310484:	dec00204 	addi	sp,sp,8
  310488:	f800283a 	ret

0031048c <__mulsi3>:
  31048c:	0005883a 	mov	r2,zero
  310490:	20000726 	beq	r4,zero,3104b0 <__mulsi3+0x24>
  310494:	20c0004c 	andi	r3,r4,1
  310498:	2008d07a 	srli	r4,r4,1
  31049c:	18000126 	beq	r3,zero,3104a4 <__mulsi3+0x18>
  3104a0:	1145883a 	add	r2,r2,r5
  3104a4:	294b883a 	add	r5,r5,r5
  3104a8:	203ffa1e 	bne	r4,zero,310494 <__alt_data_end+0xffff0494>
  3104ac:	f800283a 	ret
  3104b0:	f800283a 	ret

003104b4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  3104b4:	defffc04 	addi	sp,sp,-16
  3104b8:	df000315 	stw	fp,12(sp)
  3104bc:	df000304 	addi	fp,sp,12
  3104c0:	e13ffd15 	stw	r4,-12(fp)
  3104c4:	e17ffe15 	stw	r5,-8(fp)
  3104c8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  3104cc:	e0fffe17 	ldw	r3,-8(fp)
  3104d0:	e0bffd17 	ldw	r2,-12(fp)
  3104d4:	18800c26 	beq	r3,r2,310508 <alt_load_section+0x54>
  {
    while( to != end )
  3104d8:	00000806 	br	3104fc <alt_load_section+0x48>
    {
      *to++ = *from++;
  3104dc:	e0bffe17 	ldw	r2,-8(fp)
  3104e0:	10c00104 	addi	r3,r2,4
  3104e4:	e0fffe15 	stw	r3,-8(fp)
  3104e8:	e0fffd17 	ldw	r3,-12(fp)
  3104ec:	19000104 	addi	r4,r3,4
  3104f0:	e13ffd15 	stw	r4,-12(fp)
  3104f4:	18c00017 	ldw	r3,0(r3)
  3104f8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  3104fc:	e0fffe17 	ldw	r3,-8(fp)
  310500:	e0bfff17 	ldw	r2,-4(fp)
  310504:	18bff51e 	bne	r3,r2,3104dc <__alt_data_end+0xffff04dc>
    {
      *to++ = *from++;
    }
  }
}
  310508:	0001883a 	nop
  31050c:	e037883a 	mov	sp,fp
  310510:	df000017 	ldw	fp,0(sp)
  310514:	dec00104 	addi	sp,sp,4
  310518:	f800283a 	ret

0031051c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  31051c:	defffe04 	addi	sp,sp,-8
  310520:	dfc00115 	stw	ra,4(sp)
  310524:	df000015 	stw	fp,0(sp)
  310528:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  31052c:	01800c74 	movhi	r6,49
  310530:	318f5404 	addi	r6,r6,15696
  310534:	01400c74 	movhi	r5,49
  310538:	2949bc04 	addi	r5,r5,9968
  31053c:	01000c74 	movhi	r4,49
  310540:	210f5404 	addi	r4,r4,15696
  310544:	03104b40 	call	3104b4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  310548:	01800c74 	movhi	r6,49
  31054c:	31808c04 	addi	r6,r6,560
  310550:	01400c74 	movhi	r5,49
  310554:	29400804 	addi	r5,r5,32
  310558:	01000c74 	movhi	r4,49
  31055c:	21000804 	addi	r4,r4,32
  310560:	03104b40 	call	3104b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  310564:	01800c74 	movhi	r6,49
  310568:	3189bc04 	addi	r6,r6,9968
  31056c:	01400c74 	movhi	r5,49
  310570:	2949b004 	addi	r5,r5,9920
  310574:	01000c74 	movhi	r4,49
  310578:	2109b004 	addi	r4,r4,9920
  31057c:	03104b40 	call	3104b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  310580:	03113780 	call	311378 <alt_dcache_flush_all>
  alt_icache_flush_all();
  310584:	03115640 	call	311564 <alt_icache_flush_all>
}
  310588:	0001883a 	nop
  31058c:	e037883a 	mov	sp,fp
  310590:	dfc00117 	ldw	ra,4(sp)
  310594:	df000017 	ldw	fp,0(sp)
  310598:	dec00204 	addi	sp,sp,8
  31059c:	f800283a 	ret

003105a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  3105a0:	defffd04 	addi	sp,sp,-12
  3105a4:	dfc00215 	stw	ra,8(sp)
  3105a8:	df000115 	stw	fp,4(sp)
  3105ac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  3105b0:	0009883a 	mov	r4,zero
  3105b4:	03106500 	call	310650 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  3105b8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  3105bc:	03106880 	call	310688 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  3105c0:	01800c74 	movhi	r6,49
  3105c4:	3189b004 	addi	r6,r6,9920
  3105c8:	01400c74 	movhi	r5,49
  3105cc:	2949b004 	addi	r5,r5,9920
  3105d0:	01000c74 	movhi	r4,49
  3105d4:	2109b004 	addi	r4,r4,9920
  3105d8:	03119080 	call	311908 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  3105dc:	03114a40 	call	3114a4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  3105e0:	01000c74 	movhi	r4,49
  3105e4:	21054104 	addi	r4,r4,5380
  3105e8:	031214c0 	call	31214c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  3105ec:	d0a5a617 	ldw	r2,-26984(gp)
  3105f0:	d0e5a717 	ldw	r3,-26980(gp)
  3105f4:	d125a817 	ldw	r4,-26976(gp)
  3105f8:	200d883a 	mov	r6,r4
  3105fc:	180b883a 	mov	r5,r3
  310600:	1009883a 	mov	r4,r2
  310604:	031026c0 	call	31026c <main>
  310608:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  31060c:	01000044 	movi	r4,1
  310610:	03112a00 	call	3112a0 <close>
  exit (result);
  310614:	e13fff17 	ldw	r4,-4(fp)
  310618:	03121600 	call	312160 <exit>

0031061c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  31061c:	defffd04 	addi	sp,sp,-12
  310620:	dfc00215 	stw	ra,8(sp)
  310624:	df000115 	stw	fp,4(sp)
  310628:	df000104 	addi	fp,sp,4
  31062c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  310630:	d1600404 	addi	r5,gp,-32752
  310634:	e13fff17 	ldw	r4,-4(fp)
  310638:	03114000 	call	311400 <alt_dev_llist_insert>
}
  31063c:	e037883a 	mov	sp,fp
  310640:	dfc00117 	ldw	ra,4(sp)
  310644:	df000017 	ldw	fp,0(sp)
  310648:	dec00204 	addi	sp,sp,8
  31064c:	f800283a 	ret

00310650 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  310650:	defffd04 	addi	sp,sp,-12
  310654:	dfc00215 	stw	ra,8(sp)
  310658:	df000115 	stw	fp,4(sp)
  31065c:	df000104 	addi	fp,sp,4
  310660:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( PROCESSADOR, Processador);
  310664:	0311e300 	call	311e30 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  310668:	00800044 	movi	r2,1
  31066c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  310670:	0001883a 	nop
  310674:	e037883a 	mov	sp,fp
  310678:	dfc00117 	ldw	ra,4(sp)
  31067c:	df000017 	ldw	fp,0(sp)
  310680:	dec00204 	addi	sp,sp,8
  310684:	f800283a 	ret

00310688 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  310688:	defffe04 	addi	sp,sp,-8
  31068c:	dfc00115 	stw	ra,4(sp)
  310690:	df000015 	stw	fp,0(sp)
  310694:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  310698:	01800204 	movi	r6,8
  31069c:	000b883a 	mov	r5,zero
  3106a0:	01000c74 	movhi	r4,49
  3106a4:	2109c604 	addi	r4,r4,10008
  3106a8:	03108340 	call	310834 <altera_avalon_jtag_uart_init>
  3106ac:	01000c74 	movhi	r4,49
  3106b0:	2109bc04 	addi	r4,r4,9968
  3106b4:	031061c0 	call	31061c <alt_dev_reg>
}
  3106b8:	0001883a 	nop
  3106bc:	e037883a 	mov	sp,fp
  3106c0:	dfc00117 	ldw	ra,4(sp)
  3106c4:	df000017 	ldw	fp,0(sp)
  3106c8:	dec00204 	addi	sp,sp,8
  3106cc:	f800283a 	ret

003106d0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  3106d0:	defffa04 	addi	sp,sp,-24
  3106d4:	dfc00515 	stw	ra,20(sp)
  3106d8:	df000415 	stw	fp,16(sp)
  3106dc:	df000404 	addi	fp,sp,16
  3106e0:	e13ffd15 	stw	r4,-12(fp)
  3106e4:	e17ffe15 	stw	r5,-8(fp)
  3106e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  3106ec:	e0bffd17 	ldw	r2,-12(fp)
  3106f0:	10800017 	ldw	r2,0(r2)
  3106f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  3106f8:	e0bffc17 	ldw	r2,-16(fp)
  3106fc:	10c00a04 	addi	r3,r2,40
  310700:	e0bffd17 	ldw	r2,-12(fp)
  310704:	10800217 	ldw	r2,8(r2)
  310708:	100f883a 	mov	r7,r2
  31070c:	e1bfff17 	ldw	r6,-4(fp)
  310710:	e17ffe17 	ldw	r5,-8(fp)
  310714:	1809883a 	mov	r4,r3
  310718:	0310cf80 	call	310cf8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  31071c:	e037883a 	mov	sp,fp
  310720:	dfc00117 	ldw	ra,4(sp)
  310724:	df000017 	ldw	fp,0(sp)
  310728:	dec00204 	addi	sp,sp,8
  31072c:	f800283a 	ret

00310730 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  310730:	defffa04 	addi	sp,sp,-24
  310734:	dfc00515 	stw	ra,20(sp)
  310738:	df000415 	stw	fp,16(sp)
  31073c:	df000404 	addi	fp,sp,16
  310740:	e13ffd15 	stw	r4,-12(fp)
  310744:	e17ffe15 	stw	r5,-8(fp)
  310748:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  31074c:	e0bffd17 	ldw	r2,-12(fp)
  310750:	10800017 	ldw	r2,0(r2)
  310754:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  310758:	e0bffc17 	ldw	r2,-16(fp)
  31075c:	10c00a04 	addi	r3,r2,40
  310760:	e0bffd17 	ldw	r2,-12(fp)
  310764:	10800217 	ldw	r2,8(r2)
  310768:	100f883a 	mov	r7,r2
  31076c:	e1bfff17 	ldw	r6,-4(fp)
  310770:	e17ffe17 	ldw	r5,-8(fp)
  310774:	1809883a 	mov	r4,r3
  310778:	0310f140 	call	310f14 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  31077c:	e037883a 	mov	sp,fp
  310780:	dfc00117 	ldw	ra,4(sp)
  310784:	df000017 	ldw	fp,0(sp)
  310788:	dec00204 	addi	sp,sp,8
  31078c:	f800283a 	ret

00310790 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  310790:	defffc04 	addi	sp,sp,-16
  310794:	dfc00315 	stw	ra,12(sp)
  310798:	df000215 	stw	fp,8(sp)
  31079c:	df000204 	addi	fp,sp,8
  3107a0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  3107a4:	e0bfff17 	ldw	r2,-4(fp)
  3107a8:	10800017 	ldw	r2,0(r2)
  3107ac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  3107b0:	e0bffe17 	ldw	r2,-8(fp)
  3107b4:	10c00a04 	addi	r3,r2,40
  3107b8:	e0bfff17 	ldw	r2,-4(fp)
  3107bc:	10800217 	ldw	r2,8(r2)
  3107c0:	100b883a 	mov	r5,r2
  3107c4:	1809883a 	mov	r4,r3
  3107c8:	0310ba00 	call	310ba0 <altera_avalon_jtag_uart_close>
}
  3107cc:	e037883a 	mov	sp,fp
  3107d0:	dfc00117 	ldw	ra,4(sp)
  3107d4:	df000017 	ldw	fp,0(sp)
  3107d8:	dec00204 	addi	sp,sp,8
  3107dc:	f800283a 	ret

003107e0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  3107e0:	defffa04 	addi	sp,sp,-24
  3107e4:	dfc00515 	stw	ra,20(sp)
  3107e8:	df000415 	stw	fp,16(sp)
  3107ec:	df000404 	addi	fp,sp,16
  3107f0:	e13ffd15 	stw	r4,-12(fp)
  3107f4:	e17ffe15 	stw	r5,-8(fp)
  3107f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  3107fc:	e0bffd17 	ldw	r2,-12(fp)
  310800:	10800017 	ldw	r2,0(r2)
  310804:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  310808:	e0bffc17 	ldw	r2,-16(fp)
  31080c:	10800a04 	addi	r2,r2,40
  310810:	e1bfff17 	ldw	r6,-4(fp)
  310814:	e17ffe17 	ldw	r5,-8(fp)
  310818:	1009883a 	mov	r4,r2
  31081c:	0310c080 	call	310c08 <altera_avalon_jtag_uart_ioctl>
}
  310820:	e037883a 	mov	sp,fp
  310824:	dfc00117 	ldw	ra,4(sp)
  310828:	df000017 	ldw	fp,0(sp)
  31082c:	dec00204 	addi	sp,sp,8
  310830:	f800283a 	ret

00310834 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  310834:	defffa04 	addi	sp,sp,-24
  310838:	dfc00515 	stw	ra,20(sp)
  31083c:	df000415 	stw	fp,16(sp)
  310840:	df000404 	addi	fp,sp,16
  310844:	e13ffd15 	stw	r4,-12(fp)
  310848:	e17ffe15 	stw	r5,-8(fp)
  31084c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  310850:	e0bffd17 	ldw	r2,-12(fp)
  310854:	00c00044 	movi	r3,1
  310858:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  31085c:	e0bffd17 	ldw	r2,-12(fp)
  310860:	10800017 	ldw	r2,0(r2)
  310864:	10800104 	addi	r2,r2,4
  310868:	1007883a 	mov	r3,r2
  31086c:	e0bffd17 	ldw	r2,-12(fp)
  310870:	10800817 	ldw	r2,32(r2)
  310874:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  310878:	e0bffe17 	ldw	r2,-8(fp)
  31087c:	e0ffff17 	ldw	r3,-4(fp)
  310880:	d8000015 	stw	zero,0(sp)
  310884:	e1fffd17 	ldw	r7,-12(fp)
  310888:	01800c74 	movhi	r6,49
  31088c:	31823d04 	addi	r6,r6,2292
  310890:	180b883a 	mov	r5,r3
  310894:	1009883a 	mov	r4,r2
  310898:	03115840 	call	311584 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  31089c:	e0bffd17 	ldw	r2,-12(fp)
  3108a0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  3108a4:	e0bffd17 	ldw	r2,-12(fp)
  3108a8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  3108ac:	d0e5aa17 	ldw	r3,-26968(gp)
  3108b0:	e1fffd17 	ldw	r7,-12(fp)
  3108b4:	01800c74 	movhi	r6,49
  3108b8:	3182c004 	addi	r6,r6,2816
  3108bc:	180b883a 	mov	r5,r3
  3108c0:	1009883a 	mov	r4,r2
  3108c4:	03111380 	call	311138 <alt_alarm_start>
  3108c8:	1000040e 	bge	r2,zero,3108dc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  3108cc:	e0fffd17 	ldw	r3,-12(fp)
  3108d0:	00a00034 	movhi	r2,32768
  3108d4:	10bfffc4 	addi	r2,r2,-1
  3108d8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  3108dc:	0001883a 	nop
  3108e0:	e037883a 	mov	sp,fp
  3108e4:	dfc00117 	ldw	ra,4(sp)
  3108e8:	df000017 	ldw	fp,0(sp)
  3108ec:	dec00204 	addi	sp,sp,8
  3108f0:	f800283a 	ret

003108f4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  3108f4:	defff804 	addi	sp,sp,-32
  3108f8:	df000715 	stw	fp,28(sp)
  3108fc:	df000704 	addi	fp,sp,28
  310900:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  310904:	e0bfff17 	ldw	r2,-4(fp)
  310908:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  31090c:	e0bffb17 	ldw	r2,-20(fp)
  310910:	10800017 	ldw	r2,0(r2)
  310914:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  310918:	e0bffc17 	ldw	r2,-16(fp)
  31091c:	10800104 	addi	r2,r2,4
  310920:	10800037 	ldwio	r2,0(r2)
  310924:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  310928:	e0bffd17 	ldw	r2,-12(fp)
  31092c:	1080c00c 	andi	r2,r2,768
  310930:	10006d26 	beq	r2,zero,310ae8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  310934:	e0bffd17 	ldw	r2,-12(fp)
  310938:	1080400c 	andi	r2,r2,256
  31093c:	10003526 	beq	r2,zero,310a14 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  310940:	00800074 	movhi	r2,1
  310944:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  310948:	e0bffb17 	ldw	r2,-20(fp)
  31094c:	10800a17 	ldw	r2,40(r2)
  310950:	10800044 	addi	r2,r2,1
  310954:	1081ffcc 	andi	r2,r2,2047
  310958:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  31095c:	e0bffb17 	ldw	r2,-20(fp)
  310960:	10c00b17 	ldw	r3,44(r2)
  310964:	e0bffe17 	ldw	r2,-8(fp)
  310968:	18801526 	beq	r3,r2,3109c0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  31096c:	e0bffc17 	ldw	r2,-16(fp)
  310970:	10800037 	ldwio	r2,0(r2)
  310974:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  310978:	e0bff917 	ldw	r2,-28(fp)
  31097c:	10a0000c 	andi	r2,r2,32768
  310980:	10001126 	beq	r2,zero,3109c8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  310984:	e0bffb17 	ldw	r2,-20(fp)
  310988:	10800a17 	ldw	r2,40(r2)
  31098c:	e0fff917 	ldw	r3,-28(fp)
  310990:	1809883a 	mov	r4,r3
  310994:	e0fffb17 	ldw	r3,-20(fp)
  310998:	1885883a 	add	r2,r3,r2
  31099c:	10800e04 	addi	r2,r2,56
  3109a0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  3109a4:	e0bffb17 	ldw	r2,-20(fp)
  3109a8:	10800a17 	ldw	r2,40(r2)
  3109ac:	10800044 	addi	r2,r2,1
  3109b0:	10c1ffcc 	andi	r3,r2,2047
  3109b4:	e0bffb17 	ldw	r2,-20(fp)
  3109b8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  3109bc:	003fe206 	br	310948 <__alt_data_end+0xffff0948>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  3109c0:	0001883a 	nop
  3109c4:	00000106 	br	3109cc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  3109c8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  3109cc:	e0bff917 	ldw	r2,-28(fp)
  3109d0:	10bfffec 	andhi	r2,r2,65535
  3109d4:	10000f26 	beq	r2,zero,310a14 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  3109d8:	e0bffb17 	ldw	r2,-20(fp)
  3109dc:	10c00817 	ldw	r3,32(r2)
  3109e0:	00bfff84 	movi	r2,-2
  3109e4:	1886703a 	and	r3,r3,r2
  3109e8:	e0bffb17 	ldw	r2,-20(fp)
  3109ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  3109f0:	e0bffc17 	ldw	r2,-16(fp)
  3109f4:	10800104 	addi	r2,r2,4
  3109f8:	1007883a 	mov	r3,r2
  3109fc:	e0bffb17 	ldw	r2,-20(fp)
  310a00:	10800817 	ldw	r2,32(r2)
  310a04:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  310a08:	e0bffc17 	ldw	r2,-16(fp)
  310a0c:	10800104 	addi	r2,r2,4
  310a10:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  310a14:	e0bffd17 	ldw	r2,-12(fp)
  310a18:	1080800c 	andi	r2,r2,512
  310a1c:	103fbe26 	beq	r2,zero,310918 <__alt_data_end+0xffff0918>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  310a20:	e0bffd17 	ldw	r2,-12(fp)
  310a24:	1004d43a 	srli	r2,r2,16
  310a28:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  310a2c:	00001406 	br	310a80 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  310a30:	e0bffc17 	ldw	r2,-16(fp)
  310a34:	e0fffb17 	ldw	r3,-20(fp)
  310a38:	18c00d17 	ldw	r3,52(r3)
  310a3c:	e13ffb17 	ldw	r4,-20(fp)
  310a40:	20c7883a 	add	r3,r4,r3
  310a44:	18c20e04 	addi	r3,r3,2104
  310a48:	18c00003 	ldbu	r3,0(r3)
  310a4c:	18c03fcc 	andi	r3,r3,255
  310a50:	18c0201c 	xori	r3,r3,128
  310a54:	18ffe004 	addi	r3,r3,-128
  310a58:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  310a5c:	e0bffb17 	ldw	r2,-20(fp)
  310a60:	10800d17 	ldw	r2,52(r2)
  310a64:	10800044 	addi	r2,r2,1
  310a68:	10c1ffcc 	andi	r3,r2,2047
  310a6c:	e0bffb17 	ldw	r2,-20(fp)
  310a70:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  310a74:	e0bffa17 	ldw	r2,-24(fp)
  310a78:	10bfffc4 	addi	r2,r2,-1
  310a7c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  310a80:	e0bffa17 	ldw	r2,-24(fp)
  310a84:	10000526 	beq	r2,zero,310a9c <altera_avalon_jtag_uart_irq+0x1a8>
  310a88:	e0bffb17 	ldw	r2,-20(fp)
  310a8c:	10c00d17 	ldw	r3,52(r2)
  310a90:	e0bffb17 	ldw	r2,-20(fp)
  310a94:	10800c17 	ldw	r2,48(r2)
  310a98:	18bfe51e 	bne	r3,r2,310a30 <__alt_data_end+0xffff0a30>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  310a9c:	e0bffa17 	ldw	r2,-24(fp)
  310aa0:	103f9d26 	beq	r2,zero,310918 <__alt_data_end+0xffff0918>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  310aa4:	e0bffb17 	ldw	r2,-20(fp)
  310aa8:	10c00817 	ldw	r3,32(r2)
  310aac:	00bfff44 	movi	r2,-3
  310ab0:	1886703a 	and	r3,r3,r2
  310ab4:	e0bffb17 	ldw	r2,-20(fp)
  310ab8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  310abc:	e0bffb17 	ldw	r2,-20(fp)
  310ac0:	10800017 	ldw	r2,0(r2)
  310ac4:	10800104 	addi	r2,r2,4
  310ac8:	1007883a 	mov	r3,r2
  310acc:	e0bffb17 	ldw	r2,-20(fp)
  310ad0:	10800817 	ldw	r2,32(r2)
  310ad4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  310ad8:	e0bffc17 	ldw	r2,-16(fp)
  310adc:	10800104 	addi	r2,r2,4
  310ae0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  310ae4:	003f8c06 	br	310918 <__alt_data_end+0xffff0918>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  310ae8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  310aec:	0001883a 	nop
  310af0:	e037883a 	mov	sp,fp
  310af4:	df000017 	ldw	fp,0(sp)
  310af8:	dec00104 	addi	sp,sp,4
  310afc:	f800283a 	ret

00310b00 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  310b00:	defff804 	addi	sp,sp,-32
  310b04:	df000715 	stw	fp,28(sp)
  310b08:	df000704 	addi	fp,sp,28
  310b0c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  310b10:	e0bffb17 	ldw	r2,-20(fp)
  310b14:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  310b18:	e0bff917 	ldw	r2,-28(fp)
  310b1c:	10800017 	ldw	r2,0(r2)
  310b20:	10800104 	addi	r2,r2,4
  310b24:	10800037 	ldwio	r2,0(r2)
  310b28:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  310b2c:	e0bffa17 	ldw	r2,-24(fp)
  310b30:	1081000c 	andi	r2,r2,1024
  310b34:	10000b26 	beq	r2,zero,310b64 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  310b38:	e0bff917 	ldw	r2,-28(fp)
  310b3c:	10800017 	ldw	r2,0(r2)
  310b40:	10800104 	addi	r2,r2,4
  310b44:	1007883a 	mov	r3,r2
  310b48:	e0bff917 	ldw	r2,-28(fp)
  310b4c:	10800817 	ldw	r2,32(r2)
  310b50:	10810014 	ori	r2,r2,1024
  310b54:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  310b58:	e0bff917 	ldw	r2,-28(fp)
  310b5c:	10000915 	stw	zero,36(r2)
  310b60:	00000a06 	br	310b8c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  310b64:	e0bff917 	ldw	r2,-28(fp)
  310b68:	10c00917 	ldw	r3,36(r2)
  310b6c:	00a00034 	movhi	r2,32768
  310b70:	10bfff04 	addi	r2,r2,-4
  310b74:	10c00536 	bltu	r2,r3,310b8c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  310b78:	e0bff917 	ldw	r2,-28(fp)
  310b7c:	10800917 	ldw	r2,36(r2)
  310b80:	10c00044 	addi	r3,r2,1
  310b84:	e0bff917 	ldw	r2,-28(fp)
  310b88:	10c00915 	stw	r3,36(r2)
  310b8c:	d0a5aa17 	ldw	r2,-26968(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  310b90:	e037883a 	mov	sp,fp
  310b94:	df000017 	ldw	fp,0(sp)
  310b98:	dec00104 	addi	sp,sp,4
  310b9c:	f800283a 	ret

00310ba0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  310ba0:	defffd04 	addi	sp,sp,-12
  310ba4:	df000215 	stw	fp,8(sp)
  310ba8:	df000204 	addi	fp,sp,8
  310bac:	e13ffe15 	stw	r4,-8(fp)
  310bb0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  310bb4:	00000506 	br	310bcc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  310bb8:	e0bfff17 	ldw	r2,-4(fp)
  310bbc:	1090000c 	andi	r2,r2,16384
  310bc0:	10000226 	beq	r2,zero,310bcc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  310bc4:	00bffd44 	movi	r2,-11
  310bc8:	00000b06 	br	310bf8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  310bcc:	e0bffe17 	ldw	r2,-8(fp)
  310bd0:	10c00d17 	ldw	r3,52(r2)
  310bd4:	e0bffe17 	ldw	r2,-8(fp)
  310bd8:	10800c17 	ldw	r2,48(r2)
  310bdc:	18800526 	beq	r3,r2,310bf4 <altera_avalon_jtag_uart_close+0x54>
  310be0:	e0bffe17 	ldw	r2,-8(fp)
  310be4:	10c00917 	ldw	r3,36(r2)
  310be8:	e0bffe17 	ldw	r2,-8(fp)
  310bec:	10800117 	ldw	r2,4(r2)
  310bf0:	18bff136 	bltu	r3,r2,310bb8 <__alt_data_end+0xffff0bb8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  310bf4:	0005883a 	mov	r2,zero
}
  310bf8:	e037883a 	mov	sp,fp
  310bfc:	df000017 	ldw	fp,0(sp)
  310c00:	dec00104 	addi	sp,sp,4
  310c04:	f800283a 	ret

00310c08 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  310c08:	defffa04 	addi	sp,sp,-24
  310c0c:	df000515 	stw	fp,20(sp)
  310c10:	df000504 	addi	fp,sp,20
  310c14:	e13ffd15 	stw	r4,-12(fp)
  310c18:	e17ffe15 	stw	r5,-8(fp)
  310c1c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  310c20:	00bff9c4 	movi	r2,-25
  310c24:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  310c28:	e0bffe17 	ldw	r2,-8(fp)
  310c2c:	10da8060 	cmpeqi	r3,r2,27137
  310c30:	1800031e 	bne	r3,zero,310c40 <altera_avalon_jtag_uart_ioctl+0x38>
  310c34:	109a80a0 	cmpeqi	r2,r2,27138
  310c38:	1000181e 	bne	r2,zero,310c9c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  310c3c:	00002906 	br	310ce4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  310c40:	e0bffd17 	ldw	r2,-12(fp)
  310c44:	10c00117 	ldw	r3,4(r2)
  310c48:	00a00034 	movhi	r2,32768
  310c4c:	10bfffc4 	addi	r2,r2,-1
  310c50:	18802126 	beq	r3,r2,310cd8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  310c54:	e0bfff17 	ldw	r2,-4(fp)
  310c58:	10800017 	ldw	r2,0(r2)
  310c5c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  310c60:	e0bffc17 	ldw	r2,-16(fp)
  310c64:	10800090 	cmplti	r2,r2,2
  310c68:	1000061e 	bne	r2,zero,310c84 <altera_avalon_jtag_uart_ioctl+0x7c>
  310c6c:	e0fffc17 	ldw	r3,-16(fp)
  310c70:	00a00034 	movhi	r2,32768
  310c74:	10bfffc4 	addi	r2,r2,-1
  310c78:	18800226 	beq	r3,r2,310c84 <altera_avalon_jtag_uart_ioctl+0x7c>
  310c7c:	e0bffc17 	ldw	r2,-16(fp)
  310c80:	00000206 	br	310c8c <altera_avalon_jtag_uart_ioctl+0x84>
  310c84:	00a00034 	movhi	r2,32768
  310c88:	10bfff84 	addi	r2,r2,-2
  310c8c:	e0fffd17 	ldw	r3,-12(fp)
  310c90:	18800115 	stw	r2,4(r3)
      rc = 0;
  310c94:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  310c98:	00000f06 	br	310cd8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  310c9c:	e0bffd17 	ldw	r2,-12(fp)
  310ca0:	10c00117 	ldw	r3,4(r2)
  310ca4:	00a00034 	movhi	r2,32768
  310ca8:	10bfffc4 	addi	r2,r2,-1
  310cac:	18800c26 	beq	r3,r2,310ce0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  310cb0:	e0bffd17 	ldw	r2,-12(fp)
  310cb4:	10c00917 	ldw	r3,36(r2)
  310cb8:	e0bffd17 	ldw	r2,-12(fp)
  310cbc:	10800117 	ldw	r2,4(r2)
  310cc0:	1885803a 	cmpltu	r2,r3,r2
  310cc4:	10c03fcc 	andi	r3,r2,255
  310cc8:	e0bfff17 	ldw	r2,-4(fp)
  310ccc:	10c00015 	stw	r3,0(r2)
      rc = 0;
  310cd0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  310cd4:	00000206 	br	310ce0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  310cd8:	0001883a 	nop
  310cdc:	00000106 	br	310ce4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  310ce0:	0001883a 	nop

  default:
    break;
  }

  return rc;
  310ce4:	e0bffb17 	ldw	r2,-20(fp)
}
  310ce8:	e037883a 	mov	sp,fp
  310cec:	df000017 	ldw	fp,0(sp)
  310cf0:	dec00104 	addi	sp,sp,4
  310cf4:	f800283a 	ret

00310cf8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  310cf8:	defff304 	addi	sp,sp,-52
  310cfc:	dfc00c15 	stw	ra,48(sp)
  310d00:	df000b15 	stw	fp,44(sp)
  310d04:	df000b04 	addi	fp,sp,44
  310d08:	e13ffc15 	stw	r4,-16(fp)
  310d0c:	e17ffd15 	stw	r5,-12(fp)
  310d10:	e1bffe15 	stw	r6,-8(fp)
  310d14:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  310d18:	e0bffd17 	ldw	r2,-12(fp)
  310d1c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  310d20:	00004706 	br	310e40 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  310d24:	e0bffc17 	ldw	r2,-16(fp)
  310d28:	10800a17 	ldw	r2,40(r2)
  310d2c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  310d30:	e0bffc17 	ldw	r2,-16(fp)
  310d34:	10800b17 	ldw	r2,44(r2)
  310d38:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  310d3c:	e0fff717 	ldw	r3,-36(fp)
  310d40:	e0bff817 	ldw	r2,-32(fp)
  310d44:	18800536 	bltu	r3,r2,310d5c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  310d48:	e0fff717 	ldw	r3,-36(fp)
  310d4c:	e0bff817 	ldw	r2,-32(fp)
  310d50:	1885c83a 	sub	r2,r3,r2
  310d54:	e0bff615 	stw	r2,-40(fp)
  310d58:	00000406 	br	310d6c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  310d5c:	00c20004 	movi	r3,2048
  310d60:	e0bff817 	ldw	r2,-32(fp)
  310d64:	1885c83a 	sub	r2,r3,r2
  310d68:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  310d6c:	e0bff617 	ldw	r2,-40(fp)
  310d70:	10001e26 	beq	r2,zero,310dec <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  310d74:	e0fffe17 	ldw	r3,-8(fp)
  310d78:	e0bff617 	ldw	r2,-40(fp)
  310d7c:	1880022e 	bgeu	r3,r2,310d88 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  310d80:	e0bffe17 	ldw	r2,-8(fp)
  310d84:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  310d88:	e0bffc17 	ldw	r2,-16(fp)
  310d8c:	10c00e04 	addi	r3,r2,56
  310d90:	e0bff817 	ldw	r2,-32(fp)
  310d94:	1885883a 	add	r2,r3,r2
  310d98:	e1bff617 	ldw	r6,-40(fp)
  310d9c:	100b883a 	mov	r5,r2
  310da0:	e13ff517 	ldw	r4,-44(fp)
  310da4:	03122140 	call	312214 <memcpy>
      ptr   += n;
  310da8:	e0fff517 	ldw	r3,-44(fp)
  310dac:	e0bff617 	ldw	r2,-40(fp)
  310db0:	1885883a 	add	r2,r3,r2
  310db4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  310db8:	e0fffe17 	ldw	r3,-8(fp)
  310dbc:	e0bff617 	ldw	r2,-40(fp)
  310dc0:	1885c83a 	sub	r2,r3,r2
  310dc4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  310dc8:	e0fff817 	ldw	r3,-32(fp)
  310dcc:	e0bff617 	ldw	r2,-40(fp)
  310dd0:	1885883a 	add	r2,r3,r2
  310dd4:	10c1ffcc 	andi	r3,r2,2047
  310dd8:	e0bffc17 	ldw	r2,-16(fp)
  310ddc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  310de0:	e0bffe17 	ldw	r2,-8(fp)
  310de4:	00bfcf16 	blt	zero,r2,310d24 <__alt_data_end+0xffff0d24>
  310de8:	00000106 	br	310df0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  310dec:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  310df0:	e0fff517 	ldw	r3,-44(fp)
  310df4:	e0bffd17 	ldw	r2,-12(fp)
  310df8:	1880141e 	bne	r3,r2,310e4c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  310dfc:	e0bfff17 	ldw	r2,-4(fp)
  310e00:	1090000c 	andi	r2,r2,16384
  310e04:	1000131e 	bne	r2,zero,310e54 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  310e08:	0001883a 	nop
  310e0c:	e0bffc17 	ldw	r2,-16(fp)
  310e10:	10c00a17 	ldw	r3,40(r2)
  310e14:	e0bff717 	ldw	r2,-36(fp)
  310e18:	1880051e 	bne	r3,r2,310e30 <altera_avalon_jtag_uart_read+0x138>
  310e1c:	e0bffc17 	ldw	r2,-16(fp)
  310e20:	10c00917 	ldw	r3,36(r2)
  310e24:	e0bffc17 	ldw	r2,-16(fp)
  310e28:	10800117 	ldw	r2,4(r2)
  310e2c:	18bff736 	bltu	r3,r2,310e0c <__alt_data_end+0xffff0e0c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  310e30:	e0bffc17 	ldw	r2,-16(fp)
  310e34:	10c00a17 	ldw	r3,40(r2)
  310e38:	e0bff717 	ldw	r2,-36(fp)
  310e3c:	18800726 	beq	r3,r2,310e5c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  310e40:	e0bffe17 	ldw	r2,-8(fp)
  310e44:	00bfb716 	blt	zero,r2,310d24 <__alt_data_end+0xffff0d24>
  310e48:	00000506 	br	310e60 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  310e4c:	0001883a 	nop
  310e50:	00000306 	br	310e60 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  310e54:	0001883a 	nop
  310e58:	00000106 	br	310e60 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  310e5c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  310e60:	e0fff517 	ldw	r3,-44(fp)
  310e64:	e0bffd17 	ldw	r2,-12(fp)
  310e68:	18801826 	beq	r3,r2,310ecc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  310e6c:	0005303a 	rdctl	r2,status
  310e70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  310e74:	e0fffb17 	ldw	r3,-20(fp)
  310e78:	00bfff84 	movi	r2,-2
  310e7c:	1884703a 	and	r2,r3,r2
  310e80:	1001703a 	wrctl	status,r2
  
  return context;
  310e84:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  310e88:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  310e8c:	e0bffc17 	ldw	r2,-16(fp)
  310e90:	10800817 	ldw	r2,32(r2)
  310e94:	10c00054 	ori	r3,r2,1
  310e98:	e0bffc17 	ldw	r2,-16(fp)
  310e9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  310ea0:	e0bffc17 	ldw	r2,-16(fp)
  310ea4:	10800017 	ldw	r2,0(r2)
  310ea8:	10800104 	addi	r2,r2,4
  310eac:	1007883a 	mov	r3,r2
  310eb0:	e0bffc17 	ldw	r2,-16(fp)
  310eb4:	10800817 	ldw	r2,32(r2)
  310eb8:	18800035 	stwio	r2,0(r3)
  310ebc:	e0bffa17 	ldw	r2,-24(fp)
  310ec0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  310ec4:	e0bff917 	ldw	r2,-28(fp)
  310ec8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  310ecc:	e0fff517 	ldw	r3,-44(fp)
  310ed0:	e0bffd17 	ldw	r2,-12(fp)
  310ed4:	18800426 	beq	r3,r2,310ee8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  310ed8:	e0fff517 	ldw	r3,-44(fp)
  310edc:	e0bffd17 	ldw	r2,-12(fp)
  310ee0:	1885c83a 	sub	r2,r3,r2
  310ee4:	00000606 	br	310f00 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  310ee8:	e0bfff17 	ldw	r2,-4(fp)
  310eec:	1090000c 	andi	r2,r2,16384
  310ef0:	10000226 	beq	r2,zero,310efc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  310ef4:	00bffd44 	movi	r2,-11
  310ef8:	00000106 	br	310f00 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  310efc:	00bffec4 	movi	r2,-5
}
  310f00:	e037883a 	mov	sp,fp
  310f04:	dfc00117 	ldw	ra,4(sp)
  310f08:	df000017 	ldw	fp,0(sp)
  310f0c:	dec00204 	addi	sp,sp,8
  310f10:	f800283a 	ret

00310f14 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  310f14:	defff304 	addi	sp,sp,-52
  310f18:	dfc00c15 	stw	ra,48(sp)
  310f1c:	df000b15 	stw	fp,44(sp)
  310f20:	df000b04 	addi	fp,sp,44
  310f24:	e13ffc15 	stw	r4,-16(fp)
  310f28:	e17ffd15 	stw	r5,-12(fp)
  310f2c:	e1bffe15 	stw	r6,-8(fp)
  310f30:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  310f34:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  310f38:	e0bffd17 	ldw	r2,-12(fp)
  310f3c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  310f40:	00003706 	br	311020 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  310f44:	e0bffc17 	ldw	r2,-16(fp)
  310f48:	10800c17 	ldw	r2,48(r2)
  310f4c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  310f50:	e0bffc17 	ldw	r2,-16(fp)
  310f54:	10800d17 	ldw	r2,52(r2)
  310f58:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  310f5c:	e0fff917 	ldw	r3,-28(fp)
  310f60:	e0bff517 	ldw	r2,-44(fp)
  310f64:	1880062e 	bgeu	r3,r2,310f80 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  310f68:	e0fff517 	ldw	r3,-44(fp)
  310f6c:	e0bff917 	ldw	r2,-28(fp)
  310f70:	1885c83a 	sub	r2,r3,r2
  310f74:	10bfffc4 	addi	r2,r2,-1
  310f78:	e0bff615 	stw	r2,-40(fp)
  310f7c:	00000b06 	br	310fac <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  310f80:	e0bff517 	ldw	r2,-44(fp)
  310f84:	10000526 	beq	r2,zero,310f9c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  310f88:	00c20004 	movi	r3,2048
  310f8c:	e0bff917 	ldw	r2,-28(fp)
  310f90:	1885c83a 	sub	r2,r3,r2
  310f94:	e0bff615 	stw	r2,-40(fp)
  310f98:	00000406 	br	310fac <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  310f9c:	00c1ffc4 	movi	r3,2047
  310fa0:	e0bff917 	ldw	r2,-28(fp)
  310fa4:	1885c83a 	sub	r2,r3,r2
  310fa8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  310fac:	e0bff617 	ldw	r2,-40(fp)
  310fb0:	10001e26 	beq	r2,zero,31102c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  310fb4:	e0fffe17 	ldw	r3,-8(fp)
  310fb8:	e0bff617 	ldw	r2,-40(fp)
  310fbc:	1880022e 	bgeu	r3,r2,310fc8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  310fc0:	e0bffe17 	ldw	r2,-8(fp)
  310fc4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  310fc8:	e0bffc17 	ldw	r2,-16(fp)
  310fcc:	10c20e04 	addi	r3,r2,2104
  310fd0:	e0bff917 	ldw	r2,-28(fp)
  310fd4:	1885883a 	add	r2,r3,r2
  310fd8:	e1bff617 	ldw	r6,-40(fp)
  310fdc:	e17ffd17 	ldw	r5,-12(fp)
  310fe0:	1009883a 	mov	r4,r2
  310fe4:	03122140 	call	312214 <memcpy>
      ptr   += n;
  310fe8:	e0fffd17 	ldw	r3,-12(fp)
  310fec:	e0bff617 	ldw	r2,-40(fp)
  310ff0:	1885883a 	add	r2,r3,r2
  310ff4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  310ff8:	e0fffe17 	ldw	r3,-8(fp)
  310ffc:	e0bff617 	ldw	r2,-40(fp)
  311000:	1885c83a 	sub	r2,r3,r2
  311004:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  311008:	e0fff917 	ldw	r3,-28(fp)
  31100c:	e0bff617 	ldw	r2,-40(fp)
  311010:	1885883a 	add	r2,r3,r2
  311014:	10c1ffcc 	andi	r3,r2,2047
  311018:	e0bffc17 	ldw	r2,-16(fp)
  31101c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  311020:	e0bffe17 	ldw	r2,-8(fp)
  311024:	00bfc716 	blt	zero,r2,310f44 <__alt_data_end+0xffff0f44>
  311028:	00000106 	br	311030 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  31102c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  311030:	0005303a 	rdctl	r2,status
  311034:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  311038:	e0fffb17 	ldw	r3,-20(fp)
  31103c:	00bfff84 	movi	r2,-2
  311040:	1884703a 	and	r2,r3,r2
  311044:	1001703a 	wrctl	status,r2
  
  return context;
  311048:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  31104c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  311050:	e0bffc17 	ldw	r2,-16(fp)
  311054:	10800817 	ldw	r2,32(r2)
  311058:	10c00094 	ori	r3,r2,2
  31105c:	e0bffc17 	ldw	r2,-16(fp)
  311060:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  311064:	e0bffc17 	ldw	r2,-16(fp)
  311068:	10800017 	ldw	r2,0(r2)
  31106c:	10800104 	addi	r2,r2,4
  311070:	1007883a 	mov	r3,r2
  311074:	e0bffc17 	ldw	r2,-16(fp)
  311078:	10800817 	ldw	r2,32(r2)
  31107c:	18800035 	stwio	r2,0(r3)
  311080:	e0bffa17 	ldw	r2,-24(fp)
  311084:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  311088:	e0bff817 	ldw	r2,-32(fp)
  31108c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  311090:	e0bffe17 	ldw	r2,-8(fp)
  311094:	0080100e 	bge	zero,r2,3110d8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  311098:	e0bfff17 	ldw	r2,-4(fp)
  31109c:	1090000c 	andi	r2,r2,16384
  3110a0:	1000101e 	bne	r2,zero,3110e4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  3110a4:	0001883a 	nop
  3110a8:	e0bffc17 	ldw	r2,-16(fp)
  3110ac:	10c00d17 	ldw	r3,52(r2)
  3110b0:	e0bff517 	ldw	r2,-44(fp)
  3110b4:	1880051e 	bne	r3,r2,3110cc <altera_avalon_jtag_uart_write+0x1b8>
  3110b8:	e0bffc17 	ldw	r2,-16(fp)
  3110bc:	10c00917 	ldw	r3,36(r2)
  3110c0:	e0bffc17 	ldw	r2,-16(fp)
  3110c4:	10800117 	ldw	r2,4(r2)
  3110c8:	18bff736 	bltu	r3,r2,3110a8 <__alt_data_end+0xffff10a8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  3110cc:	e0bffc17 	ldw	r2,-16(fp)
  3110d0:	10800917 	ldw	r2,36(r2)
  3110d4:	1000051e 	bne	r2,zero,3110ec <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  3110d8:	e0bffe17 	ldw	r2,-8(fp)
  3110dc:	00bfd016 	blt	zero,r2,311020 <__alt_data_end+0xffff1020>
  3110e0:	00000306 	br	3110f0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  3110e4:	0001883a 	nop
  3110e8:	00000106 	br	3110f0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  3110ec:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  3110f0:	e0fffd17 	ldw	r3,-12(fp)
  3110f4:	e0bff717 	ldw	r2,-36(fp)
  3110f8:	18800426 	beq	r3,r2,31110c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  3110fc:	e0fffd17 	ldw	r3,-12(fp)
  311100:	e0bff717 	ldw	r2,-36(fp)
  311104:	1885c83a 	sub	r2,r3,r2
  311108:	00000606 	br	311124 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  31110c:	e0bfff17 	ldw	r2,-4(fp)
  311110:	1090000c 	andi	r2,r2,16384
  311114:	10000226 	beq	r2,zero,311120 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  311118:	00bffd44 	movi	r2,-11
  31111c:	00000106 	br	311124 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  311120:	00bffec4 	movi	r2,-5
}
  311124:	e037883a 	mov	sp,fp
  311128:	dfc00117 	ldw	ra,4(sp)
  31112c:	df000017 	ldw	fp,0(sp)
  311130:	dec00204 	addi	sp,sp,8
  311134:	f800283a 	ret

00311138 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  311138:	defff504 	addi	sp,sp,-44
  31113c:	df000a15 	stw	fp,40(sp)
  311140:	df000a04 	addi	fp,sp,40
  311144:	e13ffc15 	stw	r4,-16(fp)
  311148:	e17ffd15 	stw	r5,-12(fp)
  31114c:	e1bffe15 	stw	r6,-8(fp)
  311150:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  311154:	e03ff615 	stw	zero,-40(fp)
  311158:	d0a5aa17 	ldw	r2,-26968(gp)
  
  if (alt_ticks_per_second ())
  31115c:	10003c26 	beq	r2,zero,311250 <alt_alarm_start+0x118>
  {
    if (alarm)
  311160:	e0bffc17 	ldw	r2,-16(fp)
  311164:	10003826 	beq	r2,zero,311248 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  311168:	e0bffc17 	ldw	r2,-16(fp)
  31116c:	e0fffe17 	ldw	r3,-8(fp)
  311170:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  311174:	e0bffc17 	ldw	r2,-16(fp)
  311178:	e0ffff17 	ldw	r3,-4(fp)
  31117c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  311180:	0005303a 	rdctl	r2,status
  311184:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  311188:	e0fff917 	ldw	r3,-28(fp)
  31118c:	00bfff84 	movi	r2,-2
  311190:	1884703a 	and	r2,r3,r2
  311194:	1001703a 	wrctl	status,r2
  
  return context;
  311198:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  31119c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  3111a0:	d0a5ab17 	ldw	r2,-26964(gp)
      
      current_nticks = alt_nticks();
  3111a4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  3111a8:	e0fffd17 	ldw	r3,-12(fp)
  3111ac:	e0bff617 	ldw	r2,-40(fp)
  3111b0:	1885883a 	add	r2,r3,r2
  3111b4:	10c00044 	addi	r3,r2,1
  3111b8:	e0bffc17 	ldw	r2,-16(fp)
  3111bc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  3111c0:	e0bffc17 	ldw	r2,-16(fp)
  3111c4:	10c00217 	ldw	r3,8(r2)
  3111c8:	e0bff617 	ldw	r2,-40(fp)
  3111cc:	1880042e 	bgeu	r3,r2,3111e0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  3111d0:	e0bffc17 	ldw	r2,-16(fp)
  3111d4:	00c00044 	movi	r3,1
  3111d8:	10c00405 	stb	r3,16(r2)
  3111dc:	00000206 	br	3111e8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  3111e0:	e0bffc17 	ldw	r2,-16(fp)
  3111e4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  3111e8:	e0bffc17 	ldw	r2,-16(fp)
  3111ec:	d0e00904 	addi	r3,gp,-32732
  3111f0:	e0fffa15 	stw	r3,-24(fp)
  3111f4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  3111f8:	e0bffb17 	ldw	r2,-20(fp)
  3111fc:	e0fffa17 	ldw	r3,-24(fp)
  311200:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  311204:	e0bffa17 	ldw	r2,-24(fp)
  311208:	10c00017 	ldw	r3,0(r2)
  31120c:	e0bffb17 	ldw	r2,-20(fp)
  311210:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  311214:	e0bffa17 	ldw	r2,-24(fp)
  311218:	10800017 	ldw	r2,0(r2)
  31121c:	e0fffb17 	ldw	r3,-20(fp)
  311220:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  311224:	e0bffa17 	ldw	r2,-24(fp)
  311228:	e0fffb17 	ldw	r3,-20(fp)
  31122c:	10c00015 	stw	r3,0(r2)
  311230:	e0bff817 	ldw	r2,-32(fp)
  311234:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  311238:	e0bff717 	ldw	r2,-36(fp)
  31123c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  311240:	0005883a 	mov	r2,zero
  311244:	00000306 	br	311254 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  311248:	00bffa84 	movi	r2,-22
  31124c:	00000106 	br	311254 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  311250:	00bfde84 	movi	r2,-134
  }
}
  311254:	e037883a 	mov	sp,fp
  311258:	df000017 	ldw	fp,0(sp)
  31125c:	dec00104 	addi	sp,sp,4
  311260:	f800283a 	ret

00311264 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  311264:	defffe04 	addi	sp,sp,-8
  311268:	dfc00115 	stw	ra,4(sp)
  31126c:	df000015 	stw	fp,0(sp)
  311270:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  311274:	d0a00717 	ldw	r2,-32740(gp)
  311278:	10000326 	beq	r2,zero,311288 <alt_get_errno+0x24>
  31127c:	d0a00717 	ldw	r2,-32740(gp)
  311280:	103ee83a 	callr	r2
  311284:	00000106 	br	31128c <alt_get_errno+0x28>
  311288:	d0a5ad04 	addi	r2,gp,-26956
}
  31128c:	e037883a 	mov	sp,fp
  311290:	dfc00117 	ldw	ra,4(sp)
  311294:	df000017 	ldw	fp,0(sp)
  311298:	dec00204 	addi	sp,sp,8
  31129c:	f800283a 	ret

003112a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  3112a0:	defffb04 	addi	sp,sp,-20
  3112a4:	dfc00415 	stw	ra,16(sp)
  3112a8:	df000315 	stw	fp,12(sp)
  3112ac:	df000304 	addi	fp,sp,12
  3112b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  3112b4:	e0bfff17 	ldw	r2,-4(fp)
  3112b8:	10000816 	blt	r2,zero,3112dc <close+0x3c>
  3112bc:	01400304 	movi	r5,12
  3112c0:	e13fff17 	ldw	r4,-4(fp)
  3112c4:	031048c0 	call	31048c <__mulsi3>
  3112c8:	1007883a 	mov	r3,r2
  3112cc:	00800c74 	movhi	r2,49
  3112d0:	108dde04 	addi	r2,r2,14200
  3112d4:	1885883a 	add	r2,r3,r2
  3112d8:	00000106 	br	3112e0 <close+0x40>
  3112dc:	0005883a 	mov	r2,zero
  3112e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  3112e4:	e0bffd17 	ldw	r2,-12(fp)
  3112e8:	10001926 	beq	r2,zero,311350 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  3112ec:	e0bffd17 	ldw	r2,-12(fp)
  3112f0:	10800017 	ldw	r2,0(r2)
  3112f4:	10800417 	ldw	r2,16(r2)
  3112f8:	10000626 	beq	r2,zero,311314 <close+0x74>
  3112fc:	e0bffd17 	ldw	r2,-12(fp)
  311300:	10800017 	ldw	r2,0(r2)
  311304:	10800417 	ldw	r2,16(r2)
  311308:	e13ffd17 	ldw	r4,-12(fp)
  31130c:	103ee83a 	callr	r2
  311310:	00000106 	br	311318 <close+0x78>
  311314:	0005883a 	mov	r2,zero
  311318:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  31131c:	e13fff17 	ldw	r4,-4(fp)
  311320:	0311c080 	call	311c08 <alt_release_fd>
    if (rval < 0)
  311324:	e0bffe17 	ldw	r2,-8(fp)
  311328:	1000070e 	bge	r2,zero,311348 <close+0xa8>
    {
      ALT_ERRNO = -rval;
  31132c:	03112640 	call	311264 <alt_get_errno>
  311330:	1007883a 	mov	r3,r2
  311334:	e0bffe17 	ldw	r2,-8(fp)
  311338:	0085c83a 	sub	r2,zero,r2
  31133c:	18800015 	stw	r2,0(r3)
      return -1;
  311340:	00bfffc4 	movi	r2,-1
  311344:	00000706 	br	311364 <close+0xc4>
    }
    return 0;
  311348:	0005883a 	mov	r2,zero
  31134c:	00000506 	br	311364 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  311350:	03112640 	call	311264 <alt_get_errno>
  311354:	1007883a 	mov	r3,r2
  311358:	00801444 	movi	r2,81
  31135c:	18800015 	stw	r2,0(r3)
    return -1;
  311360:	00bfffc4 	movi	r2,-1
  }
}
  311364:	e037883a 	mov	sp,fp
  311368:	dfc00117 	ldw	ra,4(sp)
  31136c:	df000017 	ldw	fp,0(sp)
  311370:	dec00204 	addi	sp,sp,8
  311374:	f800283a 	ret

00311378 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  311378:	deffff04 	addi	sp,sp,-4
  31137c:	df000015 	stw	fp,0(sp)
  311380:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  311384:	0001883a 	nop
  311388:	e037883a 	mov	sp,fp
  31138c:	df000017 	ldw	fp,0(sp)
  311390:	dec00104 	addi	sp,sp,4
  311394:	f800283a 	ret

00311398 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  311398:	defffc04 	addi	sp,sp,-16
  31139c:	df000315 	stw	fp,12(sp)
  3113a0:	df000304 	addi	fp,sp,12
  3113a4:	e13ffd15 	stw	r4,-12(fp)
  3113a8:	e17ffe15 	stw	r5,-8(fp)
  3113ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
  3113b0:	e0bfff17 	ldw	r2,-4(fp)
}
  3113b4:	e037883a 	mov	sp,fp
  3113b8:	df000017 	ldw	fp,0(sp)
  3113bc:	dec00104 	addi	sp,sp,4
  3113c0:	f800283a 	ret

003113c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  3113c4:	defffe04 	addi	sp,sp,-8
  3113c8:	dfc00115 	stw	ra,4(sp)
  3113cc:	df000015 	stw	fp,0(sp)
  3113d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  3113d4:	d0a00717 	ldw	r2,-32740(gp)
  3113d8:	10000326 	beq	r2,zero,3113e8 <alt_get_errno+0x24>
  3113dc:	d0a00717 	ldw	r2,-32740(gp)
  3113e0:	103ee83a 	callr	r2
  3113e4:	00000106 	br	3113ec <alt_get_errno+0x28>
  3113e8:	d0a5ad04 	addi	r2,gp,-26956
}
  3113ec:	e037883a 	mov	sp,fp
  3113f0:	dfc00117 	ldw	ra,4(sp)
  3113f4:	df000017 	ldw	fp,0(sp)
  3113f8:	dec00204 	addi	sp,sp,8
  3113fc:	f800283a 	ret

00311400 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  311400:	defffa04 	addi	sp,sp,-24
  311404:	dfc00515 	stw	ra,20(sp)
  311408:	df000415 	stw	fp,16(sp)
  31140c:	df000404 	addi	fp,sp,16
  311410:	e13ffe15 	stw	r4,-8(fp)
  311414:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  311418:	e0bffe17 	ldw	r2,-8(fp)
  31141c:	10000326 	beq	r2,zero,31142c <alt_dev_llist_insert+0x2c>
  311420:	e0bffe17 	ldw	r2,-8(fp)
  311424:	10800217 	ldw	r2,8(r2)
  311428:	1000061e 	bne	r2,zero,311444 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  31142c:	03113c40 	call	3113c4 <alt_get_errno>
  311430:	1007883a 	mov	r3,r2
  311434:	00800584 	movi	r2,22
  311438:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  31143c:	00bffa84 	movi	r2,-22
  311440:	00001306 	br	311490 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  311444:	e0bffe17 	ldw	r2,-8(fp)
  311448:	e0ffff17 	ldw	r3,-4(fp)
  31144c:	e0fffc15 	stw	r3,-16(fp)
  311450:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  311454:	e0bffd17 	ldw	r2,-12(fp)
  311458:	e0fffc17 	ldw	r3,-16(fp)
  31145c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  311460:	e0bffc17 	ldw	r2,-16(fp)
  311464:	10c00017 	ldw	r3,0(r2)
  311468:	e0bffd17 	ldw	r2,-12(fp)
  31146c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  311470:	e0bffc17 	ldw	r2,-16(fp)
  311474:	10800017 	ldw	r2,0(r2)
  311478:	e0fffd17 	ldw	r3,-12(fp)
  31147c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  311480:	e0bffc17 	ldw	r2,-16(fp)
  311484:	e0fffd17 	ldw	r3,-12(fp)
  311488:	10c00015 	stw	r3,0(r2)

  return 0;  
  31148c:	0005883a 	mov	r2,zero
}
  311490:	e037883a 	mov	sp,fp
  311494:	dfc00117 	ldw	ra,4(sp)
  311498:	df000017 	ldw	fp,0(sp)
  31149c:	dec00204 	addi	sp,sp,8
  3114a0:	f800283a 	ret

003114a4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  3114a4:	defffd04 	addi	sp,sp,-12
  3114a8:	dfc00215 	stw	ra,8(sp)
  3114ac:	df000115 	stw	fp,4(sp)
  3114b0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  3114b4:	00800c74 	movhi	r2,49
  3114b8:	1089af04 	addi	r2,r2,9916
  3114bc:	e0bfff15 	stw	r2,-4(fp)
  3114c0:	00000606 	br	3114dc <_do_ctors+0x38>
        (*ctor) (); 
  3114c4:	e0bfff17 	ldw	r2,-4(fp)
  3114c8:	10800017 	ldw	r2,0(r2)
  3114cc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  3114d0:	e0bfff17 	ldw	r2,-4(fp)
  3114d4:	10bfff04 	addi	r2,r2,-4
  3114d8:	e0bfff15 	stw	r2,-4(fp)
  3114dc:	e0ffff17 	ldw	r3,-4(fp)
  3114e0:	00800c74 	movhi	r2,49
  3114e4:	1089b004 	addi	r2,r2,9920
  3114e8:	18bff62e 	bgeu	r3,r2,3114c4 <__alt_data_end+0xffff14c4>
        (*ctor) (); 
}
  3114ec:	0001883a 	nop
  3114f0:	e037883a 	mov	sp,fp
  3114f4:	dfc00117 	ldw	ra,4(sp)
  3114f8:	df000017 	ldw	fp,0(sp)
  3114fc:	dec00204 	addi	sp,sp,8
  311500:	f800283a 	ret

00311504 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  311504:	defffd04 	addi	sp,sp,-12
  311508:	dfc00215 	stw	ra,8(sp)
  31150c:	df000115 	stw	fp,4(sp)
  311510:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  311514:	00800c74 	movhi	r2,49
  311518:	1089af04 	addi	r2,r2,9916
  31151c:	e0bfff15 	stw	r2,-4(fp)
  311520:	00000606 	br	31153c <_do_dtors+0x38>
        (*dtor) (); 
  311524:	e0bfff17 	ldw	r2,-4(fp)
  311528:	10800017 	ldw	r2,0(r2)
  31152c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  311530:	e0bfff17 	ldw	r2,-4(fp)
  311534:	10bfff04 	addi	r2,r2,-4
  311538:	e0bfff15 	stw	r2,-4(fp)
  31153c:	e0ffff17 	ldw	r3,-4(fp)
  311540:	00800c74 	movhi	r2,49
  311544:	1089b004 	addi	r2,r2,9920
  311548:	18bff62e 	bgeu	r3,r2,311524 <__alt_data_end+0xffff1524>
        (*dtor) (); 
}
  31154c:	0001883a 	nop
  311550:	e037883a 	mov	sp,fp
  311554:	dfc00117 	ldw	ra,4(sp)
  311558:	df000017 	ldw	fp,0(sp)
  31155c:	dec00204 	addi	sp,sp,8
  311560:	f800283a 	ret

00311564 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  311564:	deffff04 	addi	sp,sp,-4
  311568:	df000015 	stw	fp,0(sp)
  31156c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  311570:	0001883a 	nop
  311574:	e037883a 	mov	sp,fp
  311578:	df000017 	ldw	fp,0(sp)
  31157c:	dec00104 	addi	sp,sp,4
  311580:	f800283a 	ret

00311584 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  311584:	defff904 	addi	sp,sp,-28
  311588:	dfc00615 	stw	ra,24(sp)
  31158c:	df000515 	stw	fp,20(sp)
  311590:	df000504 	addi	fp,sp,20
  311594:	e13ffc15 	stw	r4,-16(fp)
  311598:	e17ffd15 	stw	r5,-12(fp)
  31159c:	e1bffe15 	stw	r6,-8(fp)
  3115a0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  3115a4:	e0800217 	ldw	r2,8(fp)
  3115a8:	d8800015 	stw	r2,0(sp)
  3115ac:	e1ffff17 	ldw	r7,-4(fp)
  3115b0:	e1bffe17 	ldw	r6,-8(fp)
  3115b4:	e17ffd17 	ldw	r5,-12(fp)
  3115b8:	e13ffc17 	ldw	r4,-16(fp)
  3115bc:	03117340 	call	311734 <alt_iic_isr_register>
}  
  3115c0:	e037883a 	mov	sp,fp
  3115c4:	dfc00117 	ldw	ra,4(sp)
  3115c8:	df000017 	ldw	fp,0(sp)
  3115cc:	dec00204 	addi	sp,sp,8
  3115d0:	f800283a 	ret

003115d4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  3115d4:	defff904 	addi	sp,sp,-28
  3115d8:	df000615 	stw	fp,24(sp)
  3115dc:	df000604 	addi	fp,sp,24
  3115e0:	e13ffe15 	stw	r4,-8(fp)
  3115e4:	e17fff15 	stw	r5,-4(fp)
  3115e8:	e0bfff17 	ldw	r2,-4(fp)
  3115ec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  3115f0:	0005303a 	rdctl	r2,status
  3115f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  3115f8:	e0fffb17 	ldw	r3,-20(fp)
  3115fc:	00bfff84 	movi	r2,-2
  311600:	1884703a 	and	r2,r3,r2
  311604:	1001703a 	wrctl	status,r2
  
  return context;
  311608:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  31160c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  311610:	00c00044 	movi	r3,1
  311614:	e0bffa17 	ldw	r2,-24(fp)
  311618:	1884983a 	sll	r2,r3,r2
  31161c:	1007883a 	mov	r3,r2
  311620:	d0a5a917 	ldw	r2,-26972(gp)
  311624:	1884b03a 	or	r2,r3,r2
  311628:	d0a5a915 	stw	r2,-26972(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  31162c:	d0a5a917 	ldw	r2,-26972(gp)
  311630:	100170fa 	wrctl	ienable,r2
  311634:	e0bffc17 	ldw	r2,-16(fp)
  311638:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  31163c:	e0bffd17 	ldw	r2,-12(fp)
  311640:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  311644:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  311648:	0001883a 	nop
}
  31164c:	e037883a 	mov	sp,fp
  311650:	df000017 	ldw	fp,0(sp)
  311654:	dec00104 	addi	sp,sp,4
  311658:	f800283a 	ret

0031165c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  31165c:	defff904 	addi	sp,sp,-28
  311660:	df000615 	stw	fp,24(sp)
  311664:	df000604 	addi	fp,sp,24
  311668:	e13ffe15 	stw	r4,-8(fp)
  31166c:	e17fff15 	stw	r5,-4(fp)
  311670:	e0bfff17 	ldw	r2,-4(fp)
  311674:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  311678:	0005303a 	rdctl	r2,status
  31167c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  311680:	e0fffb17 	ldw	r3,-20(fp)
  311684:	00bfff84 	movi	r2,-2
  311688:	1884703a 	and	r2,r3,r2
  31168c:	1001703a 	wrctl	status,r2
  
  return context;
  311690:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  311694:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  311698:	00c00044 	movi	r3,1
  31169c:	e0bffa17 	ldw	r2,-24(fp)
  3116a0:	1884983a 	sll	r2,r3,r2
  3116a4:	0084303a 	nor	r2,zero,r2
  3116a8:	1007883a 	mov	r3,r2
  3116ac:	d0a5a917 	ldw	r2,-26972(gp)
  3116b0:	1884703a 	and	r2,r3,r2
  3116b4:	d0a5a915 	stw	r2,-26972(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  3116b8:	d0a5a917 	ldw	r2,-26972(gp)
  3116bc:	100170fa 	wrctl	ienable,r2
  3116c0:	e0bffc17 	ldw	r2,-16(fp)
  3116c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  3116c8:	e0bffd17 	ldw	r2,-12(fp)
  3116cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  3116d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  3116d4:	0001883a 	nop
}
  3116d8:	e037883a 	mov	sp,fp
  3116dc:	df000017 	ldw	fp,0(sp)
  3116e0:	dec00104 	addi	sp,sp,4
  3116e4:	f800283a 	ret

003116e8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  3116e8:	defffc04 	addi	sp,sp,-16
  3116ec:	df000315 	stw	fp,12(sp)
  3116f0:	df000304 	addi	fp,sp,12
  3116f4:	e13ffe15 	stw	r4,-8(fp)
  3116f8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  3116fc:	000530fa 	rdctl	r2,ienable
  311700:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  311704:	00c00044 	movi	r3,1
  311708:	e0bfff17 	ldw	r2,-4(fp)
  31170c:	1884983a 	sll	r2,r3,r2
  311710:	1007883a 	mov	r3,r2
  311714:	e0bffd17 	ldw	r2,-12(fp)
  311718:	1884703a 	and	r2,r3,r2
  31171c:	1004c03a 	cmpne	r2,r2,zero
  311720:	10803fcc 	andi	r2,r2,255
}
  311724:	e037883a 	mov	sp,fp
  311728:	df000017 	ldw	fp,0(sp)
  31172c:	dec00104 	addi	sp,sp,4
  311730:	f800283a 	ret

00311734 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  311734:	defff504 	addi	sp,sp,-44
  311738:	dfc00a15 	stw	ra,40(sp)
  31173c:	df000915 	stw	fp,36(sp)
  311740:	df000904 	addi	fp,sp,36
  311744:	e13ffc15 	stw	r4,-16(fp)
  311748:	e17ffd15 	stw	r5,-12(fp)
  31174c:	e1bffe15 	stw	r6,-8(fp)
  311750:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  311754:	00bffa84 	movi	r2,-22
  311758:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  31175c:	e0bffd17 	ldw	r2,-12(fp)
  311760:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  311764:	e0bff817 	ldw	r2,-32(fp)
  311768:	10800808 	cmpgei	r2,r2,32
  31176c:	1000271e 	bne	r2,zero,31180c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  311770:	0005303a 	rdctl	r2,status
  311774:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  311778:	e0fffb17 	ldw	r3,-20(fp)
  31177c:	00bfff84 	movi	r2,-2
  311780:	1884703a 	and	r2,r3,r2
  311784:	1001703a 	wrctl	status,r2
  
  return context;
  311788:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  31178c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  311790:	00800c74 	movhi	r2,49
  311794:	1094f504 	addi	r2,r2,21460
  311798:	e0fff817 	ldw	r3,-32(fp)
  31179c:	180690fa 	slli	r3,r3,3
  3117a0:	10c5883a 	add	r2,r2,r3
  3117a4:	e0fffe17 	ldw	r3,-8(fp)
  3117a8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  3117ac:	00800c74 	movhi	r2,49
  3117b0:	1094f504 	addi	r2,r2,21460
  3117b4:	e0fff817 	ldw	r3,-32(fp)
  3117b8:	180690fa 	slli	r3,r3,3
  3117bc:	10c5883a 	add	r2,r2,r3
  3117c0:	10800104 	addi	r2,r2,4
  3117c4:	e0ffff17 	ldw	r3,-4(fp)
  3117c8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  3117cc:	e0bffe17 	ldw	r2,-8(fp)
  3117d0:	10000526 	beq	r2,zero,3117e8 <alt_iic_isr_register+0xb4>
  3117d4:	e0bff817 	ldw	r2,-32(fp)
  3117d8:	100b883a 	mov	r5,r2
  3117dc:	e13ffc17 	ldw	r4,-16(fp)
  3117e0:	03115d40 	call	3115d4 <alt_ic_irq_enable>
  3117e4:	00000406 	br	3117f8 <alt_iic_isr_register+0xc4>
  3117e8:	e0bff817 	ldw	r2,-32(fp)
  3117ec:	100b883a 	mov	r5,r2
  3117f0:	e13ffc17 	ldw	r4,-16(fp)
  3117f4:	031165c0 	call	31165c <alt_ic_irq_disable>
  3117f8:	e0bff715 	stw	r2,-36(fp)
  3117fc:	e0bffa17 	ldw	r2,-24(fp)
  311800:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  311804:	e0bff917 	ldw	r2,-28(fp)
  311808:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  31180c:	e0bff717 	ldw	r2,-36(fp)
}
  311810:	e037883a 	mov	sp,fp
  311814:	dfc00117 	ldw	ra,4(sp)
  311818:	df000017 	ldw	fp,0(sp)
  31181c:	dec00204 	addi	sp,sp,8
  311820:	f800283a 	ret

00311824 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  311824:	defff804 	addi	sp,sp,-32
  311828:	dfc00715 	stw	ra,28(sp)
  31182c:	df000615 	stw	fp,24(sp)
  311830:	dc000515 	stw	r16,20(sp)
  311834:	df000604 	addi	fp,sp,24
  311838:	e13ffb15 	stw	r4,-20(fp)
  31183c:	e17ffc15 	stw	r5,-16(fp)
  311840:	e1bffd15 	stw	r6,-12(fp)
  311844:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  311848:	e1bffe17 	ldw	r6,-8(fp)
  31184c:	e17ffd17 	ldw	r5,-12(fp)
  311850:	e13ffc17 	ldw	r4,-16(fp)
  311854:	0311aac0 	call	311aac <open>
  311858:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  31185c:	e0bffa17 	ldw	r2,-24(fp)
  311860:	10002216 	blt	r2,zero,3118ec <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  311864:	04000c74 	movhi	r16,49
  311868:	840dde04 	addi	r16,r16,14200
  31186c:	e0bffa17 	ldw	r2,-24(fp)
  311870:	01400304 	movi	r5,12
  311874:	1009883a 	mov	r4,r2
  311878:	031048c0 	call	31048c <__mulsi3>
  31187c:	8085883a 	add	r2,r16,r2
  311880:	10c00017 	ldw	r3,0(r2)
  311884:	e0bffb17 	ldw	r2,-20(fp)
  311888:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  31188c:	04000c74 	movhi	r16,49
  311890:	840dde04 	addi	r16,r16,14200
  311894:	e0bffa17 	ldw	r2,-24(fp)
  311898:	01400304 	movi	r5,12
  31189c:	1009883a 	mov	r4,r2
  3118a0:	031048c0 	call	31048c <__mulsi3>
  3118a4:	8085883a 	add	r2,r16,r2
  3118a8:	10800104 	addi	r2,r2,4
  3118ac:	10c00017 	ldw	r3,0(r2)
  3118b0:	e0bffb17 	ldw	r2,-20(fp)
  3118b4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  3118b8:	04000c74 	movhi	r16,49
  3118bc:	840dde04 	addi	r16,r16,14200
  3118c0:	e0bffa17 	ldw	r2,-24(fp)
  3118c4:	01400304 	movi	r5,12
  3118c8:	1009883a 	mov	r4,r2
  3118cc:	031048c0 	call	31048c <__mulsi3>
  3118d0:	8085883a 	add	r2,r16,r2
  3118d4:	10800204 	addi	r2,r2,8
  3118d8:	10c00017 	ldw	r3,0(r2)
  3118dc:	e0bffb17 	ldw	r2,-20(fp)
  3118e0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  3118e4:	e13ffa17 	ldw	r4,-24(fp)
  3118e8:	0311c080 	call	311c08 <alt_release_fd>
  }
} 
  3118ec:	0001883a 	nop
  3118f0:	e6ffff04 	addi	sp,fp,-4
  3118f4:	dfc00217 	ldw	ra,8(sp)
  3118f8:	df000117 	ldw	fp,4(sp)
  3118fc:	dc000017 	ldw	r16,0(sp)
  311900:	dec00304 	addi	sp,sp,12
  311904:	f800283a 	ret

00311908 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  311908:	defffb04 	addi	sp,sp,-20
  31190c:	dfc00415 	stw	ra,16(sp)
  311910:	df000315 	stw	fp,12(sp)
  311914:	df000304 	addi	fp,sp,12
  311918:	e13ffd15 	stw	r4,-12(fp)
  31191c:	e17ffe15 	stw	r5,-8(fp)
  311920:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  311924:	01c07fc4 	movi	r7,511
  311928:	01800044 	movi	r6,1
  31192c:	e17ffd17 	ldw	r5,-12(fp)
  311930:	01000c74 	movhi	r4,49
  311934:	210de104 	addi	r4,r4,14212
  311938:	03118240 	call	311824 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  31193c:	01c07fc4 	movi	r7,511
  311940:	000d883a 	mov	r6,zero
  311944:	e17ffe17 	ldw	r5,-8(fp)
  311948:	01000c74 	movhi	r4,49
  31194c:	210dde04 	addi	r4,r4,14200
  311950:	03118240 	call	311824 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  311954:	01c07fc4 	movi	r7,511
  311958:	01800044 	movi	r6,1
  31195c:	e17fff17 	ldw	r5,-4(fp)
  311960:	01000c74 	movhi	r4,49
  311964:	210de404 	addi	r4,r4,14224
  311968:	03118240 	call	311824 <alt_open_fd>
}  
  31196c:	0001883a 	nop
  311970:	e037883a 	mov	sp,fp
  311974:	dfc00117 	ldw	ra,4(sp)
  311978:	df000017 	ldw	fp,0(sp)
  31197c:	dec00204 	addi	sp,sp,8
  311980:	f800283a 	ret

00311984 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  311984:	defffe04 	addi	sp,sp,-8
  311988:	dfc00115 	stw	ra,4(sp)
  31198c:	df000015 	stw	fp,0(sp)
  311990:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  311994:	d0a00717 	ldw	r2,-32740(gp)
  311998:	10000326 	beq	r2,zero,3119a8 <alt_get_errno+0x24>
  31199c:	d0a00717 	ldw	r2,-32740(gp)
  3119a0:	103ee83a 	callr	r2
  3119a4:	00000106 	br	3119ac <alt_get_errno+0x28>
  3119a8:	d0a5ad04 	addi	r2,gp,-26956
}
  3119ac:	e037883a 	mov	sp,fp
  3119b0:	dfc00117 	ldw	ra,4(sp)
  3119b4:	df000017 	ldw	fp,0(sp)
  3119b8:	dec00204 	addi	sp,sp,8
  3119bc:	f800283a 	ret

003119c0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  3119c0:	defffb04 	addi	sp,sp,-20
  3119c4:	dfc00415 	stw	ra,16(sp)
  3119c8:	df000315 	stw	fp,12(sp)
  3119cc:	dc000215 	stw	r16,8(sp)
  3119d0:	df000304 	addi	fp,sp,12
  3119d4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  3119d8:	e0bffe17 	ldw	r2,-8(fp)
  3119dc:	10800217 	ldw	r2,8(r2)
  3119e0:	10d00034 	orhi	r3,r2,16384
  3119e4:	e0bffe17 	ldw	r2,-8(fp)
  3119e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  3119ec:	e03ffd15 	stw	zero,-12(fp)
  3119f0:	00002306 	br	311a80 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  3119f4:	04000c74 	movhi	r16,49
  3119f8:	840dde04 	addi	r16,r16,14200
  3119fc:	e0bffd17 	ldw	r2,-12(fp)
  311a00:	01400304 	movi	r5,12
  311a04:	1009883a 	mov	r4,r2
  311a08:	031048c0 	call	31048c <__mulsi3>
  311a0c:	8085883a 	add	r2,r16,r2
  311a10:	10c00017 	ldw	r3,0(r2)
  311a14:	e0bffe17 	ldw	r2,-8(fp)
  311a18:	10800017 	ldw	r2,0(r2)
  311a1c:	1880151e 	bne	r3,r2,311a74 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  311a20:	04000c74 	movhi	r16,49
  311a24:	840dde04 	addi	r16,r16,14200
  311a28:	e0bffd17 	ldw	r2,-12(fp)
  311a2c:	01400304 	movi	r5,12
  311a30:	1009883a 	mov	r4,r2
  311a34:	031048c0 	call	31048c <__mulsi3>
  311a38:	8085883a 	add	r2,r16,r2
  311a3c:	10800204 	addi	r2,r2,8
  311a40:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  311a44:	10000b0e 	bge	r2,zero,311a74 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  311a48:	01400304 	movi	r5,12
  311a4c:	e13ffd17 	ldw	r4,-12(fp)
  311a50:	031048c0 	call	31048c <__mulsi3>
  311a54:	1007883a 	mov	r3,r2
  311a58:	00800c74 	movhi	r2,49
  311a5c:	108dde04 	addi	r2,r2,14200
  311a60:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  311a64:	e0bffe17 	ldw	r2,-8(fp)
  311a68:	18800226 	beq	r3,r2,311a74 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  311a6c:	00bffcc4 	movi	r2,-13
  311a70:	00000806 	br	311a94 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  311a74:	e0bffd17 	ldw	r2,-12(fp)
  311a78:	10800044 	addi	r2,r2,1
  311a7c:	e0bffd15 	stw	r2,-12(fp)
  311a80:	d0a00617 	ldw	r2,-32744(gp)
  311a84:	1007883a 	mov	r3,r2
  311a88:	e0bffd17 	ldw	r2,-12(fp)
  311a8c:	18bfd92e 	bgeu	r3,r2,3119f4 <__alt_data_end+0xffff19f4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  311a90:	0005883a 	mov	r2,zero
}
  311a94:	e6ffff04 	addi	sp,fp,-4
  311a98:	dfc00217 	ldw	ra,8(sp)
  311a9c:	df000117 	ldw	fp,4(sp)
  311aa0:	dc000017 	ldw	r16,0(sp)
  311aa4:	dec00304 	addi	sp,sp,12
  311aa8:	f800283a 	ret

00311aac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  311aac:	defff604 	addi	sp,sp,-40
  311ab0:	dfc00915 	stw	ra,36(sp)
  311ab4:	df000815 	stw	fp,32(sp)
  311ab8:	df000804 	addi	fp,sp,32
  311abc:	e13ffd15 	stw	r4,-12(fp)
  311ac0:	e17ffe15 	stw	r5,-8(fp)
  311ac4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  311ac8:	00bfffc4 	movi	r2,-1
  311acc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  311ad0:	00bffb44 	movi	r2,-19
  311ad4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  311ad8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  311adc:	d1600404 	addi	r5,gp,-32752
  311ae0:	e13ffd17 	ldw	r4,-12(fp)
  311ae4:	0311e540 	call	311e54 <alt_find_dev>
  311ae8:	e0bff815 	stw	r2,-32(fp)
  311aec:	e0bff817 	ldw	r2,-32(fp)
  311af0:	1000051e 	bne	r2,zero,311b08 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  311af4:	e13ffd17 	ldw	r4,-12(fp)
  311af8:	0311ee40 	call	311ee4 <alt_find_file>
  311afc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  311b00:	00800044 	movi	r2,1
  311b04:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  311b08:	e0bff817 	ldw	r2,-32(fp)
  311b0c:	10002b26 	beq	r2,zero,311bbc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  311b10:	e13ff817 	ldw	r4,-32(fp)
  311b14:	0311fec0 	call	311fec <alt_get_fd>
  311b18:	e0bff915 	stw	r2,-28(fp)
  311b1c:	e0bff917 	ldw	r2,-28(fp)
  311b20:	1000030e 	bge	r2,zero,311b30 <open+0x84>
    {
      status = index;
  311b24:	e0bff917 	ldw	r2,-28(fp)
  311b28:	e0bffa15 	stw	r2,-24(fp)
  311b2c:	00002506 	br	311bc4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  311b30:	01400304 	movi	r5,12
  311b34:	e13ff917 	ldw	r4,-28(fp)
  311b38:	031048c0 	call	31048c <__mulsi3>
  311b3c:	1007883a 	mov	r3,r2
  311b40:	00800c74 	movhi	r2,49
  311b44:	108dde04 	addi	r2,r2,14200
  311b48:	1885883a 	add	r2,r3,r2
  311b4c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  311b50:	e0fffe17 	ldw	r3,-8(fp)
  311b54:	00900034 	movhi	r2,16384
  311b58:	10bfffc4 	addi	r2,r2,-1
  311b5c:	1886703a 	and	r3,r3,r2
  311b60:	e0bffc17 	ldw	r2,-16(fp)
  311b64:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  311b68:	e0bffb17 	ldw	r2,-20(fp)
  311b6c:	1000051e 	bne	r2,zero,311b84 <open+0xd8>
  311b70:	e13ffc17 	ldw	r4,-16(fp)
  311b74:	03119c00 	call	3119c0 <alt_file_locked>
  311b78:	e0bffa15 	stw	r2,-24(fp)
  311b7c:	e0bffa17 	ldw	r2,-24(fp)
  311b80:	10001016 	blt	r2,zero,311bc4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  311b84:	e0bff817 	ldw	r2,-32(fp)
  311b88:	10800317 	ldw	r2,12(r2)
  311b8c:	10000826 	beq	r2,zero,311bb0 <open+0x104>
  311b90:	e0bff817 	ldw	r2,-32(fp)
  311b94:	10800317 	ldw	r2,12(r2)
  311b98:	e1ffff17 	ldw	r7,-4(fp)
  311b9c:	e1bffe17 	ldw	r6,-8(fp)
  311ba0:	e17ffd17 	ldw	r5,-12(fp)
  311ba4:	e13ffc17 	ldw	r4,-16(fp)
  311ba8:	103ee83a 	callr	r2
  311bac:	00000106 	br	311bb4 <open+0x108>
  311bb0:	0005883a 	mov	r2,zero
  311bb4:	e0bffa15 	stw	r2,-24(fp)
  311bb8:	00000206 	br	311bc4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  311bbc:	00bffb44 	movi	r2,-19
  311bc0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  311bc4:	e0bffa17 	ldw	r2,-24(fp)
  311bc8:	1000090e 	bge	r2,zero,311bf0 <open+0x144>
  {
    alt_release_fd (index);  
  311bcc:	e13ff917 	ldw	r4,-28(fp)
  311bd0:	0311c080 	call	311c08 <alt_release_fd>
    ALT_ERRNO = -status;
  311bd4:	03119840 	call	311984 <alt_get_errno>
  311bd8:	1007883a 	mov	r3,r2
  311bdc:	e0bffa17 	ldw	r2,-24(fp)
  311be0:	0085c83a 	sub	r2,zero,r2
  311be4:	18800015 	stw	r2,0(r3)
    return -1;
  311be8:	00bfffc4 	movi	r2,-1
  311bec:	00000106 	br	311bf4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  311bf0:	e0bff917 	ldw	r2,-28(fp)
}
  311bf4:	e037883a 	mov	sp,fp
  311bf8:	dfc00117 	ldw	ra,4(sp)
  311bfc:	df000017 	ldw	fp,0(sp)
  311c00:	dec00204 	addi	sp,sp,8
  311c04:	f800283a 	ret

00311c08 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  311c08:	defffc04 	addi	sp,sp,-16
  311c0c:	dfc00315 	stw	ra,12(sp)
  311c10:	df000215 	stw	fp,8(sp)
  311c14:	dc000115 	stw	r16,4(sp)
  311c18:	df000204 	addi	fp,sp,8
  311c1c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  311c20:	e0bffe17 	ldw	r2,-8(fp)
  311c24:	108000d0 	cmplti	r2,r2,3
  311c28:	1000111e 	bne	r2,zero,311c70 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  311c2c:	04000c74 	movhi	r16,49
  311c30:	840dde04 	addi	r16,r16,14200
  311c34:	e0bffe17 	ldw	r2,-8(fp)
  311c38:	01400304 	movi	r5,12
  311c3c:	1009883a 	mov	r4,r2
  311c40:	031048c0 	call	31048c <__mulsi3>
  311c44:	8085883a 	add	r2,r16,r2
  311c48:	10800204 	addi	r2,r2,8
  311c4c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  311c50:	04000c74 	movhi	r16,49
  311c54:	840dde04 	addi	r16,r16,14200
  311c58:	e0bffe17 	ldw	r2,-8(fp)
  311c5c:	01400304 	movi	r5,12
  311c60:	1009883a 	mov	r4,r2
  311c64:	031048c0 	call	31048c <__mulsi3>
  311c68:	8085883a 	add	r2,r16,r2
  311c6c:	10000015 	stw	zero,0(r2)
  }
}
  311c70:	0001883a 	nop
  311c74:	e6ffff04 	addi	sp,fp,-4
  311c78:	dfc00217 	ldw	ra,8(sp)
  311c7c:	df000117 	ldw	fp,4(sp)
  311c80:	dc000017 	ldw	r16,0(sp)
  311c84:	dec00304 	addi	sp,sp,12
  311c88:	f800283a 	ret

00311c8c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  311c8c:	defffa04 	addi	sp,sp,-24
  311c90:	df000515 	stw	fp,20(sp)
  311c94:	df000504 	addi	fp,sp,20
  311c98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  311c9c:	0005303a 	rdctl	r2,status
  311ca0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  311ca4:	e0fffc17 	ldw	r3,-16(fp)
  311ca8:	00bfff84 	movi	r2,-2
  311cac:	1884703a 	and	r2,r3,r2
  311cb0:	1001703a 	wrctl	status,r2
  
  return context;
  311cb4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  311cb8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  311cbc:	e0bfff17 	ldw	r2,-4(fp)
  311cc0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  311cc4:	e0bffd17 	ldw	r2,-12(fp)
  311cc8:	10800017 	ldw	r2,0(r2)
  311ccc:	e0fffd17 	ldw	r3,-12(fp)
  311cd0:	18c00117 	ldw	r3,4(r3)
  311cd4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  311cd8:	e0bffd17 	ldw	r2,-12(fp)
  311cdc:	10800117 	ldw	r2,4(r2)
  311ce0:	e0fffd17 	ldw	r3,-12(fp)
  311ce4:	18c00017 	ldw	r3,0(r3)
  311ce8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  311cec:	e0bffd17 	ldw	r2,-12(fp)
  311cf0:	e0fffd17 	ldw	r3,-12(fp)
  311cf4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  311cf8:	e0bffd17 	ldw	r2,-12(fp)
  311cfc:	e0fffd17 	ldw	r3,-12(fp)
  311d00:	10c00015 	stw	r3,0(r2)
  311d04:	e0bffb17 	ldw	r2,-20(fp)
  311d08:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  311d0c:	e0bffe17 	ldw	r2,-8(fp)
  311d10:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  311d14:	0001883a 	nop
  311d18:	e037883a 	mov	sp,fp
  311d1c:	df000017 	ldw	fp,0(sp)
  311d20:	dec00104 	addi	sp,sp,4
  311d24:	f800283a 	ret

00311d28 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  311d28:	defffb04 	addi	sp,sp,-20
  311d2c:	dfc00415 	stw	ra,16(sp)
  311d30:	df000315 	stw	fp,12(sp)
  311d34:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  311d38:	d0a00917 	ldw	r2,-32732(gp)
  311d3c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  311d40:	d0a5ab17 	ldw	r2,-26964(gp)
  311d44:	10800044 	addi	r2,r2,1
  311d48:	d0a5ab15 	stw	r2,-26964(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  311d4c:	00002e06 	br	311e08 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  311d50:	e0bffd17 	ldw	r2,-12(fp)
  311d54:	10800017 	ldw	r2,0(r2)
  311d58:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  311d5c:	e0bffd17 	ldw	r2,-12(fp)
  311d60:	10800403 	ldbu	r2,16(r2)
  311d64:	10803fcc 	andi	r2,r2,255
  311d68:	10000426 	beq	r2,zero,311d7c <alt_tick+0x54>
  311d6c:	d0a5ab17 	ldw	r2,-26964(gp)
  311d70:	1000021e 	bne	r2,zero,311d7c <alt_tick+0x54>
    {
      alarm->rollover = 0;
  311d74:	e0bffd17 	ldw	r2,-12(fp)
  311d78:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  311d7c:	e0bffd17 	ldw	r2,-12(fp)
  311d80:	10800217 	ldw	r2,8(r2)
  311d84:	d0e5ab17 	ldw	r3,-26964(gp)
  311d88:	18801d36 	bltu	r3,r2,311e00 <alt_tick+0xd8>
  311d8c:	e0bffd17 	ldw	r2,-12(fp)
  311d90:	10800403 	ldbu	r2,16(r2)
  311d94:	10803fcc 	andi	r2,r2,255
  311d98:	1000191e 	bne	r2,zero,311e00 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  311d9c:	e0bffd17 	ldw	r2,-12(fp)
  311da0:	10800317 	ldw	r2,12(r2)
  311da4:	e0fffd17 	ldw	r3,-12(fp)
  311da8:	18c00517 	ldw	r3,20(r3)
  311dac:	1809883a 	mov	r4,r3
  311db0:	103ee83a 	callr	r2
  311db4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  311db8:	e0bfff17 	ldw	r2,-4(fp)
  311dbc:	1000031e 	bne	r2,zero,311dcc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  311dc0:	e13ffd17 	ldw	r4,-12(fp)
  311dc4:	0311c8c0 	call	311c8c <alt_alarm_stop>
  311dc8:	00000d06 	br	311e00 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  311dcc:	e0bffd17 	ldw	r2,-12(fp)
  311dd0:	10c00217 	ldw	r3,8(r2)
  311dd4:	e0bfff17 	ldw	r2,-4(fp)
  311dd8:	1887883a 	add	r3,r3,r2
  311ddc:	e0bffd17 	ldw	r2,-12(fp)
  311de0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  311de4:	e0bffd17 	ldw	r2,-12(fp)
  311de8:	10c00217 	ldw	r3,8(r2)
  311dec:	d0a5ab17 	ldw	r2,-26964(gp)
  311df0:	1880032e 	bgeu	r3,r2,311e00 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  311df4:	e0bffd17 	ldw	r2,-12(fp)
  311df8:	00c00044 	movi	r3,1
  311dfc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  311e00:	e0bffe17 	ldw	r2,-8(fp)
  311e04:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  311e08:	e0fffd17 	ldw	r3,-12(fp)
  311e0c:	d0a00904 	addi	r2,gp,-32732
  311e10:	18bfcf1e 	bne	r3,r2,311d50 <__alt_data_end+0xffff1d50>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  311e14:	0001883a 	nop
}
  311e18:	0001883a 	nop
  311e1c:	e037883a 	mov	sp,fp
  311e20:	dfc00117 	ldw	ra,4(sp)
  311e24:	df000017 	ldw	fp,0(sp)
  311e28:	dec00204 	addi	sp,sp,8
  311e2c:	f800283a 	ret

00311e30 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  311e30:	deffff04 	addi	sp,sp,-4
  311e34:	df000015 	stw	fp,0(sp)
  311e38:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  311e3c:	000170fa 	wrctl	ienable,zero
}
  311e40:	0001883a 	nop
  311e44:	e037883a 	mov	sp,fp
  311e48:	df000017 	ldw	fp,0(sp)
  311e4c:	dec00104 	addi	sp,sp,4
  311e50:	f800283a 	ret

00311e54 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  311e54:	defffa04 	addi	sp,sp,-24
  311e58:	dfc00515 	stw	ra,20(sp)
  311e5c:	df000415 	stw	fp,16(sp)
  311e60:	df000404 	addi	fp,sp,16
  311e64:	e13ffe15 	stw	r4,-8(fp)
  311e68:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  311e6c:	e0bfff17 	ldw	r2,-4(fp)
  311e70:	10800017 	ldw	r2,0(r2)
  311e74:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  311e78:	e13ffe17 	ldw	r4,-8(fp)
  311e7c:	031235c0 	call	31235c <strlen>
  311e80:	10800044 	addi	r2,r2,1
  311e84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  311e88:	00000d06 	br	311ec0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  311e8c:	e0bffc17 	ldw	r2,-16(fp)
  311e90:	10800217 	ldw	r2,8(r2)
  311e94:	e0fffd17 	ldw	r3,-12(fp)
  311e98:	180d883a 	mov	r6,r3
  311e9c:	e17ffe17 	ldw	r5,-8(fp)
  311ea0:	1009883a 	mov	r4,r2
  311ea4:	03121980 	call	312198 <memcmp>
  311ea8:	1000021e 	bne	r2,zero,311eb4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  311eac:	e0bffc17 	ldw	r2,-16(fp)
  311eb0:	00000706 	br	311ed0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  311eb4:	e0bffc17 	ldw	r2,-16(fp)
  311eb8:	10800017 	ldw	r2,0(r2)
  311ebc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  311ec0:	e0fffc17 	ldw	r3,-16(fp)
  311ec4:	e0bfff17 	ldw	r2,-4(fp)
  311ec8:	18bff01e 	bne	r3,r2,311e8c <__alt_data_end+0xffff1e8c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  311ecc:	0005883a 	mov	r2,zero
}
  311ed0:	e037883a 	mov	sp,fp
  311ed4:	dfc00117 	ldw	ra,4(sp)
  311ed8:	df000017 	ldw	fp,0(sp)
  311edc:	dec00204 	addi	sp,sp,8
  311ee0:	f800283a 	ret

00311ee4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  311ee4:	defffb04 	addi	sp,sp,-20
  311ee8:	dfc00415 	stw	ra,16(sp)
  311eec:	df000315 	stw	fp,12(sp)
  311ef0:	df000304 	addi	fp,sp,12
  311ef4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  311ef8:	d0a00217 	ldw	r2,-32760(gp)
  311efc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  311f00:	00003106 	br	311fc8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  311f04:	e0bffd17 	ldw	r2,-12(fp)
  311f08:	10800217 	ldw	r2,8(r2)
  311f0c:	1009883a 	mov	r4,r2
  311f10:	031235c0 	call	31235c <strlen>
  311f14:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  311f18:	e0bffd17 	ldw	r2,-12(fp)
  311f1c:	10c00217 	ldw	r3,8(r2)
  311f20:	e0bffe17 	ldw	r2,-8(fp)
  311f24:	10bfffc4 	addi	r2,r2,-1
  311f28:	1885883a 	add	r2,r3,r2
  311f2c:	10800003 	ldbu	r2,0(r2)
  311f30:	10803fcc 	andi	r2,r2,255
  311f34:	1080201c 	xori	r2,r2,128
  311f38:	10bfe004 	addi	r2,r2,-128
  311f3c:	10800bd8 	cmpnei	r2,r2,47
  311f40:	1000031e 	bne	r2,zero,311f50 <alt_find_file+0x6c>
    {
      len -= 1;
  311f44:	e0bffe17 	ldw	r2,-8(fp)
  311f48:	10bfffc4 	addi	r2,r2,-1
  311f4c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  311f50:	e0bffe17 	ldw	r2,-8(fp)
  311f54:	e0ffff17 	ldw	r3,-4(fp)
  311f58:	1885883a 	add	r2,r3,r2
  311f5c:	10800003 	ldbu	r2,0(r2)
  311f60:	10803fcc 	andi	r2,r2,255
  311f64:	1080201c 	xori	r2,r2,128
  311f68:	10bfe004 	addi	r2,r2,-128
  311f6c:	10800be0 	cmpeqi	r2,r2,47
  311f70:	1000081e 	bne	r2,zero,311f94 <alt_find_file+0xb0>
  311f74:	e0bffe17 	ldw	r2,-8(fp)
  311f78:	e0ffff17 	ldw	r3,-4(fp)
  311f7c:	1885883a 	add	r2,r3,r2
  311f80:	10800003 	ldbu	r2,0(r2)
  311f84:	10803fcc 	andi	r2,r2,255
  311f88:	1080201c 	xori	r2,r2,128
  311f8c:	10bfe004 	addi	r2,r2,-128
  311f90:	10000a1e 	bne	r2,zero,311fbc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  311f94:	e0bffd17 	ldw	r2,-12(fp)
  311f98:	10800217 	ldw	r2,8(r2)
  311f9c:	e0fffe17 	ldw	r3,-8(fp)
  311fa0:	180d883a 	mov	r6,r3
  311fa4:	e17fff17 	ldw	r5,-4(fp)
  311fa8:	1009883a 	mov	r4,r2
  311fac:	03121980 	call	312198 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  311fb0:	1000021e 	bne	r2,zero,311fbc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  311fb4:	e0bffd17 	ldw	r2,-12(fp)
  311fb8:	00000706 	br	311fd8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  311fbc:	e0bffd17 	ldw	r2,-12(fp)
  311fc0:	10800017 	ldw	r2,0(r2)
  311fc4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  311fc8:	e0fffd17 	ldw	r3,-12(fp)
  311fcc:	d0a00204 	addi	r2,gp,-32760
  311fd0:	18bfcc1e 	bne	r3,r2,311f04 <__alt_data_end+0xffff1f04>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  311fd4:	0005883a 	mov	r2,zero
}
  311fd8:	e037883a 	mov	sp,fp
  311fdc:	dfc00117 	ldw	ra,4(sp)
  311fe0:	df000017 	ldw	fp,0(sp)
  311fe4:	dec00204 	addi	sp,sp,8
  311fe8:	f800283a 	ret

00311fec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  311fec:	defffa04 	addi	sp,sp,-24
  311ff0:	dfc00515 	stw	ra,20(sp)
  311ff4:	df000415 	stw	fp,16(sp)
  311ff8:	dc000315 	stw	r16,12(sp)
  311ffc:	df000404 	addi	fp,sp,16
  312000:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  312004:	00bffa04 	movi	r2,-24
  312008:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  31200c:	e03ffc15 	stw	zero,-16(fp)
  312010:	00001d06 	br	312088 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
  312014:	04000c74 	movhi	r16,49
  312018:	840dde04 	addi	r16,r16,14200
  31201c:	e0bffc17 	ldw	r2,-16(fp)
  312020:	01400304 	movi	r5,12
  312024:	1009883a 	mov	r4,r2
  312028:	031048c0 	call	31048c <__mulsi3>
  31202c:	8085883a 	add	r2,r16,r2
  312030:	10800017 	ldw	r2,0(r2)
  312034:	1000111e 	bne	r2,zero,31207c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
  312038:	04000c74 	movhi	r16,49
  31203c:	840dde04 	addi	r16,r16,14200
  312040:	e0bffc17 	ldw	r2,-16(fp)
  312044:	01400304 	movi	r5,12
  312048:	1009883a 	mov	r4,r2
  31204c:	031048c0 	call	31048c <__mulsi3>
  312050:	8085883a 	add	r2,r16,r2
  312054:	e0fffe17 	ldw	r3,-8(fp)
  312058:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  31205c:	d0e00617 	ldw	r3,-32744(gp)
  312060:	e0bffc17 	ldw	r2,-16(fp)
  312064:	1880020e 	bge	r3,r2,312070 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
  312068:	e0bffc17 	ldw	r2,-16(fp)
  31206c:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
  312070:	e0bffc17 	ldw	r2,-16(fp)
  312074:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  312078:	00000606 	br	312094 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  31207c:	e0bffc17 	ldw	r2,-16(fp)
  312080:	10800044 	addi	r2,r2,1
  312084:	e0bffc15 	stw	r2,-16(fp)
  312088:	e0bffc17 	ldw	r2,-16(fp)
  31208c:	10800810 	cmplti	r2,r2,32
  312090:	103fe01e 	bne	r2,zero,312014 <__alt_data_end+0xffff2014>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  312094:	e0bffd17 	ldw	r2,-12(fp)
}
  312098:	e6ffff04 	addi	sp,fp,-4
  31209c:	dfc00217 	ldw	ra,8(sp)
  3120a0:	df000117 	ldw	fp,4(sp)
  3120a4:	dc000017 	ldw	r16,0(sp)
  3120a8:	dec00304 	addi	sp,sp,12
  3120ac:	f800283a 	ret

003120b0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  3120b0:	defffe04 	addi	sp,sp,-8
  3120b4:	df000115 	stw	fp,4(sp)
  3120b8:	df000104 	addi	fp,sp,4
  3120bc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  3120c0:	e0bfff17 	ldw	r2,-4(fp)
  3120c4:	10bffe84 	addi	r2,r2,-6
  3120c8:	10c00428 	cmpgeui	r3,r2,16
  3120cc:	18001a1e 	bne	r3,zero,312138 <alt_exception_cause_generated_bad_addr+0x88>
  3120d0:	100690ba 	slli	r3,r2,2
  3120d4:	00800c74 	movhi	r2,49
  3120d8:	10883a04 	addi	r2,r2,8424
  3120dc:	1885883a 	add	r2,r3,r2
  3120e0:	10800017 	ldw	r2,0(r2)
  3120e4:	1000683a 	jmp	r2
  3120e8:	00312128 	cmpgeui	zero,zero,50308
  3120ec:	00312128 	cmpgeui	zero,zero,50308
  3120f0:	00312138 	rdprs	zero,zero,-15228
  3120f4:	00312138 	rdprs	zero,zero,-15228
  3120f8:	00312138 	rdprs	zero,zero,-15228
  3120fc:	00312128 	cmpgeui	zero,zero,50308
  312100:	00312130 	cmpltui	zero,zero,50308
  312104:	00312138 	rdprs	zero,zero,-15228
  312108:	00312128 	cmpgeui	zero,zero,50308
  31210c:	00312128 	cmpgeui	zero,zero,50308
  312110:	00312138 	rdprs	zero,zero,-15228
  312114:	00312128 	cmpgeui	zero,zero,50308
  312118:	00312130 	cmpltui	zero,zero,50308
  31211c:	00312138 	rdprs	zero,zero,-15228
  312120:	00312138 	rdprs	zero,zero,-15228
  312124:	00312128 	cmpgeui	zero,zero,50308
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  312128:	00800044 	movi	r2,1
  31212c:	00000306 	br	31213c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  312130:	0005883a 	mov	r2,zero
  312134:	00000106 	br	31213c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  312138:	0005883a 	mov	r2,zero
  }
}
  31213c:	e037883a 	mov	sp,fp
  312140:	df000017 	ldw	fp,0(sp)
  312144:	dec00104 	addi	sp,sp,4
  312148:	f800283a 	ret

0031214c <atexit>:
  31214c:	200b883a 	mov	r5,r4
  312150:	000f883a 	mov	r7,zero
  312154:	000d883a 	mov	r6,zero
  312158:	0009883a 	mov	r4,zero
  31215c:	03123f41 	jmpi	3123f4 <__register_exitproc>

00312160 <exit>:
  312160:	defffe04 	addi	sp,sp,-8
  312164:	000b883a 	mov	r5,zero
  312168:	dc000015 	stw	r16,0(sp)
  31216c:	dfc00115 	stw	ra,4(sp)
  312170:	2021883a 	mov	r16,r4
  312174:	031250c0 	call	31250c <__call_exitprocs>
  312178:	00800c74 	movhi	r2,49
  31217c:	108f5204 	addi	r2,r2,15688
  312180:	11000017 	ldw	r4,0(r2)
  312184:	20800f17 	ldw	r2,60(r4)
  312188:	10000126 	beq	r2,zero,312190 <exit+0x30>
  31218c:	103ee83a 	callr	r2
  312190:	8009883a 	mov	r4,r16
  312194:	031268c0 	call	31268c <_exit>

00312198 <memcmp>:
  312198:	01c000c4 	movi	r7,3
  31219c:	3980192e 	bgeu	r7,r6,312204 <memcmp+0x6c>
  3121a0:	2144b03a 	or	r2,r4,r5
  3121a4:	11c4703a 	and	r2,r2,r7
  3121a8:	10000f26 	beq	r2,zero,3121e8 <memcmp+0x50>
  3121ac:	20800003 	ldbu	r2,0(r4)
  3121b0:	28c00003 	ldbu	r3,0(r5)
  3121b4:	10c0151e 	bne	r2,r3,31220c <memcmp+0x74>
  3121b8:	31bfff84 	addi	r6,r6,-2
  3121bc:	01ffffc4 	movi	r7,-1
  3121c0:	00000406 	br	3121d4 <memcmp+0x3c>
  3121c4:	20800003 	ldbu	r2,0(r4)
  3121c8:	28c00003 	ldbu	r3,0(r5)
  3121cc:	31bfffc4 	addi	r6,r6,-1
  3121d0:	10c00e1e 	bne	r2,r3,31220c <memcmp+0x74>
  3121d4:	21000044 	addi	r4,r4,1
  3121d8:	29400044 	addi	r5,r5,1
  3121dc:	31fff91e 	bne	r6,r7,3121c4 <__alt_data_end+0xffff21c4>
  3121e0:	0005883a 	mov	r2,zero
  3121e4:	f800283a 	ret
  3121e8:	20c00017 	ldw	r3,0(r4)
  3121ec:	28800017 	ldw	r2,0(r5)
  3121f0:	18bfee1e 	bne	r3,r2,3121ac <__alt_data_end+0xffff21ac>
  3121f4:	31bfff04 	addi	r6,r6,-4
  3121f8:	21000104 	addi	r4,r4,4
  3121fc:	29400104 	addi	r5,r5,4
  312200:	39bff936 	bltu	r7,r6,3121e8 <__alt_data_end+0xffff21e8>
  312204:	303fe91e 	bne	r6,zero,3121ac <__alt_data_end+0xffff21ac>
  312208:	003ff506 	br	3121e0 <__alt_data_end+0xffff21e0>
  31220c:	10c5c83a 	sub	r2,r2,r3
  312210:	f800283a 	ret

00312214 <memcpy>:
  312214:	defffd04 	addi	sp,sp,-12
  312218:	dfc00215 	stw	ra,8(sp)
  31221c:	dc400115 	stw	r17,4(sp)
  312220:	dc000015 	stw	r16,0(sp)
  312224:	00c003c4 	movi	r3,15
  312228:	2005883a 	mov	r2,r4
  31222c:	1980452e 	bgeu	r3,r6,312344 <memcpy+0x130>
  312230:	2906b03a 	or	r3,r5,r4
  312234:	18c000cc 	andi	r3,r3,3
  312238:	1800441e 	bne	r3,zero,31234c <memcpy+0x138>
  31223c:	347ffc04 	addi	r17,r6,-16
  312240:	8822d13a 	srli	r17,r17,4
  312244:	28c00104 	addi	r3,r5,4
  312248:	23400104 	addi	r13,r4,4
  31224c:	8820913a 	slli	r16,r17,4
  312250:	2b000204 	addi	r12,r5,8
  312254:	22c00204 	addi	r11,r4,8
  312258:	84000504 	addi	r16,r16,20
  31225c:	2a800304 	addi	r10,r5,12
  312260:	22400304 	addi	r9,r4,12
  312264:	2c21883a 	add	r16,r5,r16
  312268:	2811883a 	mov	r8,r5
  31226c:	200f883a 	mov	r7,r4
  312270:	41000017 	ldw	r4,0(r8)
  312274:	1fc00017 	ldw	ra,0(r3)
  312278:	63c00017 	ldw	r15,0(r12)
  31227c:	39000015 	stw	r4,0(r7)
  312280:	53800017 	ldw	r14,0(r10)
  312284:	6fc00015 	stw	ra,0(r13)
  312288:	5bc00015 	stw	r15,0(r11)
  31228c:	4b800015 	stw	r14,0(r9)
  312290:	18c00404 	addi	r3,r3,16
  312294:	39c00404 	addi	r7,r7,16
  312298:	42000404 	addi	r8,r8,16
  31229c:	6b400404 	addi	r13,r13,16
  3122a0:	63000404 	addi	r12,r12,16
  3122a4:	5ac00404 	addi	r11,r11,16
  3122a8:	52800404 	addi	r10,r10,16
  3122ac:	4a400404 	addi	r9,r9,16
  3122b0:	1c3fef1e 	bne	r3,r16,312270 <__alt_data_end+0xffff2270>
  3122b4:	89c00044 	addi	r7,r17,1
  3122b8:	380e913a 	slli	r7,r7,4
  3122bc:	310003cc 	andi	r4,r6,15
  3122c0:	02c000c4 	movi	r11,3
  3122c4:	11c7883a 	add	r3,r2,r7
  3122c8:	29cb883a 	add	r5,r5,r7
  3122cc:	5900212e 	bgeu	r11,r4,312354 <memcpy+0x140>
  3122d0:	1813883a 	mov	r9,r3
  3122d4:	2811883a 	mov	r8,r5
  3122d8:	200f883a 	mov	r7,r4
  3122dc:	42800017 	ldw	r10,0(r8)
  3122e0:	4a400104 	addi	r9,r9,4
  3122e4:	39ffff04 	addi	r7,r7,-4
  3122e8:	4abfff15 	stw	r10,-4(r9)
  3122ec:	42000104 	addi	r8,r8,4
  3122f0:	59fffa36 	bltu	r11,r7,3122dc <__alt_data_end+0xffff22dc>
  3122f4:	213fff04 	addi	r4,r4,-4
  3122f8:	2008d0ba 	srli	r4,r4,2
  3122fc:	318000cc 	andi	r6,r6,3
  312300:	21000044 	addi	r4,r4,1
  312304:	2109883a 	add	r4,r4,r4
  312308:	2109883a 	add	r4,r4,r4
  31230c:	1907883a 	add	r3,r3,r4
  312310:	290b883a 	add	r5,r5,r4
  312314:	30000626 	beq	r6,zero,312330 <memcpy+0x11c>
  312318:	198d883a 	add	r6,r3,r6
  31231c:	29c00003 	ldbu	r7,0(r5)
  312320:	18c00044 	addi	r3,r3,1
  312324:	29400044 	addi	r5,r5,1
  312328:	19ffffc5 	stb	r7,-1(r3)
  31232c:	19bffb1e 	bne	r3,r6,31231c <__alt_data_end+0xffff231c>
  312330:	dfc00217 	ldw	ra,8(sp)
  312334:	dc400117 	ldw	r17,4(sp)
  312338:	dc000017 	ldw	r16,0(sp)
  31233c:	dec00304 	addi	sp,sp,12
  312340:	f800283a 	ret
  312344:	2007883a 	mov	r3,r4
  312348:	003ff206 	br	312314 <__alt_data_end+0xffff2314>
  31234c:	2007883a 	mov	r3,r4
  312350:	003ff106 	br	312318 <__alt_data_end+0xffff2318>
  312354:	200d883a 	mov	r6,r4
  312358:	003fee06 	br	312314 <__alt_data_end+0xffff2314>

0031235c <strlen>:
  31235c:	208000cc 	andi	r2,r4,3
  312360:	10002026 	beq	r2,zero,3123e4 <strlen+0x88>
  312364:	20800007 	ldb	r2,0(r4)
  312368:	10002026 	beq	r2,zero,3123ec <strlen+0x90>
  31236c:	2005883a 	mov	r2,r4
  312370:	00000206 	br	31237c <strlen+0x20>
  312374:	10c00007 	ldb	r3,0(r2)
  312378:	18001826 	beq	r3,zero,3123dc <strlen+0x80>
  31237c:	10800044 	addi	r2,r2,1
  312380:	10c000cc 	andi	r3,r2,3
  312384:	183ffb1e 	bne	r3,zero,312374 <__alt_data_end+0xffff2374>
  312388:	10c00017 	ldw	r3,0(r2)
  31238c:	01ffbff4 	movhi	r7,65279
  312390:	39ffbfc4 	addi	r7,r7,-257
  312394:	00ca303a 	nor	r5,zero,r3
  312398:	01a02074 	movhi	r6,32897
  31239c:	19c7883a 	add	r3,r3,r7
  3123a0:	31a02004 	addi	r6,r6,-32640
  3123a4:	1946703a 	and	r3,r3,r5
  3123a8:	1986703a 	and	r3,r3,r6
  3123ac:	1800091e 	bne	r3,zero,3123d4 <strlen+0x78>
  3123b0:	10800104 	addi	r2,r2,4
  3123b4:	10c00017 	ldw	r3,0(r2)
  3123b8:	19cb883a 	add	r5,r3,r7
  3123bc:	00c6303a 	nor	r3,zero,r3
  3123c0:	28c6703a 	and	r3,r5,r3
  3123c4:	1986703a 	and	r3,r3,r6
  3123c8:	183ff926 	beq	r3,zero,3123b0 <__alt_data_end+0xffff23b0>
  3123cc:	00000106 	br	3123d4 <strlen+0x78>
  3123d0:	10800044 	addi	r2,r2,1
  3123d4:	10c00007 	ldb	r3,0(r2)
  3123d8:	183ffd1e 	bne	r3,zero,3123d0 <__alt_data_end+0xffff23d0>
  3123dc:	1105c83a 	sub	r2,r2,r4
  3123e0:	f800283a 	ret
  3123e4:	2005883a 	mov	r2,r4
  3123e8:	003fe706 	br	312388 <__alt_data_end+0xffff2388>
  3123ec:	0005883a 	mov	r2,zero
  3123f0:	f800283a 	ret

003123f4 <__register_exitproc>:
  3123f4:	defffa04 	addi	sp,sp,-24
  3123f8:	dc000315 	stw	r16,12(sp)
  3123fc:	04000c74 	movhi	r16,49
  312400:	840f5204 	addi	r16,r16,15688
  312404:	80c00017 	ldw	r3,0(r16)
  312408:	dc400415 	stw	r17,16(sp)
  31240c:	dfc00515 	stw	ra,20(sp)
  312410:	18805217 	ldw	r2,328(r3)
  312414:	2023883a 	mov	r17,r4
  312418:	10003726 	beq	r2,zero,3124f8 <__register_exitproc+0x104>
  31241c:	10c00117 	ldw	r3,4(r2)
  312420:	010007c4 	movi	r4,31
  312424:	20c00e16 	blt	r4,r3,312460 <__register_exitproc+0x6c>
  312428:	1a000044 	addi	r8,r3,1
  31242c:	8800221e 	bne	r17,zero,3124b8 <__register_exitproc+0xc4>
  312430:	18c00084 	addi	r3,r3,2
  312434:	18c7883a 	add	r3,r3,r3
  312438:	18c7883a 	add	r3,r3,r3
  31243c:	12000115 	stw	r8,4(r2)
  312440:	10c7883a 	add	r3,r2,r3
  312444:	19400015 	stw	r5,0(r3)
  312448:	0005883a 	mov	r2,zero
  31244c:	dfc00517 	ldw	ra,20(sp)
  312450:	dc400417 	ldw	r17,16(sp)
  312454:	dc000317 	ldw	r16,12(sp)
  312458:	dec00604 	addi	sp,sp,24
  31245c:	f800283a 	ret
  312460:	00800034 	movhi	r2,0
  312464:	10800004 	addi	r2,r2,0
  312468:	10002626 	beq	r2,zero,312504 <__register_exitproc+0x110>
  31246c:	01006404 	movi	r4,400
  312470:	d9400015 	stw	r5,0(sp)
  312474:	d9800115 	stw	r6,4(sp)
  312478:	d9c00215 	stw	r7,8(sp)
  31247c:	00000000 	call	0 <__alt_mem_ImagemA>
  312480:	d9400017 	ldw	r5,0(sp)
  312484:	d9800117 	ldw	r6,4(sp)
  312488:	d9c00217 	ldw	r7,8(sp)
  31248c:	10001d26 	beq	r2,zero,312504 <__register_exitproc+0x110>
  312490:	81000017 	ldw	r4,0(r16)
  312494:	10000115 	stw	zero,4(r2)
  312498:	02000044 	movi	r8,1
  31249c:	22405217 	ldw	r9,328(r4)
  3124a0:	0007883a 	mov	r3,zero
  3124a4:	12400015 	stw	r9,0(r2)
  3124a8:	20805215 	stw	r2,328(r4)
  3124ac:	10006215 	stw	zero,392(r2)
  3124b0:	10006315 	stw	zero,396(r2)
  3124b4:	883fde26 	beq	r17,zero,312430 <__alt_data_end+0xffff2430>
  3124b8:	18c9883a 	add	r4,r3,r3
  3124bc:	2109883a 	add	r4,r4,r4
  3124c0:	1109883a 	add	r4,r2,r4
  3124c4:	21802215 	stw	r6,136(r4)
  3124c8:	01800044 	movi	r6,1
  3124cc:	12406217 	ldw	r9,392(r2)
  3124d0:	30cc983a 	sll	r6,r6,r3
  3124d4:	4992b03a 	or	r9,r9,r6
  3124d8:	12406215 	stw	r9,392(r2)
  3124dc:	21c04215 	stw	r7,264(r4)
  3124e0:	01000084 	movi	r4,2
  3124e4:	893fd21e 	bne	r17,r4,312430 <__alt_data_end+0xffff2430>
  3124e8:	11006317 	ldw	r4,396(r2)
  3124ec:	218cb03a 	or	r6,r4,r6
  3124f0:	11806315 	stw	r6,396(r2)
  3124f4:	003fce06 	br	312430 <__alt_data_end+0xffff2430>
  3124f8:	18805304 	addi	r2,r3,332
  3124fc:	18805215 	stw	r2,328(r3)
  312500:	003fc606 	br	31241c <__alt_data_end+0xffff241c>
  312504:	00bfffc4 	movi	r2,-1
  312508:	003fd006 	br	31244c <__alt_data_end+0xffff244c>

0031250c <__call_exitprocs>:
  31250c:	defff504 	addi	sp,sp,-44
  312510:	df000915 	stw	fp,36(sp)
  312514:	dd400615 	stw	r21,24(sp)
  312518:	dc800315 	stw	r18,12(sp)
  31251c:	dfc00a15 	stw	ra,40(sp)
  312520:	ddc00815 	stw	r23,32(sp)
  312524:	dd800715 	stw	r22,28(sp)
  312528:	dd000515 	stw	r20,20(sp)
  31252c:	dcc00415 	stw	r19,16(sp)
  312530:	dc400215 	stw	r17,8(sp)
  312534:	dc000115 	stw	r16,4(sp)
  312538:	d9000015 	stw	r4,0(sp)
  31253c:	2839883a 	mov	fp,r5
  312540:	04800044 	movi	r18,1
  312544:	057fffc4 	movi	r21,-1
  312548:	00800c74 	movhi	r2,49
  31254c:	108f5204 	addi	r2,r2,15688
  312550:	12000017 	ldw	r8,0(r2)
  312554:	45005217 	ldw	r20,328(r8)
  312558:	44c05204 	addi	r19,r8,328
  31255c:	a0001c26 	beq	r20,zero,3125d0 <__call_exitprocs+0xc4>
  312560:	a0800117 	ldw	r2,4(r20)
  312564:	15ffffc4 	addi	r23,r2,-1
  312568:	b8000d16 	blt	r23,zero,3125a0 <__call_exitprocs+0x94>
  31256c:	14000044 	addi	r16,r2,1
  312570:	8421883a 	add	r16,r16,r16
  312574:	8421883a 	add	r16,r16,r16
  312578:	84402004 	addi	r17,r16,128
  31257c:	a463883a 	add	r17,r20,r17
  312580:	a421883a 	add	r16,r20,r16
  312584:	e0001e26 	beq	fp,zero,312600 <__call_exitprocs+0xf4>
  312588:	80804017 	ldw	r2,256(r16)
  31258c:	e0801c26 	beq	fp,r2,312600 <__call_exitprocs+0xf4>
  312590:	bdffffc4 	addi	r23,r23,-1
  312594:	843fff04 	addi	r16,r16,-4
  312598:	8c7fff04 	addi	r17,r17,-4
  31259c:	bd7ff91e 	bne	r23,r21,312584 <__alt_data_end+0xffff2584>
  3125a0:	00800034 	movhi	r2,0
  3125a4:	10800004 	addi	r2,r2,0
  3125a8:	10000926 	beq	r2,zero,3125d0 <__call_exitprocs+0xc4>
  3125ac:	a0800117 	ldw	r2,4(r20)
  3125b0:	1000301e 	bne	r2,zero,312674 <__call_exitprocs+0x168>
  3125b4:	a0800017 	ldw	r2,0(r20)
  3125b8:	10003226 	beq	r2,zero,312684 <__call_exitprocs+0x178>
  3125bc:	a009883a 	mov	r4,r20
  3125c0:	98800015 	stw	r2,0(r19)
  3125c4:	00000000 	call	0 <__alt_mem_ImagemA>
  3125c8:	9d000017 	ldw	r20,0(r19)
  3125cc:	a03fe41e 	bne	r20,zero,312560 <__alt_data_end+0xffff2560>
  3125d0:	dfc00a17 	ldw	ra,40(sp)
  3125d4:	df000917 	ldw	fp,36(sp)
  3125d8:	ddc00817 	ldw	r23,32(sp)
  3125dc:	dd800717 	ldw	r22,28(sp)
  3125e0:	dd400617 	ldw	r21,24(sp)
  3125e4:	dd000517 	ldw	r20,20(sp)
  3125e8:	dcc00417 	ldw	r19,16(sp)
  3125ec:	dc800317 	ldw	r18,12(sp)
  3125f0:	dc400217 	ldw	r17,8(sp)
  3125f4:	dc000117 	ldw	r16,4(sp)
  3125f8:	dec00b04 	addi	sp,sp,44
  3125fc:	f800283a 	ret
  312600:	a0800117 	ldw	r2,4(r20)
  312604:	80c00017 	ldw	r3,0(r16)
  312608:	10bfffc4 	addi	r2,r2,-1
  31260c:	15c01426 	beq	r2,r23,312660 <__call_exitprocs+0x154>
  312610:	80000015 	stw	zero,0(r16)
  312614:	183fde26 	beq	r3,zero,312590 <__alt_data_end+0xffff2590>
  312618:	95c8983a 	sll	r4,r18,r23
  31261c:	a0806217 	ldw	r2,392(r20)
  312620:	a5800117 	ldw	r22,4(r20)
  312624:	2084703a 	and	r2,r4,r2
  312628:	10000b26 	beq	r2,zero,312658 <__call_exitprocs+0x14c>
  31262c:	a0806317 	ldw	r2,396(r20)
  312630:	2088703a 	and	r4,r4,r2
  312634:	20000c1e 	bne	r4,zero,312668 <__call_exitprocs+0x15c>
  312638:	89400017 	ldw	r5,0(r17)
  31263c:	d9000017 	ldw	r4,0(sp)
  312640:	183ee83a 	callr	r3
  312644:	a0800117 	ldw	r2,4(r20)
  312648:	15bfbf1e 	bne	r2,r22,312548 <__alt_data_end+0xffff2548>
  31264c:	98800017 	ldw	r2,0(r19)
  312650:	153fcf26 	beq	r2,r20,312590 <__alt_data_end+0xffff2590>
  312654:	003fbc06 	br	312548 <__alt_data_end+0xffff2548>
  312658:	183ee83a 	callr	r3
  31265c:	003ff906 	br	312644 <__alt_data_end+0xffff2644>
  312660:	a5c00115 	stw	r23,4(r20)
  312664:	003feb06 	br	312614 <__alt_data_end+0xffff2614>
  312668:	89000017 	ldw	r4,0(r17)
  31266c:	183ee83a 	callr	r3
  312670:	003ff406 	br	312644 <__alt_data_end+0xffff2644>
  312674:	a0800017 	ldw	r2,0(r20)
  312678:	a027883a 	mov	r19,r20
  31267c:	1029883a 	mov	r20,r2
  312680:	003fb606 	br	31255c <__alt_data_end+0xffff255c>
  312684:	0005883a 	mov	r2,zero
  312688:	003ffb06 	br	312678 <__alt_data_end+0xffff2678>

0031268c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  31268c:	defffd04 	addi	sp,sp,-12
  312690:	df000215 	stw	fp,8(sp)
  312694:	df000204 	addi	fp,sp,8
  312698:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  31269c:	0001883a 	nop
  3126a0:	e0bfff17 	ldw	r2,-4(fp)
  3126a4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  3126a8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  3126ac:	10000226 	beq	r2,zero,3126b8 <_exit+0x2c>
    ALT_SIM_FAIL();
  3126b0:	002af070 	cmpltui	zero,zero,43969
  3126b4:	00000106 	br	3126bc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  3126b8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  3126bc:	003fff06 	br	3126bc <__alt_data_end+0xffff26bc>
